Tutorial for finite-temperature calculations
==============================================
Heisenberg chain (finite temperatures)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Here, we study the finite-temperature
properties of spin 1/2 Heisenberg model on the chain.

.. math::

 H = J \sum_{\langle i,j\rangle}{\bf S}_{i}\cdot{\bf S}_{j}

The input file (stan.in) for 12-site Heisenberg model is as follows::

 L       = 12
 model   = "Spin" 
 method  = "FullDiag" 
 lattice = "chain"
 J = 1
 2Sz = 0
 2S  = 1

You can execute HPhi as follows ::

 HPhi -s stan.in

Full diagonalization
"""""""""""""""""""""""""""""""
After executing the full diagonalization,
all the eigen energies are output in **output/Eiegenvalue.dat**.
By using the python script **(Git/HPhi/tool/FiniteT/Finite.py)**, 
you can obtain the temperature dependence of the energy and the specific heat.

You can execute **Finite.py** as follows ::

 python3 Finite.py

Then, you can obtain **FullDiag.dat** as follows ::

     0.000100  -5.3873909174000003    0.0000000000000000   
     0.000150  -5.3873909174000003    0.0000000000000000   
     0.000200  -5.3873909174000003    0.0000000000000000   
     0.000250  -5.3873909174000003    0.0000000000000000   
     0.000300  -5.3873909174000003    0.0000000000000000   

The 1st row represents temperature, 2nd row represents the energy, and
the 3rd row represents the specific heat defined 
by :math:`C=(\langle E^2 \rangle-\langle E \rangle^2)/T^2`.

TPQ method
"""""""""""""""""""""""""""""""
By selecting method as "TPQ",
you can perform the finite-temperature calculations using the TPQ method.

The input file (stan.in) for 12-site Heisenberg model is as follows::

 L       = 12
 model   = "Spin" 
 method  = "TPQ" 
 lattice = "chain"
 J = 1
 2Sz = 0
 2S  = 1

After performing the TPQ calculations,
all the eigen energies are output in **output/SS_rand*.dat**.
By using the python script **(Git/HPhi/tool/FiniteT/AveSSrand.py)**, 
you can obtain the temperature dependence of 
physical quantities such as the energy and the specific heat.

Then, you can obtain **ave_TPQ.dat** as follows ::

 # temperature T    err of T  Energy E    error of E  specific heat C  err of C   
 30.17747           0.02022   -0.35489    0.04044     0.00264          8.1126-05
 15.10875           0.01016   -0.43500    0.04065     0.01068          0.0003182
 10.08598           0.00681   -0.51592    0.04086     0.02423          0.0007030
 7.574693           0.00513   -0.59754    0.04106     0.04335          0.0012311
 6.067978           0.00412   -0.67978    0.04123     0.06808          0.0019053

Using gnuplot, you can directly compare the two results :: 

  plot "FullDiag.dat" u 1:2 w l,"ave_TPQ.dat" u 1:3:4 w e

You can see the following output image.

.. image:: ../../figs/finiteT.*
   :align: center

Kitaev cluster (finite temperatures)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

In this subsection, we will examine the convergence of the sampling in the TPQ method.
Here, we study a 12 site cluster of a typical magnetically frustrated magnet, the Kitaev model,
whose heat capacity shows non-trivial temperature dependence.

The Kitaev model is a kind of the Ising model with bond-orientation dependent Ising interactions as follows:

.. math::

 H = K \sum_{\gamma=x,y,z}\sum_{\langle i,j\rangle_\gamma}S_{i}^{\gamma} S_{j}^{\gamma},

where the index :math:`\gamma=x,y,z` specifies the bond direction of the nearest-neighbor site pair :math:`\langle i,j\rangle_\gamma`.

Lattice structure and eigen states of the Kitaev cluster
"""""""""""""""""""""""""""""""
A 12 site cluster of the Kitaev model is generated by the following standard input file: ::

 W = 2
 L = 3
 model = "SpinGC"
 method = "CG"
 lattice = "Honeycomb"
 J0x = -1.0
 J0y =  0.0
 J0z =  0.0
 J1x =  0.0
 J1y = -1.0
 J1z =  0.0
 J2x =  0.0
 J2y =  0.0
 J2z = -1.0
 2S=1
 exct = 8

You can visualize the cluster by plotting **lattice.gp** as shown in the figure below.
Here the :math:`x` bond (:math:`\langle i,j\rangle_x`) connects, for example,
the 0th and 1st sites (:math:`i=0, j=1`),
while the :math:`y` bond (:math:`\langle i,j\rangle_y`) connects, for example,
the 1st and 2nd sites (:math:`i=1, j=2`).
The :math: `z` bond (:math:`\langle i,j\rangle_z`) connects
the 1st and 4th sites for example (:math:`i=1, j=4`). 

.. image:: ../../figs/Kitaev_12site.*
   :align: center

By using the above standard input, we will obtain **zvo_energy.dat** in your **output** directory: ::

 State 0
  Energy  -2.4500706750607750
  Doublon  0.0000000000000000
  Sz  0.0000000000333962

 State 1
  Energy  -2.4500706750607750
  Doublon  0.0000000000000000
  Sz  -0.0000000000081852

 State 2
  Energy  -2.4500706750607804
  Doublon  0.0000000000000000
  Sz  -0.0000000000025177

 State 3
  Energy  -2.4500706750607777
  Doublon  0.0000000000000000
  Sz  -0.0000000000018603

 State 4
  Energy  -2.3427788601414870
  Doublon  0.0000000000000000
  Sz  0.0000000000982415

 State 5
  Energy  -2.3427788601414870
  Doublon  0.0000000000000000
  Sz  -0.0000000000217449

 State 6
  Energy  -2.3427788601414830
  Doublon  0.0000000000000000
  Sz  -0.0000000000488295

 State 7
  Energy  -2.3427788601414847
  Doublon  0.0000000000000000
  Sz  0.0000000001057668

 State 8
  Energy  -2.3237385032276898
  Doublon  0.0000000000000000
  Sz  -0.0647000851410590

 State 9
  Energy  -2.3237385032277440
  Doublon  0.0000000000000000
  Sz  0.4412235001577003
 
Convergence of the microcanonical TPQ
"""""""""""""""""""""""""""""""

Then, we will examine the convergence of the microcanonical TPQ method
introduced by S. Sugiura and A. Shimizu, which is implemented in
H :math:`\Phi`
for `method = "TPQ"'.

Input ::

 W = 2
 L = 3
 model = "SpinGC"
 method = "TPQ"
 lattice = "Honeycomb"
 J0x = -1.0
 J0y =  0.0
 J0z =  0.0
 J1x =  0.0
 J1y = -1.0
 J1z =  0.0
 J2x =  0.0
 J2y =  0.0
 J2z = -1.0
 2S=1
 Lanczos_max = 3000
 LargeValue = 4.0
 NumAve = 64

.. image:: ../../figs/Heat_Capacity_Kitaev_12.*
   :align: center
