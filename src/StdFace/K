ChainLattice.c:  StdI->NsiteUC = 1;
ChainLattice.c:  StdFace_PrintVal_d("a", &StdI->a, 1.0);
ChainLattice.c:  StdFace_PrintVal_d("Wlength", &StdI->length[0], StdI->a);
ChainLattice.c:  StdFace_PrintVal_d("Llength", &StdI->length[1], StdI->a);
ChainLattice.c:  StdFace_PrintVal_d("Wx", &StdI->direct[0][0], StdI->length[0]);
ChainLattice.c:  StdFace_PrintVal_d("Wy", &StdI->direct[0][1], 0.0);
ChainLattice.c:  StdFace_PrintVal_d("Lx", &StdI->direct[1][0], 0.0);
ChainLattice.c:  StdFace_PrintVal_d("Ly", &StdI->direct[1][1], StdI->length[1]);
ChainLattice.c:  StdFace_PrintVal_d("phase0", &StdI->phase[0], 0.0);
ChainLattice.c:  StdFace_NotUsed_d("phase1", StdI->phase[1]);
ChainLattice.c:  StdI->phase[1] = StdI->phase[0];
ChainLattice.c:  StdI->phase[0] = 0.0;
ChainLattice.c:  StdFace_RequiredVal_i("L", StdI->L);
ChainLattice.c:  StdFace_NotUsed_i("W", StdI->W);
ChainLattice.c:  StdI->W = 1;
ChainLattice.c:  StdI->tau[0][0] = 0.0; StdI->tau[0][1] = 0.0; StdI->tau[0][2] = 0.0;
ChainLattice.c:  StdFace_NotUsed_J("J1", StdI->J1All, StdI->J1);
ChainLattice.c:  StdFace_NotUsed_J("J2", StdI->J2All, StdI->J2);
ChainLattice.c:  StdFace_NotUsed_J("J1'", StdI->J1pAll, StdI->J1p);
ChainLattice.c:  StdFace_NotUsed_J("J2'", StdI->J2pAll, StdI->J2p);
ChainLattice.c:  StdFace_NotUsed_c("t1", StdI->t1);
ChainLattice.c:  StdFace_NotUsed_c("t2", StdI->t2);
ChainLattice.c:  StdFace_NotUsed_d("t1'", StdI->t1p);
ChainLattice.c:  StdFace_NotUsed_d("t2'", StdI->t2p);
ChainLattice.c:  StdFace_NotUsed_d("V1", StdI->V1);
ChainLattice.c:  StdFace_NotUsed_d("V2", StdI->V2);
ChainLattice.c:  StdFace_NotUsed_d("V1'", StdI->V1p);
ChainLattice.c:  StdFace_NotUsed_d("V2'", StdI->V2p);
ChainLattice.c:  StdFace_NotUsed_d("K", StdI->K);
ChainLattice.c:  StdFace_PrintVal_d("h", &StdI->h, 0.0);
ChainLattice.c:  StdFace_PrintVal_d("Gamma", &StdI->Gamma, 0.0);
ChainLattice.c:  if (strcmp(StdI->model, "spin") == 0 ) {
ChainLattice.c:    StdFace_PrintVal_i("2S", &StdI->S2, 1);
ChainLattice.c:    StdFace_PrintVal_d("D", &StdI->D[2][2], 0.0);
ChainLattice.c:    StdFace_InputSpinNN(StdI, StdI->J0, StdI->J0All, "J0");
ChainLattice.c:    StdFace_InputSpin(StdI, StdI->Jp, StdI->JpAll, "J'");
ChainLattice.c:    StdFace_NotUsed_d("mu", StdI->mu);
ChainLattice.c:    StdFace_NotUsed_d("U", StdI->U);
ChainLattice.c:    StdFace_NotUsed_c("t", StdI->t);
ChainLattice.c:    StdFace_NotUsed_c("t0", StdI->t0);
ChainLattice.c:    StdFace_NotUsed_c("t'", StdI->tp);
ChainLattice.c:    StdFace_NotUsed_d("V", StdI->V);
ChainLattice.c:    StdFace_NotUsed_d("V0", StdI->V0);
ChainLattice.c:    StdFace_NotUsed_d("V'", StdI->Vp);
ChainLattice.c:  }/*if (strcmp(StdI->model, "spin") == 0 )*/
ChainLattice.c:    StdFace_PrintVal_d("mu", &StdI->mu, 0.0);
ChainLattice.c:    StdFace_PrintVal_d("U", &StdI->U, 0.0);
ChainLattice.c:    StdFace_InputHopp(StdI, &StdI->t0, "t0");
ChainLattice.c:    StdFace_PrintVal_c("t'", &StdI->tp, 0.0);
ChainLattice.c:    StdFace_InputCoulombV(StdI, &StdI->V0, "V0");
ChainLattice.c:    StdFace_PrintVal_d("V'", &StdI->Vp, 0.0);
ChainLattice.c:    StdFace_NotUsed_J("J0", StdI->J0All, StdI->J0);
ChainLattice.c:    StdFace_NotUsed_J("J'", StdI->JpAll, StdI->Jp);
ChainLattice.c:    StdFace_NotUsed_d("D", StdI->D[2][2]);
ChainLattice.c:    if (strcmp(StdI->model, "hubbard") == 0 ) {
ChainLattice.c:      StdFace_NotUsed_i("2S", StdI->S2);
ChainLattice.c:      StdFace_NotUsed_J("J", StdI->JAll, StdI->J);
ChainLattice.c:    else if (strcmp(StdI->model, "kondo") == 0 ) {
ChainLattice.c:      StdFace_PrintVal_i("2S", &StdI->S2, 1);
ChainLattice.c:      StdFace_InputSpin(StdI, StdI->J, StdI->JAll, "J");
ChainLattice.c:  }/*if (strcmp(StdI->model, "spin") != 0 )*/
ChainLattice.c:  StdI->nsite = StdI->L;
ChainLattice.c:  if (strcmp(StdI->model, "kondo") == 0 ) StdI->nsite *= 2;
ChainLattice.c:  StdI->locspinflag = (int *)malloc(sizeof(int) * StdI->nsite);
ChainLattice.c:  if (strcmp(StdI->model, "spin") == 0 )
ChainLattice.c:    for (isite = 0; isite < StdI->nsite; isite++)StdI->locspinflag[isite] = StdI->S2;
ChainLattice.c:  else if (strcmp(StdI->model, "hubbard") == 0 ) 
ChainLattice.c:    for (isite = 0; isite < StdI->nsite; isite++)StdI->locspinflag[isite] = 0;
ChainLattice.c:  else if (strcmp(StdI->model, "kondo") == 0 ) 
ChainLattice.c:    for (isite = 0; isite < StdI->nsite / 2; isite++) {
ChainLattice.c:      StdI->locspinflag[isite] = StdI->S2;
ChainLattice.c:      StdI->locspinflag[isite + StdI->nsite / 2] = 0;
ChainLattice.c:  if (strcmp(StdI->model, "spin") == 0 ) {
ChainLattice.c:    ntransMax = StdI->L * (StdI->S2 + 1/*h*/ + 2 * StdI->S2/*Gamma*/);
ChainLattice.c:    nintrMax = StdI->L * (StdI->NsiteUC/*D*/ + 1/*J*/ + 1/*J'*/)
ChainLattice.c:      * (3 * StdI->S2 + 1) * (3 * StdI->S2 + 1);
ChainLattice.c:    ntransMax = StdI->L * 2/*spin*/ * (2 * StdI->NsiteUC/*mu+h+Gamma*/ + 2/*t*/ + 2/*t'*/);
ChainLattice.c:    nintrMax = StdI->L * (StdI->NsiteUC/*U*/ + 4 * (1/*V*/ + 1/*V'*/));
ChainLattice.c:    if (strcmp(StdI->model, "kondo") == 0) {
ChainLattice.c:      ntransMax += StdI->L * (StdI->S2 + 1/*h*/ + 2 * StdI->S2/*Gamma*/);
ChainLattice.c:      nintrMax += StdI->nsite / 2 * (3 * 1 + 1) * (3 * StdI->S2 + 1);
ChainLattice.c:    }/*if (strcmp(StdI->model, "kondo") == 0)*/
ChainLattice.c:  for (iL = 0; iL < StdI->L; iL++){
ChainLattice.c:    if (strcmp(StdI->model, "kondo") == 0 ) isite += StdI->L;
ChainLattice.c:    if (strcmp(StdI->model, "spin") == 0 ) {
ChainLattice.c:      StdFace_MagField(StdI, StdI->S2, -StdI->h, -StdI->Gamma, isite);
ChainLattice.c:      StdFace_GeneralJ(StdI, StdI->D, StdI->S2, StdI->S2, isite, isite);
ChainLattice.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
ChainLattice.c:      StdFace_HubbardLocal(StdI, StdI->mu, -StdI->h, -StdI->Gamma, StdI->U, isite);
ChainLattice.c:      if (strcmp(StdI->model, "kondo") == 0 ) {
ChainLattice.c:        StdFace_GeneralJ(StdI, StdI->J, 1, StdI->S2, isite, jsite);
ChainLattice.c:        StdFace_MagField(StdI, StdI->S2, -StdI->h, -StdI->Gamma, jsite);
ChainLattice.c:      }/*if (strcmp(StdI->model, "kondo") == 0 )*/
ChainLattice.c:    if (strcmp(StdI->model, "spin") == 0 ) {
ChainLattice.c:      StdFace_GeneralJ(StdI, StdI->J0, StdI->S2, StdI->S2, isite, jsite);
ChainLattice.c:      StdFace_Hopping(StdI, Cphase * StdI->t0, isite, jsite, dR);
ChainLattice.c:      StdFace_Coulomb(StdI, StdI->V0, isite, jsite);
ChainLattice.c:    if (strcmp(StdI->model, "spin") == 0 ) {
ChainLattice.c:      StdFace_GeneralJ(StdI, StdI->Jp, StdI->S2, StdI->S2, isite, jsite);
ChainLattice.c:      StdFace_Hopping(StdI, Cphase * StdI->tp, isite, jsite, dR);
ChainLattice.c:      StdFace_Coulomb(StdI, StdI->Vp, isite, jsite);
ChainLattice.c:  }/*for (iL = 0; iL < StdI->L; iL++)*/
ChainLattice.c:  StdI->NsiteUC = 1;
ChainLattice.c:    -0.5 * StdI->Gamma, 0.0, -0.5 *StdI->h);
ChainLattice.c:    0.25 * StdI->J0[0][0], 0.25 * StdI->J0[0][1], 0.25 * StdI->J0[0][2]);
ChainLattice.c:    0.25 * StdI->J0[1][0], 0.25 * StdI->J0[1][1], 0.25 * StdI->J0[1][2]);
ChainLattice.c:    0.25 * StdI->J0[2][0], 0.25 * StdI->J0[2][1], 0.25 * StdI->J0[2][2]);
ChainLattice.c:    0.25 * StdI->Jp[0][0], 0.25 * StdI->Jp[0][1], 0.25 * StdI->Jp[0][2]);
ChainLattice.c:    0.25 * StdI->Jp[1][0], 0.25 * StdI->Jp[1][1], 0.25 * StdI->Jp[1][2]);
ChainLattice.c:    0.25 * StdI->Jp[2][0], 0.25 * StdI->Jp[2][1], 0.25 * StdI->Jp[2][2]);
ChainLattice.c:  if (StdI->S2 != 1) {
ChainLattice.c:  StdI->ishift_nspin = 4;
ChainLattice.c:  if(StdI->L % 8 != 0){
ChainLattice.c:  StdI->W = StdI->L / 2;
ChainLattice.c:  StdI->L = 2;
ChainLattice.c:  StdI->num_pivot = StdI->W / 4;
ChainLattice.c:  fprintf(fp, "# W0  R0  StdI->num_pivot  StdI->ishift_nspin\n");
ChainLattice.c:  fprintf(fp, "%d %d %d %d\n", StdI->W, StdI->L, StdI->num_pivot, StdI->ishift_nspin);
ChainLattice.c:  StdI->list_6spin_star = (int **)malloc(sizeof(int*) * StdI->num_pivot);
ChainLattice.c:  for (ipivot = 0; ipivot < StdI->num_pivot; ipivot++) {
ChainLattice.c:    StdI->list_6spin_star[ipivot] = (int *)malloc(sizeof(int) * 7);
ChainLattice.c:  for (ipivot = 0; ipivot < StdI->num_pivot; ipivot++) {
ChainLattice.c:    StdI->list_6spin_star[ipivot][0] = 8; // num of J
ChainLattice.c:    StdI->list_6spin_star[ipivot][1] = 1;
ChainLattice.c:    StdI->list_6spin_star[ipivot][2] = 1;
ChainLattice.c:    StdI->list_6spin_star[ipivot][3] = 1;
ChainLattice.c:    StdI->list_6spin_star[ipivot][4] = 1;
ChainLattice.c:    StdI->list_6spin_star[ipivot][5] = 1;
ChainLattice.c:    StdI->list_6spin_star[ipivot][6] = 1; // flag
ChainLattice.c:  fprintf(fp, "# StdI->list_6spin_star\n");
ChainLattice.c:  for (ipivot = 0; ipivot < StdI->num_pivot; ipivot++) {
ChainLattice.c:      fprintf(fp, "%d ", StdI->list_6spin_star[ipivot][isite]);
ChainLattice.c:  StdI->list_6spin_pair = (int ***)malloc(sizeof(int**) * StdI->num_pivot);
ChainLattice.c:  for (ipivot = 0; ipivot < StdI->num_pivot; ipivot++) {
ChainLattice.c:    StdI->list_6spin_pair[ipivot] = (int **)malloc(sizeof(int*) * 7);
ChainLattice.c:      StdI->list_6spin_pair[ipivot][isite] = (int *)malloc(sizeof(int) * StdI->list_6spin_star[ipivot][0]);
ChainLattice.c:  for (ipivot = 0; ipivot < StdI->num_pivot; ipivot++) {
ChainLattice.c:    StdI->list_6spin_pair[ipivot][0][0] = 0;
ChainLattice.c:    StdI->list_6spin_pair[ipivot][1][0] = 1;
ChainLattice.c:    StdI->list_6spin_pair[ipivot][2][0] = 2;
ChainLattice.c:    StdI->list_6spin_pair[ipivot][3][0] = 3;
ChainLattice.c:    StdI->list_6spin_pair[ipivot][4][0] = 4;
ChainLattice.c:    StdI->list_6spin_pair[ipivot][5][0] = 5;
ChainLattice.c:    StdI->list_6spin_pair[ipivot][6][0] = 1; // type of J
ChainLattice.c:    StdI->list_6spin_pair[ipivot][0][1] = 1;
ChainLattice.c:    StdI->list_6spin_pair[ipivot][1][1] = 2;
ChainLattice.c:    StdI->list_6spin_pair[ipivot][2][1] = 0;
ChainLattice.c:    StdI->list_6spin_pair[ipivot][3][1] = 3;
ChainLattice.c:    StdI->list_6spin_pair[ipivot][4][1] = 4;
ChainLattice.c:    StdI->list_6spin_pair[ipivot][5][1] = 5;
ChainLattice.c:    StdI->list_6spin_pair[ipivot][6][1] = 1; // type of J
ChainLattice.c:    StdI->list_6spin_pair[ipivot][0][2] = 2;
ChainLattice.c:    StdI->list_6spin_pair[ipivot][1][2] = 3;
ChainLattice.c:    StdI->list_6spin_pair[ipivot][2][2] = 0;
ChainLattice.c:    StdI->list_6spin_pair[ipivot][3][2] = 1;
ChainLattice.c:    StdI->list_6spin_pair[ipivot][4][2] = 4;
ChainLattice.c:    StdI->list_6spin_pair[ipivot][5][2] = 5;
ChainLattice.c:    StdI->list_6spin_pair[ipivot][6][2] = 1; // type of J
ChainLattice.c:    StdI->list_6spin_pair[ipivot][0][3] = 3;
ChainLattice.c:    StdI->list_6spin_pair[ipivot][1][3] = 4;
ChainLattice.c:    StdI->list_6spin_pair[ipivot][2][3] = 0;
ChainLattice.c:    StdI->list_6spin_pair[ipivot][3][3] = 1;
ChainLattice.c:    StdI->list_6spin_pair[ipivot][4][3] = 2;
ChainLattice.c:    StdI->list_6spin_pair[ipivot][5][3] = 5;
ChainLattice.c:    StdI->list_6spin_pair[ipivot][6][3] = 1; // type of J
ChainLattice.c:    StdI->list_6spin_pair[ipivot][0][4] = 0;
ChainLattice.c:    StdI->list_6spin_pair[ipivot][1][4] = 2;
ChainLattice.c:    StdI->list_6spin_pair[ipivot][2][4] = 1;
ChainLattice.c:    StdI->list_6spin_pair[ipivot][3][4] = 3;
ChainLattice.c:    StdI->list_6spin_pair[ipivot][4][4] = 4;
ChainLattice.c:    StdI->list_6spin_pair[ipivot][5][4] = 5;
ChainLattice.c:    StdI->list_6spin_pair[ipivot][6][4] = 2; // type of J
ChainLattice.c:    StdI->list_6spin_pair[ipivot][0][5] = 1;
ChainLattice.c:    StdI->list_6spin_pair[ipivot][1][5] = 3;
ChainLattice.c:    StdI->list_6spin_pair[ipivot][2][5] = 0;
ChainLattice.c:    StdI->list_6spin_pair[ipivot][3][5] = 2;
ChainLattice.c:    StdI->list_6spin_pair[ipivot][4][5] = 4;
ChainLattice.c:    StdI->list_6spin_pair[ipivot][5][5] = 5;
ChainLattice.c:    StdI->list_6spin_pair[ipivot][6][5] = 2; // type of J
ChainLattice.c:    StdI->list_6spin_pair[ipivot][0][6] = 2;
ChainLattice.c:    StdI->list_6spin_pair[ipivot][1][6] = 4;
ChainLattice.c:    StdI->list_6spin_pair[ipivot][2][6] = 0;
ChainLattice.c:    StdI->list_6spin_pair[ipivot][3][6] = 1;
ChainLattice.c:    StdI->list_6spin_pair[ipivot][4][6] = 3;
ChainLattice.c:    StdI->list_6spin_pair[ipivot][5][6] = 5;
ChainLattice.c:    StdI->list_6spin_pair[ipivot][6][6] = 2; // type of J
ChainLattice.c:    StdI->list_6spin_pair[ipivot][0][7] = 3;
ChainLattice.c:    StdI->list_6spin_pair[ipivot][1][7] = 5;
ChainLattice.c:    StdI->list_6spin_pair[ipivot][2][7] = 0;
ChainLattice.c:    StdI->list_6spin_pair[ipivot][3][7] = 1;
ChainLattice.c:    StdI->list_6spin_pair[ipivot][4][7] = 2;
ChainLattice.c:    StdI->list_6spin_pair[ipivot][5][7] = 4;
ChainLattice.c:    StdI->list_6spin_pair[ipivot][6][7] = 2; // type of J
ChainLattice.c:  fprintf(fp, "# StdI->list_6spin_pair\n");
ChainLattice.c:  for (ipivot = 0; ipivot < StdI->num_pivot; ipivot++) {
ChainLattice.c:    for (kintr = 0; kintr < StdI->list_6spin_star[ipivot][0]; kintr++) {
ChainLattice.c:        fprintf(fp, "%d ", StdI->list_6spin_pair[ipivot][isite][kintr]);
ChainLattice.c:  for (ipivot = 0; ipivot < StdI->num_pivot; ipivot++) {
ChainLattice.c:    free(StdI->list_6spin_star[ipivot]);
ChainLattice.c:  free(StdI->list_6spin_star);
ChainLattice.c:  for (ipivot = 0; ipivot < StdI->num_pivot; ipivot++) {
ChainLattice.c:      free(StdI->list_6spin_pair[ipivot][isite]);
ChainLattice.c:    free(StdI->list_6spin_pair[ipivot]);
ChainLattice.c:  free(StdI->list_6spin_pair);
FCOrtho.c:  StdI->NsiteUC = 1;
FCOrtho.c:  StdFace_PrintVal_d("a", &StdI->a, 1.0);
FCOrtho.c:  StdFace_PrintVal_d("Wlength", &StdI->length[0], StdI->a);
FCOrtho.c:  StdFace_PrintVal_d("Llength", &StdI->length[1], StdI->a);
FCOrtho.c:  StdFace_PrintVal_d("Hlength", &StdI->length[2], StdI->a);
FCOrtho.c:  StdFace_PrintVal_d("Wx", &StdI->direct[0][0], 0.0);
FCOrtho.c:  StdFace_PrintVal_d("Wy", &StdI->direct[0][1], 0.5 * StdI->length[0]);
FCOrtho.c:  StdFace_PrintVal_d("Wz", &StdI->direct[0][2], 0.5 * StdI->length[0]);
FCOrtho.c:  StdFace_PrintVal_d("Lx", &StdI->direct[1][0], 0.5 * StdI->length[1]);
FCOrtho.c:  StdFace_PrintVal_d("Ly", &StdI->direct[1][1], 0.0);
FCOrtho.c:  StdFace_PrintVal_d("Lz", &StdI->direct[1][2], 0.5 * StdI->length[1]);
FCOrtho.c:  StdFace_PrintVal_d("Hx", &StdI->direct[2][0], 0.5 * StdI->length[2]);
FCOrtho.c:  StdFace_PrintVal_d("Hy", &StdI->direct[2][1], 0.5 * StdI->length[2]);
FCOrtho.c:  StdFace_PrintVal_d("Hz", &StdI->direct[2][2], 0.0);
FCOrtho.c:  StdFace_PrintVal_d("phase0", &StdI->phase[0], 0.0);
FCOrtho.c:  StdFace_PrintVal_d("phase1", &StdI->phase[1], 0.0);
FCOrtho.c:  StdFace_PrintVal_d("phase2", &StdI->phase[2], 0.0);
FCOrtho.c:  StdI->tau[0][0] = 0.0; StdI->tau[0][1] = 0.0; ; StdI->tau[0][2] = 0.0;
FCOrtho.c:  StdFace_NotUsed_d("K", StdI->K);
FCOrtho.c:  StdFace_PrintVal_d("h", &StdI->h, 0.0);
FCOrtho.c:  StdFace_PrintVal_d("Gamma", &StdI->Gamma, 0.0);
FCOrtho.c:  if (strcmp(StdI->model, "spin") == 0 ) {
FCOrtho.c:    StdFace_PrintVal_i("2S", &StdI->S2, 1);
FCOrtho.c:    StdFace_PrintVal_d("D", &StdI->D[2][2], 0.0);
FCOrtho.c:    StdFace_InputSpinNN(StdI, StdI->J0, StdI->J0All, "J0");
FCOrtho.c:    StdFace_InputSpinNN(StdI, StdI->J1, StdI->J1All, "J1");
FCOrtho.c:    StdFace_InputSpinNN(StdI, StdI->J2, StdI->J2All, "J2");
FCOrtho.c:    StdFace_InputSpin(StdI, StdI->J0p, StdI->J0pAll, "J0'");
FCOrtho.c:    StdFace_InputSpin(StdI, StdI->J1p, StdI->J1pAll, "J1'");
FCOrtho.c:    StdFace_InputSpin(StdI, StdI->J2p, StdI->J2pAll, "J2'");
FCOrtho.c:    StdFace_InputSpin(StdI, StdI->Jpp, StdI->JppAll, "J''");
FCOrtho.c:    StdFace_NotUsed_d("mu", StdI->mu);
FCOrtho.c:    StdFace_NotUsed_d("U", StdI->U);
FCOrtho.c:    StdFace_NotUsed_c("t", StdI->t);
FCOrtho.c:    StdFace_NotUsed_c("t0", StdI->t0);
FCOrtho.c:    StdFace_NotUsed_c("t1", StdI->t1);
FCOrtho.c:    StdFace_NotUsed_c("t2", StdI->t2);
FCOrtho.c:    StdFace_NotUsed_c("t'", StdI->tp);
FCOrtho.c:    StdFace_NotUsed_c("t0'", StdI->t0p);
FCOrtho.c:    StdFace_NotUsed_c("t1'", StdI->t1p);
FCOrtho.c:    StdFace_NotUsed_c("t2'", StdI->t2p);
FCOrtho.c:    StdFace_NotUsed_c("t''", StdI->tpp);
FCOrtho.c:    StdFace_NotUsed_d("V", StdI->V);
FCOrtho.c:    StdFace_NotUsed_d("V0", StdI->V0);
FCOrtho.c:    StdFace_NotUsed_d("V1", StdI->V1);
FCOrtho.c:    StdFace_NotUsed_d("V'", StdI->Vp);
FCOrtho.c:  }/*if (strcmp(StdI->model, "spin") == 0 )*/
FCOrtho.c:    StdFace_PrintVal_d("mu", &StdI->mu, 0.0);
FCOrtho.c:    StdFace_PrintVal_d("U", &StdI->U, 0.0);
FCOrtho.c:    StdFace_InputHopp(StdI, &StdI->t0, "t0");
FCOrtho.c:    StdFace_InputHopp(StdI, &StdI->t1, "t1");
FCOrtho.c:    StdFace_InputHopp(StdI, &StdI->t2, "t2");
FCOrtho.c:    StdFace_PrintVal_c("t0'", &StdI->t0p, 0.0);
FCOrtho.c:    StdFace_PrintVal_c("t1'", &StdI->t1p, 0.0);
FCOrtho.c:    StdFace_PrintVal_c("t2'", &StdI->t2p, 0.0);
FCOrtho.c:    StdFace_InputCoulombV(StdI, &StdI->V0, "V0");
FCOrtho.c:    StdFace_InputCoulombV(StdI, &StdI->V1, "V1");
FCOrtho.c:    StdFace_InputCoulombV(StdI, &StdI->V2, "V2");
FCOrtho.c:    StdFace_PrintVal_d("V0'", &StdI->V0p, 0.0);
FCOrtho.c:    StdFace_PrintVal_d("V1'", &StdI->V1p, 0.0);
FCOrtho.c:    StdFace_PrintVal_d("V2'", &StdI->V2p, 0.0);
FCOrtho.c:    StdFace_NotUsed_J("J0", StdI->J0All, StdI->J0);
FCOrtho.c:    StdFace_NotUsed_J("J1", StdI->J1All, StdI->J1);
FCOrtho.c:    StdFace_NotUsed_J("J2", StdI->J2All, StdI->J2);
FCOrtho.c:    StdFace_NotUsed_J("J0'", StdI->J0pAll, StdI->J0p);
FCOrtho.c:    StdFace_NotUsed_J("J1'", StdI->J1pAll, StdI->J1p);
FCOrtho.c:    StdFace_NotUsed_J("J2'", StdI->J2pAll, StdI->J2p);
FCOrtho.c:    StdFace_NotUsed_J("J''", StdI->JppAll, StdI->Jpp);
FCOrtho.c:    StdFace_NotUsed_d("D", StdI->D[2][2]);
FCOrtho.c:    if (strcmp(StdI->model, "hubbard") == 0 ) {
FCOrtho.c:      StdFace_NotUsed_i("2S", StdI->S2);
FCOrtho.c:      StdFace_NotUsed_J("J", StdI->JAll, StdI->J);
FCOrtho.c:    }/*if (strcmp(StdI->model, "hubbard") == 0 )*/
FCOrtho.c:      StdFace_PrintVal_i("2S", &StdI->S2, 1);
FCOrtho.c:      StdFace_InputSpin(StdI, StdI->J, StdI->JAll, "J");
FCOrtho.c:  StdI->nsite = StdI->NsiteUC * StdI->NCell;
FCOrtho.c:  if (strcmp(StdI->model, "kondo") == 0 ) StdI->nsite *= 2;
FCOrtho.c:  StdI->locspinflag = (int *)malloc(sizeof(int) * StdI->nsite);
FCOrtho.c:  if(strcmp(StdI->model, "spin") == 0 )
FCOrtho.c:    for (isite = 0; isite < StdI->nsite; isite++) StdI->locspinflag[isite] = StdI->S2;
FCOrtho.c:  else if(strcmp(StdI->model, "hubbard") == 0 )
FCOrtho.c:    for (isite = 0; isite < StdI->nsite; isite++) StdI->locspinflag[isite] = 0;
FCOrtho.c:    for (iL = 0; iL < StdI->nsite / 2; iL++) {
FCOrtho.c:      StdI->locspinflag[iL] = StdI->S2;
FCOrtho.c:      StdI->locspinflag[iL + StdI->nsite / 2] = 0;
FCOrtho.c:  if (strcmp(StdI->model, "spin") == 0 ) {
FCOrtho.c:    ntransMax = StdI->nsite * (StdI->S2 + 1/*h*/ + 2 * StdI->S2/*Gamma*/);
FCOrtho.c:    nintrMax = StdI->NCell * (StdI->NsiteUC/*D*/ + 6/*J*/ + 3/*J'*/ + 0/*J''*/)
FCOrtho.c:      * (3 * StdI->S2 + 1) * (3 * StdI->S2 + 1);
FCOrtho.c:    ntransMax = StdI->NCell * 2/*spin*/ * (2 * StdI->NsiteUC/*mu+h+Gamma*/ + 12/*t*/ + 6/*t'*/ + 0/*t''*/);
FCOrtho.c:    nintrMax = StdI->NCell * (StdI->NsiteUC/*U*/ + 4 * (6/*V*/ + 3/*V'*/ + 0/*V''*/));
FCOrtho.c:    if (strcmp(StdI->model, "kondo") == 0) {
FCOrtho.c:      ntransMax += StdI->nsite / 2 * (StdI->S2 + 1/*h*/ + 2 * StdI->S2/*Gamma*/);
FCOrtho.c:      nintrMax += StdI->nsite / 2 * (3 * StdI->S2 + 1) * (3 * StdI->S2 + 1);
FCOrtho.c:    }/*if (strcmp(StdI->model, "kondo") == 0)*/
FCOrtho.c:  for (kCell = 0; kCell < StdI->NCell; kCell++){
FCOrtho.c:    iW = StdI->Cell[kCell][0];
FCOrtho.c:    iL = StdI->Cell[kCell][1];
FCOrtho.c:    iH = StdI->Cell[kCell][2];
FCOrtho.c:    if (strcmp(StdI->model, "kondo") == 0 ) isite += StdI->NCell;
FCOrtho.c:    if (strcmp(StdI->model, "spin") == 0 ) {
FCOrtho.c:      StdFace_MagField(StdI, StdI->S2, -StdI->h, -StdI->Gamma, isite);
FCOrtho.c:      StdFace_GeneralJ(StdI, StdI->D, StdI->S2, StdI->S2, isite, isite);
FCOrtho.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
FCOrtho.c:      StdFace_HubbardLocal(StdI, StdI->mu, -StdI->h, -StdI->Gamma, StdI->U, isite);
FCOrtho.c:      if (strcmp(StdI->model, "kondo") == 0 ) {
FCOrtho.c:        StdFace_GeneralJ(StdI, StdI->J, 1, StdI->S2, isite, jsite);
FCOrtho.c:      }/*if (strcmp(StdI->model, "kondo") == 0 )*/
FCOrtho.c:    if (strcmp(StdI->model, "spin") == 0 ) {
FCOrtho.c:      StdFace_GeneralJ(StdI, StdI->J0, StdI->S2, StdI->S2, isite, jsite);
FCOrtho.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
FCOrtho.c:      StdFace_Hopping(StdI, Cphase * StdI->t0, isite, jsite, dR);
FCOrtho.c:      StdFace_Coulomb(StdI, StdI->V0, isite, jsite);
FCOrtho.c:    if (strcmp(StdI->model, "spin") == 0) {
FCOrtho.c:      StdFace_GeneralJ(StdI, StdI->J0, StdI->S2, StdI->S2, isite, jsite);
FCOrtho.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
FCOrtho.c:      StdFace_Hopping(StdI, Cphase * StdI->t0, isite, jsite, dR);
FCOrtho.c:      StdFace_Coulomb(StdI, StdI->V0, isite, jsite);
FCOrtho.c:    if (strcmp(StdI->model, "spin") == 0) {
FCOrtho.c:      StdFace_GeneralJ(StdI, StdI->J1, StdI->S2, StdI->S2, isite, jsite);
FCOrtho.c:      StdFace_Hopping(StdI, Cphase * StdI->t1, isite, jsite, dR);
FCOrtho.c:      StdFace_Coulomb(StdI, StdI->V1, isite, jsite);
FCOrtho.c:    if (strcmp(StdI->model, "spin") == 0) {
FCOrtho.c:      StdFace_GeneralJ(StdI, StdI->J1, StdI->S2, StdI->S2, isite, jsite);
FCOrtho.c:      StdFace_Hopping(StdI, Cphase * StdI->t1, isite, jsite, dR);
FCOrtho.c:      StdFace_Coulomb(StdI, StdI->V1, isite, jsite);
FCOrtho.c:    if (strcmp(StdI->model, "spin") == 0) {
FCOrtho.c:      StdFace_GeneralJ(StdI, StdI->J2, StdI->S2, StdI->S2, isite, jsite);
FCOrtho.c:      StdFace_Hopping(StdI, Cphase * StdI->t2, isite, jsite, dR);
FCOrtho.c:      StdFace_Coulomb(StdI, StdI->V2, isite, jsite);
FCOrtho.c:    if (strcmp(StdI->model, "spin") == 0) {
FCOrtho.c:      StdFace_GeneralJ(StdI, StdI->J2, StdI->S2, StdI->S2, isite, jsite);
FCOrtho.c:      StdFace_Hopping(StdI, Cphase * StdI->t2, isite, jsite, dR);
FCOrtho.c:      StdFace_Coulomb(StdI, StdI->V2, isite, jsite);
FCOrtho.c:    if (strcmp(StdI->model, "spin") == 0 ) {
FCOrtho.c:      StdFace_GeneralJ(StdI, StdI->J0p, StdI->S2, StdI->S2, isite, jsite);
FCOrtho.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
FCOrtho.c:      StdFace_Hopping(StdI, Cphase * StdI->t0p, isite, jsite, dR);
FCOrtho.c:      StdFace_Coulomb(StdI, StdI->V0p, isite, jsite);
FCOrtho.c:    if (strcmp(StdI->model, "spin") == 0) {
FCOrtho.c:      StdFace_GeneralJ(StdI, StdI->J1p, StdI->S2, StdI->S2, isite, jsite);
FCOrtho.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
FCOrtho.c:      StdFace_Hopping(StdI, Cphase * StdI->t1p, isite, jsite, dR);
FCOrtho.c:      StdFace_Coulomb(StdI, StdI->V1p, isite, jsite);
FCOrtho.c:    if (strcmp(StdI->model, "spin") == 0) {
FCOrtho.c:      StdFace_GeneralJ(StdI, StdI->J2p, StdI->S2, StdI->S2, isite, jsite);
FCOrtho.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
FCOrtho.c:      StdFace_Hopping(StdI, Cphase * StdI->t2p, isite, jsite, dR);
FCOrtho.c:      StdFace_Coulomb(StdI, StdI->V2p, isite, jsite);
FCOrtho.c:  }/*for (kCell = 0; kCell < StdI->NCell; kCell++)*/
HoneycombLattice.c:  StdI->NsiteUC = 2;
HoneycombLattice.c:  StdFace_PrintVal_d("a", &StdI->a, 1.0);
HoneycombLattice.c:  StdFace_PrintVal_d("Wlength", &StdI->length[0], StdI->a);
HoneycombLattice.c:  StdFace_PrintVal_d("Llength", &StdI->length[1], StdI->a);
HoneycombLattice.c:  StdFace_PrintVal_d("Wx", &StdI->direct[0][0], StdI->length[0]);
HoneycombLattice.c:  StdFace_PrintVal_d("Wy", &StdI->direct[0][1], 0.0);
HoneycombLattice.c:  StdFace_PrintVal_d("Lx", &StdI->direct[1][0], StdI->length[1] * 0.5);
HoneycombLattice.c:  StdFace_PrintVal_d("Ly", &StdI->direct[1][1], StdI->length[1] * 0.5 * sqrt(3.0));
HoneycombLattice.c:  StdFace_PrintVal_d("phase0", &StdI->phase[0], 0.0);
HoneycombLattice.c:  StdFace_PrintVal_d("phase1", &StdI->phase[1], 0.0);
HoneycombLattice.c:  StdI->tau[0][0] = 0.0; StdI->tau[0][1] = 0.0; StdI->tau[0][2] = 0.0;
HoneycombLattice.c:  StdI->tau[1][0] = 1.0 / 3.0; StdI->tau[1][1] = 1.0 / 3.0; StdI->tau[1][2] = 0.0;
HoneycombLattice.c:  StdFace_NotUsed_J("J1'", StdI->J1pAll, StdI->J1p);
HoneycombLattice.c:  StdFace_NotUsed_J("J2'", StdI->J2pAll, StdI->J2p);
HoneycombLattice.c:  StdFace_NotUsed_d("t1'", StdI->t1p);
HoneycombLattice.c:  StdFace_NotUsed_d("t2'", StdI->t2p);
HoneycombLattice.c:  StdFace_NotUsed_d("V1'", StdI->V1p);
HoneycombLattice.c:  StdFace_NotUsed_d("V2'", StdI->V2p);
HoneycombLattice.c:  StdFace_NotUsed_d("K", StdI->K);
HoneycombLattice.c:  StdFace_PrintVal_d("h", &StdI->h, 0.0);
HoneycombLattice.c:  StdFace_PrintVal_d("Gamma", &StdI->Gamma, 0.0);
HoneycombLattice.c:  if (strcmp(StdI->model, "spin") == 0 ) {
HoneycombLattice.c:    StdFace_PrintVal_i("2S", &StdI->S2, 1);
HoneycombLattice.c:    StdFace_PrintVal_d("D", &StdI->D[2][2], 0.0);
HoneycombLattice.c:    StdFace_InputSpinNN(StdI, StdI->J0, StdI->J0All, "J0");
HoneycombLattice.c:    StdFace_InputSpinNN(StdI, StdI->J1, StdI->J1All, "J1");
HoneycombLattice.c:    StdFace_InputSpinNN(StdI, StdI->J2, StdI->J2All, "J2");
HoneycombLattice.c:    StdFace_InputSpin(StdI, StdI->Jp, StdI->JpAll, "J'");
HoneycombLattice.c:    StdFace_NotUsed_d("K", StdI->K);
HoneycombLattice.c:    StdFace_NotUsed_d("mu", StdI->mu);
HoneycombLattice.c:    StdFace_NotUsed_d("U", StdI->U);
HoneycombLattice.c:    StdFace_NotUsed_c("t", StdI->t);
HoneycombLattice.c:    StdFace_NotUsed_c("t0", StdI->t0);
HoneycombLattice.c:    StdFace_NotUsed_c("t1", StdI->t1);
HoneycombLattice.c:    StdFace_NotUsed_c("t2", StdI->t2);
HoneycombLattice.c:    StdFace_NotUsed_c("t'", StdI->tp);
HoneycombLattice.c:    StdFace_NotUsed_d("V", StdI->V);
HoneycombLattice.c:    StdFace_NotUsed_d("V0", StdI->V0);
HoneycombLattice.c:    StdFace_NotUsed_d("V1", StdI->V1);
HoneycombLattice.c:    StdFace_NotUsed_d("V2", StdI->V2);
HoneycombLattice.c:    StdFace_NotUsed_d("V'", StdI->Vp);
HoneycombLattice.c:  }/*if (strcmp(StdI->model, "spin") == 0 )*/
HoneycombLattice.c:    StdFace_PrintVal_d("mu", &StdI->mu, 0.0);
HoneycombLattice.c:    StdFace_PrintVal_d("U", &StdI->U, 0.0);
HoneycombLattice.c:    StdFace_InputHopp(StdI, &StdI->t0, "t0");
HoneycombLattice.c:    StdFace_InputHopp(StdI, &StdI->t1, "t1");
HoneycombLattice.c:    StdFace_InputHopp(StdI, &StdI->t2, "t2");
HoneycombLattice.c:    StdFace_PrintVal_c("t'", &StdI->tp, 0.0);
HoneycombLattice.c:    StdFace_InputCoulombV(StdI, &StdI->V0, "V0");
HoneycombLattice.c:    StdFace_InputCoulombV(StdI, &StdI->V1, "V1");
HoneycombLattice.c:    StdFace_InputCoulombV(StdI, &StdI->V2, "V2");
HoneycombLattice.c:    StdFace_PrintVal_d("V'", &StdI->Vp, 0.0);
HoneycombLattice.c:    StdFace_NotUsed_J("J0", StdI->J0All, StdI->J0);
HoneycombLattice.c:    StdFace_NotUsed_J("J1", StdI->J1All, StdI->J1);
HoneycombLattice.c:    StdFace_NotUsed_J("J2", StdI->J2All, StdI->J2);
HoneycombLattice.c:    StdFace_NotUsed_J("J'", StdI->JpAll, StdI->Jp);
HoneycombLattice.c:    StdFace_NotUsed_d("D", StdI->D[2][2]);
HoneycombLattice.c:    if (strcmp(StdI->model, "hubbard") == 0 ) {
HoneycombLattice.c:      StdFace_NotUsed_i("2S", StdI->S2);
HoneycombLattice.c:      StdFace_NotUsed_J("J", StdI->JAll, StdI->J);
HoneycombLattice.c:    }/*if (strcmp(StdI->model, "hubbard") == 0 )*/
HoneycombLattice.c:      StdFace_PrintVal_i("2S", &StdI->S2, 1);
HoneycombLattice.c:      StdFace_InputSpin(StdI, StdI->J, StdI->JAll, "J");
HoneycombLattice.c:  StdI->nsite = StdI->NsiteUC * StdI->NCell;
HoneycombLattice.c:  if (strcmp(StdI->model, "kondo") == 0 ) StdI->nsite *= 2;
HoneycombLattice.c:  StdI->locspinflag = (int *)malloc(sizeof(int) * StdI->nsite);
HoneycombLattice.c:  if (strcmp(StdI->model, "spin") == 0 )
HoneycombLattice.c:    for (isite = 0; isite < StdI->nsite; isite++) StdI->locspinflag[isite] = StdI->S2;
HoneycombLattice.c:  else if (strcmp(StdI->model, "hubbard") == 0 )
HoneycombLattice.c:    for (isite = 0; isite < StdI->nsite; isite++) StdI->locspinflag[isite] = 0;
HoneycombLattice.c:    for (iL = 0; iL < StdI->nsite / 2; iL++) {
HoneycombLattice.c:      StdI->locspinflag[iL] = StdI->S2;
HoneycombLattice.c:      StdI->locspinflag[iL + StdI->nsite / 2] = 0;
HoneycombLattice.c:  if (strcmp(StdI->model, "spin") == 0 ) {
HoneycombLattice.c:    ntransMax = StdI->nsite * (StdI->S2 + 1/*h*/ + 2 * StdI->S2/*Gamma*/);
HoneycombLattice.c:    nintrMax = StdI->NCell * (StdI->NsiteUC/*D*/ + 3/*J*/ + 6/*J'*/)
HoneycombLattice.c:      * (3 * StdI->S2 + 1) * (3 * StdI->S2 + 1);
HoneycombLattice.c:    ntransMax = StdI->NCell * 2/*spin*/ * (2 * StdI->NsiteUC/*mu+h+Gamma*/ + 6/*t*/ + 12/*t'*/);
HoneycombLattice.c:    nintrMax = StdI->NCell * (StdI->NsiteUC/*U*/ + 4 * (3/*V*/ + 6/*V'*/));
HoneycombLattice.c:    if (strcmp(StdI->model, "kondo") == 0) {
HoneycombLattice.c:      ntransMax += StdI->nsite / 2 * (StdI->S2 + 1/*h*/ + 2 * StdI->S2/*Gamma*/);
HoneycombLattice.c:      nintrMax += StdI->nsite / 2 * (3 * StdI->S2 + 1) * (3 * StdI->S2 + 1);
HoneycombLattice.c:    }/*if (strcmp(StdI->model, "kondo") == 0)*/
HoneycombLattice.c:  for (kCell = 0; kCell < StdI->NCell; kCell++) {
HoneycombLattice.c:    iW = StdI->Cell[kCell][0];
HoneycombLattice.c:    iL = StdI->Cell[kCell][1];
HoneycombLattice.c:    isite = StdI->NsiteUC * kCell;
HoneycombLattice.c:    if (strcmp(StdI->model, "kondo") == 0 ) isite += 2 * StdI->NCell;
HoneycombLattice.c:    if (strcmp(StdI->model, "spin") == 0 ) {
HoneycombLattice.c:      StdFace_MagField(StdI, StdI->S2, -StdI->h, -StdI->Gamma, isite);
HoneycombLattice.c:      StdFace_MagField(StdI, StdI->S2, -StdI->h, -StdI->Gamma, isite + 1);
HoneycombLattice.c:      StdFace_GeneralJ(StdI, StdI->D, StdI->S2, StdI->S2, isite, isite);
HoneycombLattice.c:      StdFace_GeneralJ(StdI, StdI->D, StdI->S2, StdI->S2, isite + 1, isite + 1);
HoneycombLattice.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
HoneycombLattice.c:      StdFace_HubbardLocal(StdI, StdI->mu, -StdI->h, -StdI->Gamma, StdI->U, isite);
HoneycombLattice.c:      StdFace_HubbardLocal(StdI, StdI->mu, -StdI->h, -StdI->Gamma, StdI->U, isite + 1);
HoneycombLattice.c:      if (strcmp(StdI->model, "kondo") == 0 ) {
HoneycombLattice.c:        jsite = StdI->NsiteUC * kCell;
HoneycombLattice.c:        StdFace_GeneralJ(StdI, StdI->J, 1, StdI->S2, isite, jsite);
HoneycombLattice.c:        StdFace_GeneralJ(StdI, StdI->J, 1, StdI->S2, isite + 1, jsite + 1);
HoneycombLattice.c:        StdFace_MagField(StdI, StdI->S2, -StdI->h, -StdI->Gamma, jsite);
HoneycombLattice.c:        StdFace_MagField(StdI, StdI->S2, -StdI->h, -StdI->Gamma, jsite + 1);
HoneycombLattice.c:      }/*if (strcmp(StdI->model, "kondo") == 0 )*/
HoneycombLattice.c:    if (strcmp(StdI->model, "spin") == 0 ) {
HoneycombLattice.c:      StdFace_GeneralJ(StdI, StdI->J0, StdI->S2, StdI->S2, isite, jsite);
HoneycombLattice.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
HoneycombLattice.c:      StdFace_Hopping(StdI, Cphase * StdI->t0, isite, jsite, dR);
HoneycombLattice.c:      StdFace_Coulomb(StdI, StdI->V0, isite, jsite);
HoneycombLattice.c:    if (strcmp(StdI->model, "spin") == 0 ) {
HoneycombLattice.c:      StdFace_GeneralJ(StdI, StdI->J1, StdI->S2, StdI->S2, isite, jsite);
HoneycombLattice.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
HoneycombLattice.c:      StdFace_Hopping(StdI, Cphase * StdI->t1, isite, jsite, dR);
HoneycombLattice.c:      StdFace_Coulomb(StdI, StdI->V1, isite, jsite);
HoneycombLattice.c:    if (strcmp(StdI->model, "spin") == 0 ) {
HoneycombLattice.c:      StdFace_GeneralJ(StdI, StdI->J2, StdI->S2, StdI->S2, isite, jsite);
HoneycombLattice.c:      StdFace_Hopping(StdI, Cphase * StdI->t2, isite, jsite, dR);
HoneycombLattice.c:      StdFace_Coulomb(StdI, StdI->V2, isite, jsite);
HoneycombLattice.c:    if (strcmp(StdI->model, "spin") == 0 ) {
HoneycombLattice.c:      StdFace_GeneralJ(StdI, StdI->Jp, StdI->S2, StdI->S2, isite, jsite);
HoneycombLattice.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
HoneycombLattice.c:      StdFace_Hopping(StdI, Cphase * StdI->tp, isite, jsite, dR);
HoneycombLattice.c:      StdFace_Coulomb(StdI, StdI->Vp, isite, jsite);
HoneycombLattice.c:    if (strcmp(StdI->model, "spin") == 0 ) {
HoneycombLattice.c:      StdFace_GeneralJ(StdI, StdI->Jp, StdI->S2, StdI->S2, isite, jsite);
HoneycombLattice.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
HoneycombLattice.c:      StdFace_Hopping(StdI, Cphase * StdI->tp, isite, jsite, dR);
HoneycombLattice.c:      StdFace_Coulomb(StdI, StdI->Vp, isite, jsite);
HoneycombLattice.c:    if (strcmp(StdI->model, "spin") == 0 ) {
HoneycombLattice.c:      StdFace_GeneralJ(StdI, StdI->Jp, StdI->S2, StdI->S2, isite, jsite);
HoneycombLattice.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
HoneycombLattice.c:      StdFace_Hopping(StdI, Cphase * StdI->tp, isite, jsite, dR);
HoneycombLattice.c:      StdFace_Coulomb(StdI, StdI->Vp, isite, jsite);
HoneycombLattice.c:    if (strcmp(StdI->model, "spin") == 0 ) {
HoneycombLattice.c:      StdFace_GeneralJ(StdI, StdI->Jp, StdI->S2, StdI->S2, isite, jsite);
HoneycombLattice.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
HoneycombLattice.c:      StdFace_Hopping(StdI, Cphase * StdI->tp, isite, jsite, dR);
HoneycombLattice.c:      StdFace_Coulomb(StdI, StdI->Vp, isite, jsite);
HoneycombLattice.c:    if (strcmp(StdI->model, "spin") == 0 ) {
HoneycombLattice.c:      StdFace_GeneralJ(StdI, StdI->Jp, StdI->S2, StdI->S2, isite, jsite);
HoneycombLattice.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
HoneycombLattice.c:      StdFace_Hopping(StdI, Cphase * StdI->tp, isite, jsite, dR);
HoneycombLattice.c:      StdFace_Coulomb(StdI, StdI->Vp, isite, jsite);
HoneycombLattice.c:    if (strcmp(StdI->model, "spin") == 0 ) {
HoneycombLattice.c:      StdFace_GeneralJ(StdI, StdI->Jp, StdI->S2, StdI->S2, isite, jsite);
HoneycombLattice.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
HoneycombLattice.c:      StdFace_Hopping(StdI, Cphase * StdI->tp, isite, jsite, dR);
HoneycombLattice.c:      StdFace_Coulomb(StdI, StdI->Vp, isite, jsite);
HoneycombLattice.c:  }/*for (kCell = 0; kCell < StdI->NCell; kCell++)*/
HoneycombLattice.c:  if (StdI->box[0][1] != 0 || StdI->box[1][0] != 0) {
HoneycombLattice.c:      if (fabs(StdI->Jp[i1][i2]) > 1.0e-8) {
HoneycombLattice.c:    -0.5 * StdI->Gamma, 0.0, -0.5 *StdI->h);
HoneycombLattice.c:      0.25 * StdI->J0[0][0], 0.25 * StdI->J0[0][1], 0.25 * StdI->J0[0][2]);
HoneycombLattice.c:    0.25 * StdI->J0[0][1], 0.25 * StdI->J0[1][1], 0.25 * StdI->J0[1][2]);
HoneycombLattice.c:    0.25 * StdI->J0[0][2], 0.25 * StdI->J0[1][2], 0.25 * StdI->J0[2][2]);
HoneycombLattice.c:    0.25 * StdI->J1[0][0], 0.25 * StdI->J1[0][1], 0.25 * StdI->J1[0][2]);
HoneycombLattice.c:    0.25 * StdI->J1[0][1], 0.25 * StdI->J1[1][1], 0.25 * StdI->J1[1][2]);
HoneycombLattice.c:    0.25 * StdI->J1[0][2], 0.25 * StdI->J1[1][2], 0.25 * StdI->J1[2][2]);
HoneycombLattice.c:    0.25 * StdI->J2[0][0], 0.25 * StdI->J2[0][1], 0.25 * StdI->J2[0][2]);
HoneycombLattice.c:    0.25 * StdI->J2[0][1], 0.25 * StdI->J2[1][1], 0.25 * StdI->J2[1][2]);
HoneycombLattice.c:    0.25 * StdI->J2[0][2], 0.25 * StdI->J2[1][2], 0.25 * StdI->J2[2][2]);
HoneycombLattice.c:  if (StdI->S2 != 1) {
HoneycombLattice.c:  StdI->ishift_nspin = 3;
HoneycombLattice.c:  if (StdI->L < 2) {
HoneycombLattice.c:  if (StdI->W % StdI->ishift_nspin != 0) {
HoneycombLattice.c:    fprintf(stdout, "\n ERROR! W %% %d != 0 \n\n", StdI->ishift_nspin);
HoneycombLattice.c:  StdI->num_pivot = 2;
HoneycombLattice.c:  if (StdI->W != 3) {
HoneycombLattice.c:  StdI->W = 6;
HoneycombLattice.c:  fprintf(fp, "# W0  R0  StdI->num_pivot  StdI->ishift_nspin\n");
HoneycombLattice.c:  fprintf(fp, "%d %d %d %d\n", StdI->W, StdI->L, StdI->num_pivot, StdI->ishift_nspin);
HoneycombLattice.c:  StdI->list_6spin_star = (int **)malloc(sizeof(int*) * StdI->num_pivot);
HoneycombLattice.c:  for (ipivot = 0; ipivot < StdI->num_pivot; ipivot++) {
HoneycombLattice.c:    StdI->list_6spin_star[ipivot] = (int *)malloc(sizeof(int) * 7);
HoneycombLattice.c:  StdI->list_6spin_star[0][0] = 5; // num of J
HoneycombLattice.c:  StdI->list_6spin_star[0][1] = 1;
HoneycombLattice.c:  StdI->list_6spin_star[0][2] = 1;
HoneycombLattice.c:  StdI->list_6spin_star[0][3] = 1;
HoneycombLattice.c:  StdI->list_6spin_star[0][4] = 2;
HoneycombLattice.c:  StdI->list_6spin_star[0][5] = 1;
HoneycombLattice.c:  StdI->list_6spin_star[0][6] = 1; // flag
HoneycombLattice.c:  StdI->list_6spin_star[1][0] = 4; //(0,2+2*j)=4 ! num of J
HoneycombLattice.c:  StdI->list_6spin_star[1][1] = 1; //(1,2+2*j)=1
HoneycombLattice.c:  StdI->list_6spin_star[1][2] = 1; //(2,2+2*j)=1
HoneycombLattice.c:  StdI->list_6spin_star[1][3] = 1; //(3,2+2*j)=1
HoneycombLattice.c:  StdI->list_6spin_star[1][4] = 2; //(4,2+2*j)=2
HoneycombLattice.c:  StdI->list_6spin_star[1][5] = 2; //(5,2+2*j)=2
HoneycombLattice.c:  StdI->list_6spin_star[1][6] = 1; //(6,2+2*j)=1 ! flag
HoneycombLattice.c:  fprintf(fp, "# StdI->list_6spin_star\n");
HoneycombLattice.c:  for (ipivot = 0; ipivot < StdI->num_pivot; ipivot++) {
HoneycombLattice.c:      fprintf(fp, "%d ", StdI->list_6spin_star[ipivot][isite]);
HoneycombLattice.c:  StdI->list_6spin_pair = (int ***)malloc(sizeof(int**) * StdI->num_pivot);
HoneycombLattice.c:  for (ipivot = 0; ipivot < StdI->num_pivot; ipivot++) {
HoneycombLattice.c:    StdI->list_6spin_pair[ipivot] = (int **)malloc(sizeof(int*) * 7);
HoneycombLattice.c:      StdI->list_6spin_pair[ipivot][isite] = (int *)malloc(sizeof(int) * StdI->list_6spin_star[ipivot][0]);
HoneycombLattice.c:  StdI->list_6spin_pair[0][0][0] = 0; //(1,1,1+2*j)=0 
HoneycombLattice.c:  StdI->list_6spin_pair[0][1][0] = 1; //(2,1,1+2*j)=1
HoneycombLattice.c:  StdI->list_6spin_pair[0][2][0] = 2; //(3,1,1+2*j)=2
HoneycombLattice.c:  StdI->list_6spin_pair[0][3][0] = 3; //(4,1,1+2*j)=3
HoneycombLattice.c:  StdI->list_6spin_pair[0][4][0] = 4; //(5,1,1+2*j)=4
HoneycombLattice.c:  StdI->list_6spin_pair[0][5][0] = 5; //(6,1,1+2*j)=5
HoneycombLattice.c:  StdI->list_6spin_pair[0][6][0] = 1; //(7,1,1+2*j)=3 ! type of J
HoneycombLattice.c:  StdI->list_6spin_pair[0][0][1] = 1; //(1,2,1+2*j)=1 
HoneycombLattice.c:  StdI->list_6spin_pair[0][1][1] = 2; //(2,2,1+2*j)=2
HoneycombLattice.c:  StdI->list_6spin_pair[0][2][1] = 0; //(3,2,1+2*j)=0
HoneycombLattice.c:  StdI->list_6spin_pair[0][3][1] = 3; //(4,2,1+2*j)=3
HoneycombLattice.c:  StdI->list_6spin_pair[0][4][1] = 4; //(5,2,1+2*j)=4
HoneycombLattice.c:  StdI->list_6spin_pair[0][5][1] = 5; //(6,2,1+2*j)=5
HoneycombLattice.c:  StdI->list_6spin_pair[0][6][1] = 2; //(7,2,1+2*j)=1 ! type of J
HoneycombLattice.c:  StdI->list_6spin_pair[0][0][2] = 2; //(1,3,1+2*j)=2 
HoneycombLattice.c:  StdI->list_6spin_pair[0][1][2] = 3; //(2,3,1+2*j)=3
HoneycombLattice.c:  StdI->list_6spin_pair[0][2][2] = 0; //(3,3,1+2*j)=0
HoneycombLattice.c:  StdI->list_6spin_pair[0][3][2] = 1; //(4,3,1+2*j)=1
HoneycombLattice.c:  StdI->list_6spin_pair[0][4][2] = 4; //(5,3,1+2*j)=4
HoneycombLattice.c:  StdI->list_6spin_pair[0][5][2] = 5; //(6,3,1+2*j)=5
HoneycombLattice.c:  StdI->list_6spin_pair[0][6][2] = 1; //(7,3,1+2*j)=3 ! type of J
HoneycombLattice.c:  StdI->list_6spin_pair[0][0][3] = 0; //(1,4,1+2*j)=0 
HoneycombLattice.c:  StdI->list_6spin_pair[0][1][3] = 4; //(2,4,1+2*j)=4
HoneycombLattice.c:  StdI->list_6spin_pair[0][2][3] = 1; //(3,4,1+2*j)=1
HoneycombLattice.c:  StdI->list_6spin_pair[0][3][3] = 2; //(4,4,1+2*j)=2
HoneycombLattice.c:  StdI->list_6spin_pair[0][4][3] = 3; //(5,4,1+2*j)=3
HoneycombLattice.c:  StdI->list_6spin_pair[0][5][3] = 5; //(6,4,1+2*j)=5
HoneycombLattice.c:  StdI->list_6spin_pair[0][6][3] = 2; //(7,4,1+2*j)=1 ! type of J
HoneycombLattice.c:  StdI->list_6spin_pair[0][0][4] = 1; //(1,5,1+2*j)=1 
HoneycombLattice.c:  StdI->list_6spin_pair[0][1][4] = 5; //(2,5,1+2*j)=5
HoneycombLattice.c:  StdI->list_6spin_pair[0][2][4] = 0; //(3,5,1+2*j)=0
HoneycombLattice.c:  StdI->list_6spin_pair[0][3][4] = 2; //(4,5,1+2*j)=2
HoneycombLattice.c:  StdI->list_6spin_pair[0][4][4] = 3; //(5,5,1+2*j)=3
HoneycombLattice.c:  StdI->list_6spin_pair[0][5][4] = 4; //(6,5,1+2*j)=4
HoneycombLattice.c:  StdI->list_6spin_pair[0][6][4] = 3; //(7,5,1+2*j)=2 ! type of J
HoneycombLattice.c:  StdI->list_6spin_pair[1][0][0] = 0; //(1,1,2+2*j)=0 
HoneycombLattice.c:  StdI->list_6spin_pair[1][1][0] = 1; //(2,1,2+2*j)=1
HoneycombLattice.c:  StdI->list_6spin_pair[1][2][0] = 2; //(3,1,2+2*j)=2
HoneycombLattice.c:  StdI->list_6spin_pair[1][3][0] = 3; //(4,1,2+2*j)=3
HoneycombLattice.c:  StdI->list_6spin_pair[1][4][0] = 4; //(5,1,2+2*j)=4
HoneycombLattice.c:  StdI->list_6spin_pair[1][5][0] = 5; //(6,1,2+2*j)=5
HoneycombLattice.c:  StdI->list_6spin_pair[1][6][0] = 2; //(7,1,2+2*j)=1 ! type of J
HoneycombLattice.c:  StdI->list_6spin_pair[1][0][1] = 1; //(1,2,2+2*j)=1 
HoneycombLattice.c:  StdI->list_6spin_pair[1][1][1] = 2; //(2,2,2+2*j)=2
HoneycombLattice.c:  StdI->list_6spin_pair[1][2][1] = 0; //(3,2,2+2*j)=0
HoneycombLattice.c:  StdI->list_6spin_pair[1][3][1] = 3; //(4,2,2+2*j)=3
HoneycombLattice.c:  StdI->list_6spin_pair[1][4][1] = 4; //(5,2,2+2*j)=4
HoneycombLattice.c:  StdI->list_6spin_pair[1][5][1] = 5; //(6,2,2+2*j)=5
HoneycombLattice.c:  StdI->list_6spin_pair[1][6][1] = 1; //(7,2,2+2*j)=3 ! type of J
HoneycombLattice.c:  StdI->list_6spin_pair[1][0][2] = 0; //(1,3,2+2*j)=0 
HoneycombLattice.c:  StdI->list_6spin_pair[1][1][2] = 4; //(2,3,2+2*j)=4
HoneycombLattice.c:  StdI->list_6spin_pair[1][2][2] = 1; //(3,3,2+2*j)=1
HoneycombLattice.c:  StdI->list_6spin_pair[1][3][2] = 2; //(4,3,2+2*j)=2
HoneycombLattice.c:  StdI->list_6spin_pair[1][4][2] = 3; //(5,3,2+2*j)=3
HoneycombLattice.c:  StdI->list_6spin_pair[1][5][2] = 5; //(6,3,2+2*j)=5
HoneycombLattice.c:  StdI->list_6spin_pair[1][6][2] = 3; //(7,3,2+2*j)=2 ! type of J
HoneycombLattice.c:  StdI->list_6spin_pair[1][0][3] = 2; //(1,4,2+2*j)=2 
HoneycombLattice.c:  StdI->list_6spin_pair[1][1][3] = 5; //(2,4,2+2*j)=5
HoneycombLattice.c:  StdI->list_6spin_pair[1][2][3] = 0; //(3,4,2+2*j)=0
HoneycombLattice.c:  StdI->list_6spin_pair[1][3][3] = 1; //(4,4,2+2*j)=1
HoneycombLattice.c:  StdI->list_6spin_pair[1][4][3] = 3; //(5,4,2+2*j)=3
HoneycombLattice.c:  StdI->list_6spin_pair[1][5][3] = 4; //(6,4,2+2*j)=4
HoneycombLattice.c:  StdI->list_6spin_pair[1][6][3] = 3; //(7,4,2+2*j)=2 ! type of J
HoneycombLattice.c:  fprintf(fp, "# StdI->list_6spin_pair\n");
HoneycombLattice.c:  for (ipivot = 0; ipivot < StdI->num_pivot; ipivot++) {
HoneycombLattice.c:    for (kintr = 0; kintr < StdI->list_6spin_star[ipivot][0]; kintr++) {
HoneycombLattice.c:        fprintf(fp, "%d ", StdI->list_6spin_pair[ipivot][isite][kintr]);
HoneycombLattice.c:  for (ipivot = 0; ipivot < StdI->num_pivot; ipivot++) {
HoneycombLattice.c:    free(StdI->list_6spin_star[ipivot]);
HoneycombLattice.c:  free(StdI->list_6spin_star);
HoneycombLattice.c:  for (ipivot = 0; ipivot < StdI->num_pivot; ipivot++) {
HoneycombLattice.c:      free(StdI->list_6spin_pair[ipivot][isite]);
HoneycombLattice.c:    free(StdI->list_6spin_pair[ipivot]);
HoneycombLattice.c:  free(StdI->list_6spin_pair);
Kagome.c:  StdI->NsiteUC = 3;
Kagome.c:  StdFace_PrintVal_d("a", &StdI->a, 1.0);
Kagome.c:  StdFace_PrintVal_d("Wlength", &StdI->length[0], StdI->a);
Kagome.c:  StdFace_PrintVal_d("Llength", &StdI->length[1], StdI->a);
Kagome.c:  StdFace_PrintVal_d("Wx", &StdI->direct[0][0], StdI->length[0]);
Kagome.c:  StdFace_PrintVal_d("Wy", &StdI->direct[0][1], 0.0);
Kagome.c:  StdFace_PrintVal_d("Lx", &StdI->direct[1][0], StdI->length[1] * 0.5);
Kagome.c:  StdFace_PrintVal_d("Ly", &StdI->direct[1][1], StdI->length[1] * 0.5 * sqrt(3.0));
Kagome.c:  StdFace_PrintVal_d("phase0", &StdI->phase[0], 0.0);
Kagome.c:  StdFace_PrintVal_d("phase1", &StdI->phase[1], 0.0);
Kagome.c:  StdI->tau[0][0] = 0.0; StdI->tau[0][1] = 0.0; StdI->tau[0][2] = 0.0;
Kagome.c:  StdI->tau[1][0] = 0.5; StdI->tau[1][1] = 0.0; StdI->tau[1][2] = 0.0;
Kagome.c:  StdI->tau[2][0] = 0.0; StdI->tau[2][1] = 0.5; StdI->tau[2][2] = 0.0;
Kagome.c:  StdFace_NotUsed_J("J1'", StdI->J1pAll, StdI->J1p);
Kagome.c:  StdFace_NotUsed_J("J2'", StdI->J2pAll, StdI->J2p);
Kagome.c:  StdFace_NotUsed_d("t1'", StdI->t1p);
Kagome.c:  StdFace_NotUsed_d("t2'", StdI->t2p);
Kagome.c:  StdFace_NotUsed_d("V1'", StdI->V1p);
Kagome.c:  StdFace_NotUsed_d("V2'", StdI->V2p);
Kagome.c:  StdFace_NotUsed_d("K", StdI->K);
Kagome.c:  StdFace_PrintVal_d("h", &StdI->h, 0.0);
Kagome.c:  StdFace_PrintVal_d("Gamma", &StdI->Gamma, 0.0);
Kagome.c:  if (strcmp(StdI->model, "spin") == 0 ) {
Kagome.c:    StdFace_PrintVal_i("2S", &StdI->S2, 1);
Kagome.c:    StdFace_PrintVal_d("D", &StdI->D[2][2], 0.0);
Kagome.c:    StdFace_InputSpinNN(StdI, StdI->J0, StdI->J0All, "J0");
Kagome.c:    StdFace_InputSpinNN(StdI, StdI->J1, StdI->J1All, "J1");
Kagome.c:    StdFace_InputSpinNN(StdI, StdI->J2, StdI->J2All, "J2");
Kagome.c:    StdFace_InputSpin(StdI, StdI->Jp, StdI->JpAll, "J'");
Kagome.c:    StdFace_NotUsed_d("mu", StdI->mu);
Kagome.c:    StdFace_NotUsed_d("U", StdI->U);
Kagome.c:    StdFace_NotUsed_c("t", StdI->t);
Kagome.c:    StdFace_NotUsed_c("t0", StdI->t0);
Kagome.c:    StdFace_NotUsed_c("t1", StdI->t1);
Kagome.c:    StdFace_NotUsed_c("t2", StdI->t2);
Kagome.c:    StdFace_NotUsed_c("t'", StdI->tp);
Kagome.c:    StdFace_NotUsed_d("V", StdI->V);
Kagome.c:    StdFace_NotUsed_d("V0", StdI->V0);
Kagome.c:    StdFace_NotUsed_d("V1", StdI->V1);
Kagome.c:    StdFace_NotUsed_d("V2", StdI->V2);
Kagome.c:    StdFace_NotUsed_d("V'", StdI->Vp);
Kagome.c:  }/*if (strcmp(StdI->model, "spin") == 0 )*/
Kagome.c:    StdFace_PrintVal_d("mu", &StdI->mu, 0.0);
Kagome.c:    StdFace_PrintVal_d("U", &StdI->U, 0.0);
Kagome.c:    StdFace_InputHopp(StdI, &StdI->t0, "t0");
Kagome.c:    StdFace_InputHopp(StdI, &StdI->t1, "t1");
Kagome.c:    StdFace_InputHopp(StdI, &StdI->t2, "t2");
Kagome.c:    StdFace_PrintVal_c("t'", &StdI->tp, 0.0);
Kagome.c:    StdFace_InputCoulombV(StdI, &StdI->V0, "V0");
Kagome.c:    StdFace_InputCoulombV(StdI, &StdI->V1, "V1");
Kagome.c:    StdFace_InputCoulombV(StdI, &StdI->V2, "V2");
Kagome.c:    StdFace_PrintVal_d("V'", &StdI->Vp, 0.0);
Kagome.c:    StdFace_NotUsed_J("J0", StdI->J0All, StdI->J0);
Kagome.c:    StdFace_NotUsed_J("J1", StdI->J1All, StdI->J1);
Kagome.c:    StdFace_NotUsed_J("J2", StdI->J2All, StdI->J2);
Kagome.c:    StdFace_NotUsed_J("J'", StdI->JpAll, StdI->Jp);
Kagome.c:    StdFace_NotUsed_d("D", StdI->D[2][2]);
Kagome.c:    if (strcmp(StdI->model, "hubbard") == 0 ) {
Kagome.c:      StdFace_NotUsed_i("2S", StdI->S2);
Kagome.c:      StdFace_NotUsed_J("J", StdI->JAll, StdI->J);
Kagome.c:    }/*if (strcmp(StdI->model, "hubbard") == 0 )*/
Kagome.c:      StdFace_PrintVal_i("2S", &StdI->S2, 1);
Kagome.c:      StdFace_InputSpin(StdI, StdI->J, StdI->JAll, "J");
Kagome.c:  StdI->nsite = StdI->NsiteUC * StdI->NCell;
Kagome.c:  if (strcmp(StdI->model, "kondo") == 0 ) StdI->nsite *= 2;
Kagome.c:  StdI->locspinflag = (int *)malloc(sizeof(int) * StdI->nsite);
Kagome.c:  if (strcmp(StdI->model, "spin") == 0 )
Kagome.c:    for (isite = 0; isite < StdI->nsite; isite++) StdI->locspinflag[isite] = StdI->S2;
Kagome.c:  else if (strcmp(StdI->model, "hubbard") == 0 )
Kagome.c:    for (isite = 0; isite < StdI->nsite; isite++) StdI->locspinflag[isite] = 0;
Kagome.c:    for (iL = 0; iL < StdI->nsite / 2; iL++) {
Kagome.c:      StdI->locspinflag[iL] = StdI->S2;
Kagome.c:      StdI->locspinflag[iL + StdI->nsite / 2] = 0;
Kagome.c:  if (strcmp(StdI->model, "spin") == 0 ) {//>>
Kagome.c:    ntransMax = StdI->nsite * (StdI->S2 + 1/*h*/ + 2 * StdI->S2/*Gamma*/);
Kagome.c:    nintrMax = StdI->NCell * (StdI->NsiteUC/*D*/ + 6/*J*/ + 6/*J'*/)
Kagome.c:      * (3 * StdI->S2 + 1) * (3 * StdI->S2 + 1);
Kagome.c:    ntransMax = StdI->NCell * 2/*spin*/ * (2 * StdI->NsiteUC/*mu+h+Gamma*/ + 12/*t*/ + 12/*t'*/);
Kagome.c:    nintrMax = StdI->NCell * (StdI->NsiteUC/*U*/ + 4 * (6/*V*/ + 6/*V'*/));
Kagome.c:    if (strcmp(StdI->model, "kondo") == 0) {
Kagome.c:      ntransMax += StdI->nsite / 2 * (StdI->S2 + 1/*h*/ + 2 * StdI->S2/*Gamma*/);
Kagome.c:      nintrMax += StdI->nsite / 2 * (3 * StdI->S2 + 1) * (3 * StdI->S2 + 1);
Kagome.c:    }/*if (strcmp(StdI->model, "kondo") == 0)*/
Kagome.c:  for (kCell = 0; kCell < StdI->NCell; kCell++) {
Kagome.c:    iW = StdI->Cell[kCell][0];
Kagome.c:    iL = StdI->Cell[kCell][1];
Kagome.c:    isite = StdI->NsiteUC * kCell;
Kagome.c:    if (strcmp(StdI->model, "kondo") == 0 ) isite += StdI->nsite / 2;
Kagome.c:    if (strcmp(StdI->model, "spin") == 0 ) {
Kagome.c:      for (isiteUC = 0; isiteUC < StdI->NsiteUC; isiteUC++) {
Kagome.c:        StdFace_MagField(StdI, StdI->S2, -StdI->h, -StdI->Gamma, isite + isiteUC);
Kagome.c:        StdFace_GeneralJ(StdI, StdI->D, StdI->S2, StdI->S2, isite + isiteUC, isite + isiteUC);
Kagome.c:      }/*for (jsite = 0; jsite < StdI->NsiteUC; jsite++)*/
Kagome.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
Kagome.c:      for (isiteUC = 0; isiteUC < StdI->NsiteUC; isiteUC++)
Kagome.c:        StdFace_HubbardLocal(StdI, StdI->mu, -StdI->h, -StdI->Gamma, StdI->U, isite + isiteUC);
Kagome.c:      if (strcmp(StdI->model, "kondo") == 0 ) {
Kagome.c:        jsite = StdI->NsiteUC * kCell;
Kagome.c:        for (isiteUC = 0; isiteUC < StdI->NsiteUC; isiteUC++) {
Kagome.c:          StdFace_GeneralJ(StdI, StdI->J, 1, StdI->S2, isite + isiteUC, jsite + isiteUC);
Kagome.c:          StdFace_MagField(StdI, StdI->S2, -StdI->h, -StdI->Gamma, jsite + isiteUC);
Kagome.c:        }/*for (isiteUC = 0; isiteUC < StdI->NsiteUC; isiteUC++)*/
Kagome.c:      }/*if (strcmp(StdI->model, "kondo") == 0 )*/
Kagome.c:    }/*if (strcmp(StdI->model, "spin") != 0 )<<*/
Kagome.c:    if (strcmp(StdI->model, "spin") == 0 ) {
Kagome.c:      StdFace_GeneralJ(StdI, StdI->J2, StdI->S2, StdI->S2, isite, jsite);
Kagome.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
Kagome.c:      StdFace_Hopping(StdI, Cphase * StdI->t2, isite, jsite, dR);
Kagome.c:      StdFace_Coulomb(StdI, StdI->V2, isite, jsite);
Kagome.c:    if (strcmp(StdI->model, "spin") == 0 ) {
Kagome.c:      StdFace_GeneralJ(StdI, StdI->J1, StdI->S2, StdI->S2, isite, jsite);
Kagome.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
Kagome.c:      StdFace_Hopping(StdI, Cphase * StdI->t1, isite, jsite, dR);
Kagome.c:      StdFace_Coulomb(StdI, StdI->V1, isite, jsite);
Kagome.c:    if (strcmp(StdI->model, "spin") == 0 ) {
Kagome.c:      StdFace_GeneralJ(StdI, StdI->J0, StdI->S2, StdI->S2, isite, jsite);
Kagome.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
Kagome.c:      StdFace_Hopping(StdI, Cphase * StdI->t0, isite, jsite, dR);
Kagome.c:      StdFace_Coulomb(StdI, StdI->V0, isite, jsite);
Kagome.c:    if (strcmp(StdI->model, "spin") == 0 ) {
Kagome.c:      StdFace_GeneralJ(StdI, StdI->J2, StdI->S2, StdI->S2, isite, jsite);
Kagome.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
Kagome.c:      StdFace_Hopping(StdI, Cphase * StdI->t2, isite, jsite, dR);
Kagome.c:      StdFace_Coulomb(StdI, StdI->V2, isite, jsite);
Kagome.c:    if (strcmp(StdI->model, "spin") == 0 ) {
Kagome.c:      StdFace_GeneralJ(StdI, StdI->J1, StdI->S2, StdI->S2, isite, jsite);
Kagome.c:      StdFace_Hopping(StdI, Cphase * StdI->t1, isite, jsite, dR);
Kagome.c:      StdFace_Coulomb(StdI, StdI->V1, isite, jsite);
Kagome.c:    if (strcmp(StdI->model, "spin") == 0 ) {
Kagome.c:      StdFace_GeneralJ(StdI, StdI->J0, StdI->S2, StdI->S2, isite, jsite);
Kagome.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
Kagome.c:      StdFace_Hopping(StdI, Cphase * StdI->t0, isite, jsite, dR);
Kagome.c:      StdFace_Coulomb(StdI, StdI->V0, isite, jsite);
Kagome.c:    if (strcmp(StdI->model, "spin") == 0 ) {
Kagome.c:      StdFace_GeneralJ(StdI, StdI->Jp, StdI->S2, StdI->S2, isite, jsite);
Kagome.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
Kagome.c:      StdFace_Hopping(StdI, Cphase * StdI->tp, isite, jsite, dR);
Kagome.c:      StdFace_Coulomb(StdI, StdI->Vp, isite, jsite);
Kagome.c:    if (strcmp(StdI->model, "spin") == 0 ) {
Kagome.c:      StdFace_GeneralJ(StdI, StdI->Jp, StdI->S2, StdI->S2, isite, jsite);
Kagome.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
Kagome.c:      StdFace_Hopping(StdI, Cphase * StdI->tp, isite, jsite, dR);
Kagome.c:      StdFace_Coulomb(StdI, StdI->Vp, isite, jsite);
Kagome.c:    if (strcmp(StdI->model, "spin") == 0 ) {
Kagome.c:      StdFace_GeneralJ(StdI, StdI->Jp, StdI->S2, StdI->S2, isite, jsite);
Kagome.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
Kagome.c:      StdFace_Hopping(StdI, Cphase * StdI->tp, isite, jsite, dR);
Kagome.c:      StdFace_Coulomb(StdI, StdI->Vp, isite, jsite);
Kagome.c:    if (strcmp(StdI->model, "spin") == 0 ) {
Kagome.c:      StdFace_GeneralJ(StdI, StdI->Jp, StdI->S2, StdI->S2, isite, jsite);
Kagome.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
Kagome.c:      StdFace_Hopping(StdI, Cphase * StdI->tp, isite, jsite, dR);
Kagome.c:      StdFace_Coulomb(StdI, StdI->Vp, isite, jsite);
Kagome.c:    if (strcmp(StdI->model, "spin") == 0 ) {
Kagome.c:      StdFace_GeneralJ(StdI, StdI->Jp, StdI->S2, StdI->S2, isite, jsite);
Kagome.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
Kagome.c:      StdFace_Hopping(StdI, Cphase * StdI->tp, isite, jsite, dR);
Kagome.c:      StdFace_Coulomb(StdI, StdI->Vp, isite, jsite);
Kagome.c:    if (strcmp(StdI->model, "spin") == 0 ) {
Kagome.c:      StdFace_GeneralJ(StdI, StdI->Jp, StdI->S2, StdI->S2, isite, jsite);
Kagome.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
Kagome.c:      StdFace_Hopping(StdI, Cphase * StdI->tp, isite, jsite, dR);
Kagome.c:      StdFace_Coulomb(StdI, StdI->Vp, isite, jsite);
Kagome.c:  }/*for (kCell = 0; kCell < StdI->NCell; kCell++)*/
Kagome.c:  if (StdI->box[0][1] != 0 || StdI->box[1][0] != 0) {
Kagome.c:      if (fabs(StdI->Jp[i1][i2]) > 1.0e-8) {
Kagome.c:    -0.5 * StdI->Gamma, 0.0, -0.5 * StdI->h);
Kagome.c:    0.25 * StdI->J0[0][0], 0.25 * StdI->J0[0][1], 0.25 * StdI->J0[0][2]);
Kagome.c:    0.25 * StdI->J0[0][1], 0.25 * StdI->J0[1][1], 0.25 * StdI->J0[1][2]);
Kagome.c:    0.25 * StdI->J0[0][2], 0.25 * StdI->J0[1][2], 0.25 * StdI->J0[2][2]);
Kagome.c:    0.25 * StdI->J1[0][0], 0.25 * StdI->J1[0][1], 0.25 * StdI->J1[0][2]);
Kagome.c:    0.25 * StdI->J1[0][1], 0.25 * StdI->J1[1][1], 0.25 * StdI->J1[1][2]);
Kagome.c:    0.25 * StdI->J1[0][2], 0.25 * StdI->J1[1][2], 0.25 * StdI->J1[2][2]);
Kagome.c:    0.25 * StdI->J2[0][0], 0.25 * StdI->J2[0][1], 0.25 * StdI->J2[0][2]);
Kagome.c:    0.25 * StdI->J2[0][1], 0.25 * StdI->J2[1][1], 0.25 * StdI->J2[1][2]);
Kagome.c:    0.25 * StdI->J2[0][2], 0.25 * StdI->J2[1][2], 0.25 * StdI->J2[2][2]);  /*
Kagome.c:  if (StdI->S2 != 1) {
Kagome.c:  StdI->ishift_nspin = 3;
Kagome.c:  if (StdI->L < 2) {
Kagome.c:  if (StdI->W % StdI->ishift_nspin != 0) {
Kagome.c:    fprintf(stdout, "\n ERROR! W %% %d != 0 \n\n", StdI->ishift_nspin);
Kagome.c:  StdI->num_pivot = 4;
Kagome.c:  if (StdI->W != 3) {
Kagome.c:  StdI->W = 9;
Kagome.c:  fprintf(fp, "# W0  R0  StdI->num_pivot  StdI->ishift_nspin\n");
Kagome.c:  fprintf(fp, "%d %d %d %d\n", StdI->W, StdI->L, StdI->num_pivot, StdI->ishift_nspin);
Kagome.c:  StdI->list_6spin_star = (int **)malloc(sizeof(int*) * StdI->num_pivot);
Kagome.c:  for (ipivot = 0; ipivot < StdI->num_pivot; ipivot++) {
Kagome.c:    StdI->list_6spin_star[ipivot] = (int *)malloc(sizeof(int) * 7);
Kagome.c:  StdI->list_6spin_star[0][0] = 1; // num of J
Kagome.c:  StdI->list_6spin_star[0][1] = 1;
Kagome.c:  StdI->list_6spin_star[0][2] = 1;
Kagome.c:  StdI->list_6spin_star[0][3] = 1;
Kagome.c:  StdI->list_6spin_star[0][4] = 4;
Kagome.c:  StdI->list_6spin_star[0][5] = 2;
Kagome.c:  StdI->list_6spin_star[0][6] = -1; // flag
Kagome.c:  StdI->list_6spin_star[1][0] = 6; // num of J
Kagome.c:  StdI->list_6spin_star[1][1] = 1;
Kagome.c:  StdI->list_6spin_star[1][2] = 1;
Kagome.c:  StdI->list_6spin_star[1][3] = 1;
Kagome.c:  StdI->list_6spin_star[1][4] = 6;
Kagome.c:  StdI->list_6spin_star[1][5] = 7;
Kagome.c:  StdI->list_6spin_star[1][6] = 1; // flag
Kagome.c:  StdI->list_6spin_star[2][0] = 6; // num of J
Kagome.c:  StdI->list_6spin_star[2][1] = 1;
Kagome.c:  StdI->list_6spin_star[2][2] = 1;
Kagome.c:  StdI->list_6spin_star[2][3] = 1;
Kagome.c:  StdI->list_6spin_star[2][4] = 4;
Kagome.c:  StdI->list_6spin_star[2][5] = 2;
Kagome.c:  StdI->list_6spin_star[2][6] = 1; // flag
Kagome.c:  StdI->list_6spin_star[3][0] = 5; // num of J
Kagome.c:  StdI->list_6spin_star[3][1] = 1;
Kagome.c:  StdI->list_6spin_star[3][2] = 1;
Kagome.c:  StdI->list_6spin_star[3][3] = 1;
Kagome.c:  StdI->list_6spin_star[3][4] = 4;
Kagome.c:  StdI->list_6spin_star[3][5] = 2;
Kagome.c:  StdI->list_6spin_star[3][6] = 1; // flag
Kagome.c:  fprintf(fp, "# StdI->list_6spin_star\n");
Kagome.c:  for (ipivot = 0; ipivot < StdI->num_pivot; ipivot++) {
Kagome.c:      fprintf(fp, "%d ", StdI->list_6spin_star[ipivot][isite]);
Kagome.c:  StdI->list_6spin_pair = (int ***)malloc(sizeof(int**) * StdI->num_pivot);
Kagome.c:  for (ipivot = 0; ipivot < StdI->num_pivot; ipivot++) {
Kagome.c:    StdI->list_6spin_pair[ipivot] = (int **)malloc(sizeof(int*) * 7);
Kagome.c:      StdI->list_6spin_pair[ipivot][isite] = (int *)malloc(sizeof(int) * StdI->list_6spin_star[ipivot][0]);
Kagome.c:  StdI->list_6spin_pair[0][0][0] = 0; //(1,1,1+2*j)=0 
Kagome.c:  StdI->list_6spin_pair[0][1][0] = 4; //(2,1,1+2*j)=1
Kagome.c:  StdI->list_6spin_pair[0][2][0] = 1; //(3,1,1+2*j)=2
Kagome.c:  StdI->list_6spin_pair[0][3][0] = 2; //(4,1,1+2*j)=3
Kagome.c:  StdI->list_6spin_pair[0][4][0] = 3; //(5,1,1+2*j)=4
Kagome.c:  StdI->list_6spin_pair[0][5][0] = 5; //(6,1,1+2*j)=5
Kagome.c:  StdI->list_6spin_pair[0][6][0] = 3; //(7,1,1+2*j)=3 ! type of J
Kagome.c:  StdI->list_6spin_pair[1][0][0] = 0;
Kagome.c:  StdI->list_6spin_pair[1][1][0] = 1;
Kagome.c:  StdI->list_6spin_pair[1][2][0] = 2;
Kagome.c:  StdI->list_6spin_pair[1][3][0] = 3;
Kagome.c:  StdI->list_6spin_pair[1][4][0] = 4;
Kagome.c:  StdI->list_6spin_pair[1][5][0] = 5;
Kagome.c:  StdI->list_6spin_pair[1][6][0] = 3; // type of J
Kagome.c:  StdI->list_6spin_pair[1][0][1] = 1;
Kagome.c:  StdI->list_6spin_pair[1][1][1] = 2;
Kagome.c:  StdI->list_6spin_pair[1][2][1] = 0;
Kagome.c:  StdI->list_6spin_pair[1][3][1] = 3;
Kagome.c:  StdI->list_6spin_pair[1][4][1] = 4;
Kagome.c:  StdI->list_6spin_pair[1][5][1] = 5;
Kagome.c:  StdI->list_6spin_pair[1][6][1] = 1; // type of J
Kagome.c:  StdI->list_6spin_pair[1][0][2] = 0;
Kagome.c:  StdI->list_6spin_pair[1][1][2] = 2;
Kagome.c:  StdI->list_6spin_pair[1][2][2] = 1;
Kagome.c:  StdI->list_6spin_pair[1][3][2] = 3;
Kagome.c:  StdI->list_6spin_pair[1][4][2] = 4;
Kagome.c:  StdI->list_6spin_pair[1][5][2] = 5;
Kagome.c:  StdI->list_6spin_pair[1][6][2] = 2; // type of J
Kagome.c:  StdI->list_6spin_pair[1][0][3] = 1;
Kagome.c:  StdI->list_6spin_pair[1][1][3] = 3;
Kagome.c:  StdI->list_6spin_pair[1][2][3] = 0;
Kagome.c:  StdI->list_6spin_pair[1][3][3] = 2;
Kagome.c:  StdI->list_6spin_pair[1][4][3] = 4;
Kagome.c:  StdI->list_6spin_pair[1][5][3] = 5;
Kagome.c:  StdI->list_6spin_pair[1][6][3] = 3; // type of J
Kagome.c:  StdI->list_6spin_pair[1][0][4] = 2;
Kagome.c:  StdI->list_6spin_pair[1][1][4] = 4;
Kagome.c:  StdI->list_6spin_pair[1][2][4] = 0;
Kagome.c:  StdI->list_6spin_pair[1][3][4] = 1;
Kagome.c:  StdI->list_6spin_pair[1][4][4] = 3;
Kagome.c:  StdI->list_6spin_pair[1][5][4] = 5;
Kagome.c:  StdI->list_6spin_pair[1][6][4] = 2; // type of J
Kagome.c:  StdI->list_6spin_pair[1][0][5] = 2;
Kagome.c:  StdI->list_6spin_pair[1][1][5] = 5;
Kagome.c:  StdI->list_6spin_pair[1][2][5] = 0;
Kagome.c:  StdI->list_6spin_pair[1][3][5] = 1;
Kagome.c:  StdI->list_6spin_pair[1][4][5] = 3;
Kagome.c:  StdI->list_6spin_pair[1][5][5] = 4;
Kagome.c:  StdI->list_6spin_pair[1][6][5] = 1; // type of J
Kagome.c:  StdI->list_6spin_pair[2][0][0] = 0;
Kagome.c:  StdI->list_6spin_pair[2][1][0] = 1;
Kagome.c:  StdI->list_6spin_pair[2][2][0] = 2;
Kagome.c:  StdI->list_6spin_pair[2][3][0] = 3;
Kagome.c:  StdI->list_6spin_pair[2][4][0] = 4;
Kagome.c:  StdI->list_6spin_pair[2][5][0] = 5;
Kagome.c:  StdI->list_6spin_pair[2][6][0] = 3; // type of J
Kagome.c:  StdI->list_6spin_pair[2][0][1] = 1;
Kagome.c:  StdI->list_6spin_pair[2][1][1] = 2;
Kagome.c:  StdI->list_6spin_pair[2][2][1] = 0;
Kagome.c:  StdI->list_6spin_pair[2][3][1] = 3;
Kagome.c:  StdI->list_6spin_pair[2][4][1] = 4;
Kagome.c:  StdI->list_6spin_pair[2][5][1] = 5;
Kagome.c:  StdI->list_6spin_pair[2][6][1] = 1; // type of J
Kagome.c:  StdI->list_6spin_pair[2][0][2] = 0;
Kagome.c:  StdI->list_6spin_pair[2][1][2] = 2;
Kagome.c:  StdI->list_6spin_pair[2][2][2] = 1;
Kagome.c:  StdI->list_6spin_pair[2][3][2] = 3;
Kagome.c:  StdI->list_6spin_pair[2][4][2] = 4;
Kagome.c:  StdI->list_6spin_pair[2][5][2] = 5;
Kagome.c:  StdI->list_6spin_pair[2][6][2] = 2; // type of J
Kagome.c:  StdI->list_6spin_pair[2][0][3] = 1;
Kagome.c:  StdI->list_6spin_pair[2][1][3] = 3;
Kagome.c:  StdI->list_6spin_pair[2][2][3] = 0;
Kagome.c:  StdI->list_6spin_pair[2][3][3] = 2;
Kagome.c:  StdI->list_6spin_pair[2][4][3] = 4;
Kagome.c:  StdI->list_6spin_pair[2][5][3] = 5;
Kagome.c:  StdI->list_6spin_pair[2][6][3] = 3; // type of J
Kagome.c:  StdI->list_6spin_pair[2][0][4] = 2;
Kagome.c:  StdI->list_6spin_pair[2][1][4] = 5;
Kagome.c:  StdI->list_6spin_pair[2][2][4] = 0;
Kagome.c:  StdI->list_6spin_pair[2][3][4] = 1;
Kagome.c:  StdI->list_6spin_pair[2][4][4] = 3;
Kagome.c:  StdI->list_6spin_pair[2][5][4] = 4;
Kagome.c:  StdI->list_6spin_pair[2][6][4] = 2; // type of J
Kagome.c:  StdI->list_6spin_pair[2][0][5] = 2;
Kagome.c:  StdI->list_6spin_pair[2][1][5] = 4;
Kagome.c:  StdI->list_6spin_pair[2][2][5] = 0;
Kagome.c:  StdI->list_6spin_pair[2][3][5] = 1;
Kagome.c:  StdI->list_6spin_pair[2][4][5] = 3;
Kagome.c:  StdI->list_6spin_pair[2][5][5] = 5;
Kagome.c:  StdI->list_6spin_pair[2][6][5] = 1; // type of J
Kagome.c:  StdI->list_6spin_pair[3][0][0] = 0;
Kagome.c:  StdI->list_6spin_pair[3][1][0] = 1;
Kagome.c:  StdI->list_6spin_pair[3][2][0] = 2;
Kagome.c:  StdI->list_6spin_pair[3][3][0] = 3;
Kagome.c:  StdI->list_6spin_pair[3][4][0] = 4;
Kagome.c:  StdI->list_6spin_pair[3][5][0] = 5;
Kagome.c:  StdI->list_6spin_pair[3][6][0] = 3; // type of J
Kagome.c:  StdI->list_6spin_pair[3][0][1] = 1;
Kagome.c:  StdI->list_6spin_pair[3][1][1] = 2;
Kagome.c:  StdI->list_6spin_pair[3][2][1] = 0;
Kagome.c:  StdI->list_6spin_pair[3][3][1] = 3;
Kagome.c:  StdI->list_6spin_pair[3][4][1] = 4;
Kagome.c:  StdI->list_6spin_pair[3][5][1] = 5;
Kagome.c:  StdI->list_6spin_pair[3][6][1] = 1; // type of J
Kagome.c:  StdI->list_6spin_pair[3][0][2] = 0;
Kagome.c:  StdI->list_6spin_pair[3][1][2] = 2;
Kagome.c:  StdI->list_6spin_pair[3][2][2] = 1;
Kagome.c:  StdI->list_6spin_pair[3][3][2] = 3;
Kagome.c:  StdI->list_6spin_pair[3][4][2] = 4;
Kagome.c:  StdI->list_6spin_pair[3][5][2] = 5;
Kagome.c:  StdI->list_6spin_pair[3][6][2] = 2; // type of J
Kagome.c:  StdI->list_6spin_pair[3][0][3] = 2;
Kagome.c:  StdI->list_6spin_pair[3][1][3] = 5;
Kagome.c:  StdI->list_6spin_pair[3][2][3] = 0;
Kagome.c:  StdI->list_6spin_pair[3][3][3] = 1;
Kagome.c:  StdI->list_6spin_pair[3][4][3] = 3;
Kagome.c:  StdI->list_6spin_pair[3][5][3] = 4;
Kagome.c:  StdI->list_6spin_pair[3][6][3] = 2; // type of J
Kagome.c:  StdI->list_6spin_pair[3][0][4] = 2;
Kagome.c:  StdI->list_6spin_pair[3][1][4] = 4;
Kagome.c:  StdI->list_6spin_pair[3][2][4] = 0;
Kagome.c:  StdI->list_6spin_pair[3][3][4] = 1;
Kagome.c:  StdI->list_6spin_pair[3][4][4] = 3;
Kagome.c:  StdI->list_6spin_pair[3][5][4] = 5;
Kagome.c:  StdI->list_6spin_pair[3][6][4] = 1; // type of J
Kagome.c:  fprintf(fp, "# StdI->list_6spin_pair\n");
Kagome.c:  for (ipivot = 0; ipivot < StdI->num_pivot; ipivot++) {
Kagome.c:    for (kintr = 0; kintr < StdI->list_6spin_star[ipivot][0]; kintr++) {
Kagome.c:        fprintf(fp, "%d ", StdI->list_6spin_pair[ipivot][isite][kintr]);
Kagome.c:  for (ipivot = 0; ipivot < StdI->num_pivot; ipivot++) {
Kagome.c:    free(StdI->list_6spin_star[ipivot]);
Kagome.c:  free(StdI->list_6spin_star);
Kagome.c:  for (ipivot = 0; ipivot < StdI->num_pivot; ipivot++) {
Kagome.c:      free(StdI->list_6spin_pair[ipivot][isite]);
Kagome.c:    free(StdI->list_6spin_pair[ipivot]);
Kagome.c:  free(StdI->list_6spin_pair);
Ladder.c:  StdFace_PrintVal_d("a", &StdI->a, 1.0);
Ladder.c:  StdFace_PrintVal_d("Wlength", &StdI->length[0], StdI->a);
Ladder.c:  StdFace_PrintVal_d("Llength", &StdI->length[1], StdI->a);
Ladder.c:  StdFace_PrintVal_d("Wx", &StdI->direct[0][0], StdI->length[0]);
Ladder.c:  StdFace_PrintVal_d("Wy", &StdI->direct[0][1], 0.0);
Ladder.c:  StdFace_PrintVal_d("Lx", &StdI->direct[1][0], 0.0);
Ladder.c:  StdFace_PrintVal_d("Ly", &StdI->direct[1][1], StdI->length[1]);
Ladder.c:  StdFace_RequiredVal_i("L", StdI->L);
Ladder.c:  StdFace_RequiredVal_i("W", StdI->W);
Ladder.c:  StdFace_NotUsed_i("a0W", StdI->box[0][0]);
Ladder.c:  StdFace_NotUsed_i("a0L", StdI->box[0][1]);
Ladder.c:  StdFace_NotUsed_i("a1W", StdI->box[1][0]);
Ladder.c:  StdFace_NotUsed_i("a1L", StdI->box[1][1]);
Ladder.c:  StdFace_PrintVal_d("phase0", &StdI->phase[0], 0.0);
Ladder.c:  StdFace_NotUsed_d("phase1", StdI->phase[1]);
Ladder.c:  StdI->phase[1] = StdI->phase[0];
Ladder.c:  StdI->phase[0] = 0.0;
Ladder.c:  StdI->NsiteUC = StdI->W;
Ladder.c:  StdI->W = 1;
Ladder.c:  StdI->direct[0][0] = (double)StdI->NsiteUC;
Ladder.c:  for (isite = 0; isite < StdI->NsiteUC; isite++){
Ladder.c:    StdI->tau[isite][0] = (double)isite / (double)StdI->NsiteUC;
Ladder.c:    StdI->tau[isite][1] = 0.0; StdI->tau[isite][2] = 0.0;
Ladder.c:  StdFace_NotUsed_J("J", StdI->JAll, StdI->J);
Ladder.c:  StdFace_NotUsed_J("J'", StdI->JpAll, StdI->Jp);
Ladder.c:  StdFace_NotUsed_c("t", StdI->t);
Ladder.c:  StdFace_NotUsed_c("t'", StdI->tp);
Ladder.c:  StdFace_NotUsed_d("V", StdI->V);
Ladder.c:  StdFace_NotUsed_d("V'", StdI->Vp);
Ladder.c:  StdFace_NotUsed_d("K", StdI->K);
Ladder.c:  StdFace_PrintVal_d("h", &StdI->h, 0.0);
Ladder.c:  StdFace_PrintVal_d("Gamma", &StdI->Gamma, 0.0);
Ladder.c:  if (strcmp(StdI->model, "spin") == 0 ) {
Ladder.c:    StdFace_PrintVal_i("2S", &StdI->S2, 1);
Ladder.c:    StdFace_PrintVal_d("D", &StdI->D[2][2], 0.0);
Ladder.c:    StdFace_InputSpin(StdI, StdI->J0, StdI->J0All, "J0");
Ladder.c:    StdFace_InputSpin(StdI, StdI->J1, StdI->J1All, "J1");
Ladder.c:    StdFace_InputSpin(StdI, StdI->J2, StdI->J2All, "J2");
Ladder.c:    StdFace_InputSpin(StdI, StdI->J1p, StdI->J1pAll, "J1'");
Ladder.c:    StdFace_InputSpin(StdI, StdI->J2p, StdI->J2pAll, "J2'");
Ladder.c:    StdFace_NotUsed_d("mu", StdI->mu);
Ladder.c:    StdFace_NotUsed_d("U", StdI->U);
Ladder.c:    StdFace_NotUsed_c("t0", StdI->t0);
Ladder.c:    StdFace_NotUsed_c("t1", StdI->t1);
Ladder.c:    StdFace_NotUsed_c("t2", StdI->t2);
Ladder.c:    StdFace_NotUsed_c("t1'", StdI->t1p);
Ladder.c:    StdFace_NotUsed_c("t2'", StdI->t2p);
Ladder.c:    StdFace_NotUsed_d("V0", StdI->V0);
Ladder.c:    StdFace_NotUsed_d("V1", StdI->V1);
Ladder.c:    StdFace_NotUsed_d("V2", StdI->V2);
Ladder.c:    StdFace_NotUsed_d("V1'", StdI->V1p);
Ladder.c:    StdFace_NotUsed_d("V2'", StdI->V2p);
Ladder.c:  }/*if (strcmp(StdI->model, "spin") == 0 )*/
Ladder.c:    StdFace_PrintVal_d("mu", &StdI->mu, 0.0);
Ladder.c:    StdFace_PrintVal_d("U", &StdI->U, 0.0);
Ladder.c:    StdFace_InputHopp(StdI, &StdI->t0, "t0");
Ladder.c:    StdFace_InputHopp(StdI, &StdI->t1, "t1");
Ladder.c:    StdFace_InputHopp(StdI, &StdI->t2, "t2");
Ladder.c:    StdFace_InputHopp(StdI, &StdI->t1p, "t1'");
Ladder.c:    StdFace_InputHopp(StdI, &StdI->t2p, "t2'");
Ladder.c:    StdFace_InputCoulombV(StdI, &StdI->V0, "V0");
Ladder.c:    StdFace_InputCoulombV(StdI, &StdI->V1, "V1");
Ladder.c:    StdFace_InputCoulombV(StdI, &StdI->V2, "V2");
Ladder.c:    StdFace_InputCoulombV(StdI, &StdI->V1p, "V1'");
Ladder.c:    StdFace_InputCoulombV(StdI, &StdI->V2p, "V2'");
Ladder.c:    StdFace_NotUsed_J("J0", StdI->J0All, StdI->J0);
Ladder.c:    StdFace_NotUsed_J("J1", StdI->J1All, StdI->J1);
Ladder.c:    StdFace_NotUsed_J("J2", StdI->J2All, StdI->J2);
Ladder.c:    StdFace_NotUsed_J("J1p", StdI->J1pAll, StdI->J1p);
Ladder.c:    StdFace_NotUsed_J("J2p", StdI->J2pAll, StdI->J2p);
Ladder.c:    StdFace_NotUsed_d("D", StdI->D[2][2]);
Ladder.c:    if (strcmp(StdI->model, "hubbard") == 0 ) {
Ladder.c:      StdFace_NotUsed_i("2S", StdI->S2);
Ladder.c:      StdFace_NotUsed_J("J", StdI->JAll, StdI->J);
Ladder.c:      StdFace_PrintVal_i("2S", &StdI->S2, 1);
Ladder.c:      StdFace_InputSpin(StdI, StdI->J, StdI->JAll, "J");
Ladder.c:  StdI->nsite = StdI->L * StdI->NsiteUC;
Ladder.c:  if (strcmp(StdI->model, "kondo") == 0 ) StdI->nsite *= 2;
Ladder.c:  StdI->locspinflag = (int *)malloc(sizeof(int) * StdI->nsite);
Ladder.c:  if (strcmp(StdI->model, "spin") == 0 )
Ladder.c:    for (isite = 0; isite < StdI->nsite; isite++)StdI->locspinflag[isite] = StdI->S2;
Ladder.c:  else if (strcmp(StdI->model, "hubbard") == 0 )
Ladder.c:    for (isite = 0; isite < StdI->nsite; isite++)StdI->locspinflag[isite] = 0;
Ladder.c:  else if (strcmp(StdI->model, "kondo") == 0 )
Ladder.c:    for (isite = 0; isite < StdI->nsite / 2; isite++) {
Ladder.c:      StdI->locspinflag[isite] = StdI->S2;
Ladder.c:      StdI->locspinflag[isite + StdI->nsite / 2] = 0;
Ladder.c:  if (strcmp(StdI->model, "spin") == 0 ) {
Ladder.c:    ntransMax = StdI->L * StdI->NsiteUC * (StdI->S2 + 1/*h*/ + 2 * StdI->S2/*Gamma*/);
Ladder.c:    nintrMax = StdI->L * StdI->NsiteUC * (1/*D*/ + 1/*J1*/ + 1/*J1'*/)
Ladder.c:      * (3 * StdI->S2 + 1) * (3 * StdI->S2 + 1)
Ladder.c:      + StdI->L * (StdI->NsiteUC - 1) * (1/*J0*/ + 1/*J2*/ + 1/*J2'*/)
Ladder.c:      * (3 * StdI->S2 + 1) * (3 * StdI->S2 + 1);
Ladder.c:  }/*if (strcmp(StdI->model, "spin") == 0 )*/
Ladder.c:    ntransMax = StdI->L*StdI->NsiteUC * (2/*mu+h+Gamma*/ + 2/*t1*/ + 2/*t1'*/)
Ladder.c:      + StdI->L*(StdI->NsiteUC - 1) * (2/*t0*/ + 2/*t2*/ + 2/*t2'*/);
Ladder.c:    nintrMax = StdI->L*StdI->NsiteUC * 1/*U*/
Ladder.c:      + StdI->L*StdI->NsiteUC * 4 * (1/*V1*/ + 1/*V1'*/)
Ladder.c:      + StdI->L*(StdI->NsiteUC - 1) * 4 * (1/*V0*/ + 1/*V2*/ + 1/*V2'*/);
Ladder.c:    if (strcmp(StdI->model, "kondo") == 0) {
Ladder.c:      ntransMax += StdI->L * StdI->NsiteUC * (StdI->S2 + 1/*h*/ + 2 * StdI->S2/*Gamma*/);
Ladder.c:      nintrMax += StdI->nsite / 2 * (3 * 1 + 1) * (3 * StdI->S2 + 1);
Ladder.c:    }/*if (strcmp(StdI->model, "kondo") == 0)*/
Ladder.c:  for (iL = 0; iL < StdI->L; iL++) {
Ladder.c:    for (isiteUC = 0; isiteUC < StdI->NsiteUC; isiteUC++) {
Ladder.c:      isite = isiteUC + iL * StdI->NsiteUC;
Ladder.c:      if (strcmp(StdI->model, "kondo") == 0 ) isite += StdI->L * StdI->NsiteUC;
Ladder.c:      if (strcmp(StdI->model, "spin") == 0 ) {
Ladder.c:        StdFace_MagField(StdI, StdI->S2, -StdI->h, -StdI->Gamma, isite);
Ladder.c:        StdFace_GeneralJ(StdI, StdI->D, StdI->S2, StdI->S2, isite, isite);
Ladder.c:      }/*if (strcmp(StdI->model, "spin") == 0 )*/
Ladder.c:        StdFace_HubbardLocal(StdI, StdI->mu, -StdI->h, -StdI->Gamma, StdI->U, isite);
Ladder.c:        if (strcmp(StdI->model, "kondo") == 0 ) {
Ladder.c:          jsite = isiteUC + iL * StdI->NsiteUC;
Ladder.c:          StdFace_GeneralJ(StdI, StdI->J, 1, StdI->S2, isite, jsite);
Ladder.c:          StdFace_MagField(StdI, StdI->S2, -StdI->h, -StdI->Gamma, jsite);
Ladder.c:        }/*if (strcmp(StdI->model, "kondo") == 0 )*/
Ladder.c:      if (strcmp(StdI->model, "spin") == 0 ) {
Ladder.c:        StdFace_GeneralJ(StdI, StdI->J1, StdI->S2, StdI->S2, isite, jsite);
Ladder.c:      }/*if (strcmp(StdI->model, "spin") == 0 )*/
Ladder.c:        StdFace_Hopping(StdI, Cphase * StdI->t1, isite, jsite, dR);
Ladder.c:        StdFace_Coulomb(StdI, StdI->V1, isite, jsite);
Ladder.c:      if (strcmp(StdI->model, "spin") == 0 ) {
Ladder.c:        StdFace_GeneralJ(StdI, StdI->J1p, StdI->S2, StdI->S2, isite, jsite);
Ladder.c:      }/*if (strcmp(StdI->model, "spin") == 0 )*/
Ladder.c:        StdFace_Hopping(StdI, Cphase * StdI->t1p, isite, jsite, dR);
Ladder.c:        StdFace_Coulomb(StdI, StdI->V1p, isite, jsite);
Ladder.c:      if (isiteUC < StdI->NsiteUC - 1) {
Ladder.c:        if (strcmp(StdI->model, "spin") == 0 ) {
Ladder.c:          StdFace_GeneralJ(StdI, StdI->J0, StdI->S2, StdI->S2, isite, jsite);
Ladder.c:        }/*if (strcmp(StdI->model, "spin") == 0 )*/
Ladder.c:          StdFace_Hopping(StdI, Cphase * StdI->t0, isite, jsite, dR);
Ladder.c:          StdFace_Coulomb(StdI, StdI->V0, isite, jsite);
Ladder.c:        if (strcmp(StdI->model, "spin") == 0 ) {
Ladder.c:          StdFace_GeneralJ(StdI, StdI->J2, StdI->S2, StdI->S2, isite, jsite);
Ladder.c:        }/*if (strcmp(StdI->model, "spin") == 0 )*/
Ladder.c:          StdFace_Hopping(StdI, Cphase * StdI->t2, isite, jsite, dR);
Ladder.c:          StdFace_Coulomb(StdI, StdI->V2, isite, jsite);
Ladder.c:        if (strcmp(StdI->model, "spin") == 0 ) {
Ladder.c:          StdFace_GeneralJ(StdI, StdI->J2p, StdI->S2, StdI->S2, isite, jsite);
Ladder.c:        }/*if (strcmp(StdI->model, "spin") == 0 )*/
Ladder.c:          StdFace_Hopping(StdI, Cphase * StdI->t2p, isite, jsite, dR);
Ladder.c:          StdFace_Coulomb(StdI, StdI->V2p, isite, jsite);
Ladder.c:      }/*if (isiteUC < StdI->NsiteUC - 1)*/
Ladder.c:    }/*for (isiteUC = 0; isiteUC < StdI->NsiteUC; isiteUC++)*/
Ladder.c:  }/*for (iL = 0; iL < StdI->L; iL++)*/
Ladder.c:  StdI->W = StdI->NsiteUC;
Ladder.c:  StdI->NsiteUC = 1;
Ladder.c:    -0.5 * StdI->Gamma, 0.0, -0.5 * StdI->h);
Ladder.c:    0.25 * StdI->J0[0][0], 0.25 * StdI->J0[0][1], 0.25 * StdI->J0[0][2]);
Ladder.c:    0.25 * StdI->J0[0][1], 0.25 * StdI->J0[1][1], 0.25 * StdI->J0[1][2]);
Ladder.c:    0.25 * StdI->J0[0][2], 0.25 * StdI->J0[1][2], 0.25 * StdI->J0[2][2]);
Ladder.c:    0.25 * StdI->J1[0][0], 0.25 * StdI->J1[0][1], 0.25 * StdI->J1[0][2]);
Ladder.c:    0.25 * StdI->J1[0][1], 0.25 * StdI->J1[1][1], 0.25 * StdI->J1[1][2]);
Ladder.c:    0.25 * StdI->J1[0][2], 0.25 * StdI->J1[1][2], 0.25 * StdI->J1[2][2]);
Ladder.c:    0.25 * StdI->J1p[0][0], 0.25 * StdI->J1p[0][1], 0.25 * StdI->J1p[0][2]);
Ladder.c:    0.25 * StdI->J1p[0][1], 0.25 * StdI->J1p[1][1], 0.25 * StdI->J1p[1][2]);
Ladder.c:    0.25 * StdI->J1p[0][2], 0.25 * StdI->J1p[1][2], 0.25 * StdI->J1p[2][2]);
Ladder.c:    0.25 * StdI->J2[0][0], 0.25 * StdI->J2[0][1], 0.25 * StdI->J2[0][2]);
Ladder.c:    0.25 * StdI->J2[0][1], 0.25 * StdI->J2[1][1], 0.25 * StdI->J2[1][2]);
Ladder.c:    0.25 * StdI->J2[0][2], 0.25 * StdI->J2[1][2], 0.25 * StdI->J2[2][2]);
Ladder.c:    0.25 * StdI->J2p[0][0], 0.25 * StdI->J2p[0][1], 0.25 * StdI->J2p[0][2]);
Ladder.c:    0.25 * StdI->J2p[0][1], 0.25 * StdI->J2p[1][1], 0.25 * StdI->J2p[1][2]);
Ladder.c:    0.25 * StdI->J2p[0][2], 0.25 * StdI->J2p[1][2], 0.25 * StdI->J2p[2][2]);
Ladder.c:  if (StdI->S2 != 1) {
Ladder.c:  StdI->ishift_nspin = 2;
Ladder.c:  if (StdI->W != 2) {
Ladder.c:  if (StdI->L % 2 != 0) {
Ladder.c:  if (StdI->L < 4) {
Ladder.c:  StdI->W = StdI->L;
Ladder.c:  StdI->L = 2;
Ladder.c:  StdI->num_pivot = StdI->W / 2;
Ladder.c:  fprintf(fp, "# W0  R0  StdI->num_pivot  StdI->ishift_nspin\n");
Ladder.c:  fprintf(fp, "%d %d %d %d\n", StdI->W, StdI->L, StdI->num_pivot, StdI->ishift_nspin);
Ladder.c:  StdI->list_6spin_star = (int **)malloc(sizeof(int*) * StdI->num_pivot);
Ladder.c:  for (ipivot = 0; ipivot < StdI->num_pivot; ipivot++) {
Ladder.c:    StdI->list_6spin_star[ipivot] = (int *)malloc(sizeof(int) * 7);
Ladder.c:  for (ipivot = 0; ipivot < StdI->num_pivot; ipivot++) {
Ladder.c:    StdI->list_6spin_star[ipivot][0] = 7; // num of J
Ladder.c:    StdI->list_6spin_star[ipivot][1] = 1;
Ladder.c:    StdI->list_6spin_star[ipivot][2] = 1;
Ladder.c:    StdI->list_6spin_star[ipivot][3] = 1;
Ladder.c:    StdI->list_6spin_star[ipivot][4] = 1;
Ladder.c:    StdI->list_6spin_star[ipivot][5] = 1;
Ladder.c:    StdI->list_6spin_star[ipivot][6] = 1; // flag
Ladder.c:  fprintf(fp, "# StdI->list_6spin_star\n");
Ladder.c:  for (ipivot = 0; ipivot < StdI->num_pivot; ipivot++) {
Ladder.c:      fprintf(fp, "%d ", StdI->list_6spin_star[ipivot][isite]);
Ladder.c:  StdI->list_6spin_pair = (int ***)malloc(sizeof(int**) * StdI->num_pivot);
Ladder.c:  for (ipivot = 0; ipivot < StdI->num_pivot; ipivot++) {
Ladder.c:    StdI->list_6spin_pair[ipivot] = (int **)malloc(sizeof(int*) * 7);
Ladder.c:      StdI->list_6spin_pair[ipivot][isite] = (int *)malloc(sizeof(int) * StdI->list_6spin_star[ipivot][0]);
Ladder.c:  for (ipivot = 0; ipivot < StdI->num_pivot; ipivot++) {
Ladder.c:    StdI->list_6spin_pair[ipivot][0][0] = 0;
Ladder.c:    StdI->list_6spin_pair[ipivot][1][0] = 1;
Ladder.c:    StdI->list_6spin_pair[ipivot][2][0] = 2;
Ladder.c:    StdI->list_6spin_pair[ipivot][3][0] = 3;
Ladder.c:    StdI->list_6spin_pair[ipivot][4][0] = 4;
Ladder.c:    StdI->list_6spin_pair[ipivot][5][0] = 5;
Ladder.c:    StdI->list_6spin_pair[ipivot][6][0] = 1; // type of J
Ladder.c:    StdI->list_6spin_pair[ipivot][0][1] = 0;
Ladder.c:    StdI->list_6spin_pair[ipivot][1][1] = 2;
Ladder.c:    StdI->list_6spin_pair[ipivot][2][1] = 1;
Ladder.c:    StdI->list_6spin_pair[ipivot][3][1] = 3;
Ladder.c:    StdI->list_6spin_pair[ipivot][4][1] = 4;
Ladder.c:    StdI->list_6spin_pair[ipivot][5][1] = 5;
Ladder.c:    StdI->list_6spin_pair[ipivot][6][1] = 2; // type of J
Ladder.c:    StdI->list_6spin_pair[ipivot][0][2] = 1;
Ladder.c:    StdI->list_6spin_pair[ipivot][1][2] = 3;
Ladder.c:    StdI->list_6spin_pair[ipivot][2][2] = 0;
Ladder.c:    StdI->list_6spin_pair[ipivot][3][2] = 2;
Ladder.c:    StdI->list_6spin_pair[ipivot][4][2] = 4;
Ladder.c:    StdI->list_6spin_pair[ipivot][5][2] = 5;
Ladder.c:    StdI->list_6spin_pair[ipivot][6][2] = 2; // type of J
Ladder.c:    StdI->list_6spin_pair[ipivot][0][3] = 0;
Ladder.c:    StdI->list_6spin_pair[ipivot][1][3] = 4;
Ladder.c:    StdI->list_6spin_pair[ipivot][2][3] = 1;
Ladder.c:    StdI->list_6spin_pair[ipivot][3][3] = 2;
Ladder.c:    StdI->list_6spin_pair[ipivot][4][3] = 3;
Ladder.c:    StdI->list_6spin_pair[ipivot][5][3] = 5;
Ladder.c:    StdI->list_6spin_pair[ipivot][6][3] = 3; // type of J
Ladder.c:    StdI->list_6spin_pair[ipivot][0][4] = 1;
Ladder.c:    StdI->list_6spin_pair[ipivot][1][4] = 5;
Ladder.c:    StdI->list_6spin_pair[ipivot][2][4] = 0;
Ladder.c:    StdI->list_6spin_pair[ipivot][3][4] = 2;
Ladder.c:    StdI->list_6spin_pair[ipivot][4][4] = 3;
Ladder.c:    StdI->list_6spin_pair[ipivot][5][4] = 4;
Ladder.c:    StdI->list_6spin_pair[ipivot][6][4] = 3; // type of J
Ladder.c:    StdI->list_6spin_pair[ipivot][0][5] = 0;
Ladder.c:    StdI->list_6spin_pair[ipivot][1][5] = 3;
Ladder.c:    StdI->list_6spin_pair[ipivot][2][5] = 1;
Ladder.c:    StdI->list_6spin_pair[ipivot][3][5] = 2;
Ladder.c:    StdI->list_6spin_pair[ipivot][4][5] = 4;
Ladder.c:    StdI->list_6spin_pair[ipivot][5][5] = 5;
Ladder.c:    StdI->list_6spin_pair[ipivot][6][5] = 4; // type of J
Ladder.c:    StdI->list_6spin_pair[ipivot][0][6] = 1;
Ladder.c:    StdI->list_6spin_pair[ipivot][1][6] = 2;
Ladder.c:    StdI->list_6spin_pair[ipivot][2][6] = 0;
Ladder.c:    StdI->list_6spin_pair[ipivot][3][6] = 3;
Ladder.c:    StdI->list_6spin_pair[ipivot][4][6] = 4;
Ladder.c:    StdI->list_6spin_pair[ipivot][5][6] = 5;
Ladder.c:    StdI->list_6spin_pair[ipivot][6][6] = 5; // type of J
Ladder.c:  fprintf(fp, "# StdI->list_6spin_pair\n");
Ladder.c:  for (ipivot = 0; ipivot < StdI->num_pivot; ipivot++) {
Ladder.c:    for (kintr = 0; kintr < StdI->list_6spin_star[ipivot][0]; kintr++) {
Ladder.c:        fprintf(fp, "%d ", StdI->list_6spin_pair[ipivot][isite][kintr]);
Ladder.c:  for (ipivot = 0; ipivot < StdI->num_pivot; ipivot++) {
Ladder.c:    free(StdI->list_6spin_star[ipivot]);
Ladder.c:  free(StdI->list_6spin_star);
Ladder.c:  for (ipivot = 0; ipivot < StdI->num_pivot; ipivot++) {
Ladder.c:      free(StdI->list_6spin_pair[ipivot][isite]);
Ladder.c:    free(StdI->list_6spin_pair[ipivot]);
Ladder.c:  free(StdI->list_6spin_pair);
Orthorhombic.c:  StdI->NsiteUC = 1;
Orthorhombic.c:  StdFace_PrintVal_d("a", &StdI->a, 1.0);
Orthorhombic.c:  StdFace_PrintVal_d("Wlength", &StdI->length[0], StdI->a);
Orthorhombic.c:  StdFace_PrintVal_d("Llength", &StdI->length[1], StdI->a);
Orthorhombic.c:  StdFace_PrintVal_d("Hlength", &StdI->length[2], StdI->a);
Orthorhombic.c:  StdFace_PrintVal_d("Wx", &StdI->direct[0][0], StdI->length[0]);
Orthorhombic.c:  StdFace_PrintVal_d("Wy", &StdI->direct[0][1], 0.0);
Orthorhombic.c:  StdFace_PrintVal_d("Wz", &StdI->direct[0][2], 0.0);
Orthorhombic.c:  StdFace_PrintVal_d("Lx", &StdI->direct[1][0], 0.0);
Orthorhombic.c:  StdFace_PrintVal_d("Ly", &StdI->direct[1][1], StdI->length[1]);
Orthorhombic.c:  StdFace_PrintVal_d("Lz", &StdI->direct[1][2], 0.0);
Orthorhombic.c:  StdFace_PrintVal_d("Hx", &StdI->direct[2][0], 0.0);
Orthorhombic.c:  StdFace_PrintVal_d("Hy", &StdI->direct[2][1], 0.0);
Orthorhombic.c:  StdFace_PrintVal_d("Hz", &StdI->direct[2][2], StdI->length[1]);
Orthorhombic.c:  StdFace_PrintVal_d("phase0", &StdI->phase[0], 0.0);
Orthorhombic.c:  StdFace_PrintVal_d("phase1", &StdI->phase[1], 0.0);
Orthorhombic.c:  StdFace_PrintVal_d("phase2", &StdI->phase[2], 0.0);
Orthorhombic.c:  StdI->tau[0][0] = 0.0; StdI->tau[0][1] = 0.0; ; StdI->tau[0][2] = 0.0;
Orthorhombic.c:  StdFace_NotUsed_d("K", StdI->K);
Orthorhombic.c:  StdFace_PrintVal_d("h", &StdI->h, 0.0);
Orthorhombic.c:  StdFace_PrintVal_d("Gamma", &StdI->Gamma, 0.0);
Orthorhombic.c:  if (strcmp(StdI->model, "spin") == 0 ) {
Orthorhombic.c:    StdFace_PrintVal_i("2S", &StdI->S2, 1);
Orthorhombic.c:    StdFace_PrintVal_d("D", &StdI->D[2][2], 0.0);
Orthorhombic.c:    StdFace_InputSpinNN(StdI, StdI->J0, StdI->J0All, "J0");
Orthorhombic.c:    StdFace_InputSpinNN(StdI, StdI->J1, StdI->J1All, "J1");
Orthorhombic.c:    StdFace_InputSpinNN(StdI, StdI->J2, StdI->J2All, "J2");
Orthorhombic.c:    StdFace_InputSpin(StdI, StdI->J0p, StdI->J0pAll, "J0'");
Orthorhombic.c:    StdFace_InputSpin(StdI, StdI->J1p, StdI->J1pAll, "J1'");
Orthorhombic.c:    StdFace_InputSpin(StdI, StdI->J2p, StdI->J2pAll, "J2'");
Orthorhombic.c:    StdFace_InputSpin(StdI, StdI->Jpp, StdI->JppAll, "J''");
Orthorhombic.c:    StdFace_NotUsed_d("mu", StdI->mu);
Orthorhombic.c:    StdFace_NotUsed_d("U", StdI->U);
Orthorhombic.c:    StdFace_NotUsed_c("t", StdI->t);
Orthorhombic.c:    StdFace_NotUsed_c("t0", StdI->t0);
Orthorhombic.c:    StdFace_NotUsed_c("t1", StdI->t1);
Orthorhombic.c:    StdFace_NotUsed_c("t2", StdI->t2);
Orthorhombic.c:    StdFace_NotUsed_c("t'", StdI->tp);
Orthorhombic.c:    StdFace_NotUsed_c("t0'", StdI->t0p);
Orthorhombic.c:    StdFace_NotUsed_c("t1'", StdI->t1p);
Orthorhombic.c:    StdFace_NotUsed_c("t2'", StdI->t2p);
Orthorhombic.c:    StdFace_NotUsed_c("t''", StdI->tpp);
Orthorhombic.c:    StdFace_NotUsed_d("V", StdI->V);
Orthorhombic.c:    StdFace_NotUsed_d("V0", StdI->V0);
Orthorhombic.c:    StdFace_NotUsed_d("V1", StdI->V1);
Orthorhombic.c:    StdFace_NotUsed_d("V'", StdI->Vp);
Orthorhombic.c:  }/*if (strcmp(StdI->model, "spin") == 0 )*/
Orthorhombic.c:    StdFace_PrintVal_d("mu", &StdI->mu, 0.0);
Orthorhombic.c:    StdFace_PrintVal_d("U", &StdI->U, 0.0);
Orthorhombic.c:    StdFace_InputHopp(StdI, &StdI->t0, "t0");
Orthorhombic.c:    StdFace_InputHopp(StdI, &StdI->t1, "t1");
Orthorhombic.c:    StdFace_InputHopp(StdI, &StdI->t2, "t2");
Orthorhombic.c:    StdFace_PrintVal_c("t0'", &StdI->t0p, 0.0);
Orthorhombic.c:    StdFace_PrintVal_c("t1'", &StdI->t1p, 0.0);
Orthorhombic.c:    StdFace_PrintVal_c("t2'", &StdI->t2p, 0.0);
Orthorhombic.c:    StdFace_InputCoulombV(StdI, &StdI->V0, "V0");
Orthorhombic.c:    StdFace_InputCoulombV(StdI, &StdI->V1, "V1");
Orthorhombic.c:    StdFace_InputCoulombV(StdI, &StdI->V2, "V2");
Orthorhombic.c:    StdFace_PrintVal_d("V0'", &StdI->V0p, 0.0);
Orthorhombic.c:    StdFace_PrintVal_d("V1'", &StdI->V1p, 0.0);
Orthorhombic.c:    StdFace_PrintVal_d("V2'", &StdI->V2p, 0.0);
Orthorhombic.c:    StdFace_NotUsed_J("J0", StdI->J0All, StdI->J0);
Orthorhombic.c:    StdFace_NotUsed_J("J1", StdI->J1All, StdI->J1);
Orthorhombic.c:    StdFace_NotUsed_J("J2", StdI->J2All, StdI->J2);
Orthorhombic.c:    StdFace_NotUsed_J("J0'", StdI->J0pAll, StdI->J0p);
Orthorhombic.c:    StdFace_NotUsed_J("J1'", StdI->J1pAll, StdI->J1p);
Orthorhombic.c:    StdFace_NotUsed_J("J2'", StdI->J2pAll, StdI->J2p);
Orthorhombic.c:    StdFace_NotUsed_J("J''", StdI->JppAll, StdI->Jpp);
Orthorhombic.c:    StdFace_NotUsed_d("D", StdI->D[2][2]);
Orthorhombic.c:    if (strcmp(StdI->model, "hubbard") == 0 ) {
Orthorhombic.c:      StdFace_NotUsed_i("2S", StdI->S2);
Orthorhombic.c:      StdFace_NotUsed_J("J", StdI->JAll, StdI->J);
Orthorhombic.c:    }/*if (strcmp(StdI->model, "hubbard") == 0 )*/
Orthorhombic.c:      StdFace_PrintVal_i("2S", &StdI->S2, 1);
Orthorhombic.c:      StdFace_InputSpin(StdI, StdI->J, StdI->JAll, "J");
Orthorhombic.c:  StdI->nsite = StdI->NsiteUC * StdI->NCell;
Orthorhombic.c:  if (strcmp(StdI->model, "kondo") == 0 ) StdI->nsite *= 2;
Orthorhombic.c:  StdI->locspinflag = (int *)malloc(sizeof(int) * StdI->nsite);
Orthorhombic.c:  if(strcmp(StdI->model, "spin") == 0 )
Orthorhombic.c:    for (isite = 0; isite < StdI->nsite; isite++) StdI->locspinflag[isite] = StdI->S2;
Orthorhombic.c:  else if(strcmp(StdI->model, "hubbard") == 0 )
Orthorhombic.c:    for (isite = 0; isite < StdI->nsite; isite++) StdI->locspinflag[isite] = 0;
Orthorhombic.c:    for (iL = 0; iL < StdI->nsite / 2; iL++) {
Orthorhombic.c:      StdI->locspinflag[iL] = StdI->S2;
Orthorhombic.c:      StdI->locspinflag[iL + StdI->nsite / 2] = 0;
Orthorhombic.c:  if (strcmp(StdI->model, "spin") == 0 ) {
Orthorhombic.c:    ntransMax = StdI->nsite * (StdI->S2 + 1/*h*/ + 2 * StdI->S2/*Gamma*/);
Orthorhombic.c:    nintrMax = StdI->NCell * (StdI->NsiteUC/*D*/ + 3/*J*/ + 6/*J'*/ + 4/*J''*/)
Orthorhombic.c:      * (3 * StdI->S2 + 1) * (3 * StdI->S2 + 1);
Orthorhombic.c:    ntransMax = StdI->NCell * 2/*spin*/ * (2 * StdI->NsiteUC/*mu+h+Gamma*/ + 6/*t*/ + 12/*t'*/ + 8/*t''*/);
Orthorhombic.c:    nintrMax = StdI->NCell * (StdI->NsiteUC/*U*/ + 4 * (3/*V*/ + 6/*V'*/ + 4/*V''*/));
Orthorhombic.c:    if (strcmp(StdI->model, "kondo") == 0) {
Orthorhombic.c:      ntransMax += StdI->nsite / 2 * (StdI->S2 + 1/*h*/ + 2 * StdI->S2/*Gamma*/);
Orthorhombic.c:      nintrMax += StdI->nsite / 2 * (3 * StdI->S2 + 1) * (3 * StdI->S2 + 1);
Orthorhombic.c:    }/*if (strcmp(StdI->model, "kondo") == 0)*/
Orthorhombic.c:  for (kCell = 0; kCell < StdI->NCell; kCell++){
Orthorhombic.c:    iW = StdI->Cell[kCell][0];
Orthorhombic.c:    iL = StdI->Cell[kCell][1];
Orthorhombic.c:    iH = StdI->Cell[kCell][2];
Orthorhombic.c:    if (strcmp(StdI->model, "kondo") == 0 ) isite += StdI->NCell;
Orthorhombic.c:    if (strcmp(StdI->model, "spin") == 0 ) {
Orthorhombic.c:      StdFace_MagField(StdI, StdI->S2, -StdI->h, -StdI->Gamma, isite);
Orthorhombic.c:      StdFace_GeneralJ(StdI, StdI->D, StdI->S2, StdI->S2, isite, isite);
Orthorhombic.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
Orthorhombic.c:      StdFace_HubbardLocal(StdI, StdI->mu, -StdI->h, -StdI->Gamma, StdI->U, isite);
Orthorhombic.c:      if (strcmp(StdI->model, "kondo") == 0 ) {
Orthorhombic.c:        StdFace_GeneralJ(StdI, StdI->J, 1, StdI->S2, isite, jsite);
Orthorhombic.c:        StdFace_MagField(StdI, StdI->S2, -StdI->h, -StdI->Gamma, jsite);
Orthorhombic.c:      }/*if (strcmp(StdI->model, "kondo") == 0 )*/
Orthorhombic.c:    if (strcmp(StdI->model, "spin") == 0 ) {
Orthorhombic.c:      StdFace_GeneralJ(StdI, StdI->J0, StdI->S2, StdI->S2, isite, jsite);
Orthorhombic.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
Orthorhombic.c:      StdFace_Hopping(StdI, Cphase * StdI->t0, isite, jsite, dR);
Orthorhombic.c:      StdFace_Coulomb(StdI, StdI->V0, isite, jsite);
Orthorhombic.c:    if (strcmp(StdI->model, "spin") == 0) {
Orthorhombic.c:      StdFace_GeneralJ(StdI, StdI->J1, StdI->S2, StdI->S2, isite, jsite);
Orthorhombic.c:      StdFace_Hopping(StdI, Cphase * StdI->t1, isite, jsite, dR);
Orthorhombic.c:      StdFace_Coulomb(StdI, StdI->V1, isite, jsite);
Orthorhombic.c:    if (strcmp(StdI->model, "spin") == 0) {
Orthorhombic.c:      StdFace_GeneralJ(StdI, StdI->J2, StdI->S2, StdI->S2, isite, jsite);
Orthorhombic.c:      StdFace_Hopping(StdI, Cphase * StdI->t2, isite, jsite, dR);
Orthorhombic.c:      StdFace_Coulomb(StdI, StdI->V2, isite, jsite);
Orthorhombic.c:    if (strcmp(StdI->model, "spin") == 0 ) {
Orthorhombic.c:      StdFace_GeneralJ(StdI, StdI->J0p, StdI->S2, StdI->S2, isite, jsite);
Orthorhombic.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
Orthorhombic.c:      StdFace_Hopping(StdI, Cphase * StdI->t0p, isite, jsite, dR);
Orthorhombic.c:      StdFace_Coulomb(StdI, StdI->V0p, isite, jsite);
Orthorhombic.c:    if (strcmp(StdI->model, "spin") == 0) {
Orthorhombic.c:      StdFace_GeneralJ(StdI, StdI->J0p, StdI->S2, StdI->S2, isite, jsite);
Orthorhombic.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
Orthorhombic.c:      StdFace_Hopping(StdI, Cphase * StdI->t0p, isite, jsite, dR);
Orthorhombic.c:      StdFace_Coulomb(StdI, StdI->V0p, isite, jsite);
Orthorhombic.c:    if (strcmp(StdI->model, "spin") == 0) {
Orthorhombic.c:      StdFace_GeneralJ(StdI, StdI->J1p, StdI->S2, StdI->S2, isite, jsite);
Orthorhombic.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
Orthorhombic.c:      StdFace_Hopping(StdI, Cphase * StdI->t1p, isite, jsite, dR);
Orthorhombic.c:      StdFace_Coulomb(StdI, StdI->V1p, isite, jsite);
Orthorhombic.c:    if (strcmp(StdI->model, "spin") == 0) {
Orthorhombic.c:      StdFace_GeneralJ(StdI, StdI->J1p, StdI->S2, StdI->S2, isite, jsite);
Orthorhombic.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
Orthorhombic.c:      StdFace_Hopping(StdI, Cphase * StdI->t1p, isite, jsite, dR);
Orthorhombic.c:      StdFace_Coulomb(StdI, StdI->V1p, isite, jsite);
Orthorhombic.c:    if (strcmp(StdI->model, "spin") == 0) {
Orthorhombic.c:      StdFace_GeneralJ(StdI, StdI->J2p, StdI->S2, StdI->S2, isite, jsite);
Orthorhombic.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
Orthorhombic.c:      StdFace_Hopping(StdI, Cphase * StdI->t2p, isite, jsite, dR);
Orthorhombic.c:      StdFace_Coulomb(StdI, StdI->V2p, isite, jsite);
Orthorhombic.c:    if (strcmp(StdI->model, "spin") == 0) {
Orthorhombic.c:      StdFace_GeneralJ(StdI, StdI->J2p, StdI->S2, StdI->S2, isite, jsite);
Orthorhombic.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
Orthorhombic.c:      StdFace_Hopping(StdI, Cphase * StdI->t2p, isite, jsite, dR);
Orthorhombic.c:      StdFace_Coulomb(StdI, StdI->V2p, isite, jsite);
Orthorhombic.c:    if (strcmp(StdI->model, "spin") == 0) {
Orthorhombic.c:      StdFace_GeneralJ(StdI, StdI->Jpp, StdI->S2, StdI->S2, isite, jsite);
Orthorhombic.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
Orthorhombic.c:      StdFace_Hopping(StdI, Cphase * StdI->tpp, isite, jsite, dR);
Orthorhombic.c:      StdFace_Coulomb(StdI, StdI->Vpp, isite, jsite);
Orthorhombic.c:    if (strcmp(StdI->model, "spin") == 0) {
Orthorhombic.c:      StdFace_GeneralJ(StdI, StdI->Jpp, StdI->S2, StdI->S2, isite, jsite);
Orthorhombic.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
Orthorhombic.c:      StdFace_Hopping(StdI, Cphase * StdI->tpp, isite, jsite, dR);
Orthorhombic.c:      StdFace_Coulomb(StdI, StdI->Vpp, isite, jsite);
Orthorhombic.c:    if (strcmp(StdI->model, "spin") == 0) {
Orthorhombic.c:      StdFace_GeneralJ(StdI, StdI->Jpp, StdI->S2, StdI->S2, isite, jsite);
Orthorhombic.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
Orthorhombic.c:      StdFace_Hopping(StdI, Cphase * StdI->tpp, isite, jsite, dR);
Orthorhombic.c:      StdFace_Coulomb(StdI, StdI->Vpp, isite, jsite);
Orthorhombic.c:    if (strcmp(StdI->model, "spin") == 0) {
Orthorhombic.c:      StdFace_GeneralJ(StdI, StdI->Jpp, StdI->S2, StdI->S2, isite, jsite);
Orthorhombic.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
Orthorhombic.c:      StdFace_Hopping(StdI, Cphase * StdI->tpp, isite, jsite, dR);
Orthorhombic.c:      StdFace_Coulomb(StdI, StdI->Vpp, isite, jsite);
Orthorhombic.c:  }/*for (kCell = 0; kCell < StdI->NCell; kCell++)*/
Pyrochlore.c:  StdI->NsiteUC = 4;
Pyrochlore.c:  StdFace_PrintVal_d("a", &StdI->a, 1.0);
Pyrochlore.c:  StdFace_PrintVal_d("Wlength", &StdI->length[0], StdI->a);
Pyrochlore.c:  StdFace_PrintVal_d("Llength", &StdI->length[1], StdI->a);
Pyrochlore.c:  StdFace_PrintVal_d("Hlength", &StdI->length[2], StdI->a);
Pyrochlore.c:  StdFace_PrintVal_d("Wx", &StdI->direct[0][0], 0.0);
Pyrochlore.c:  StdFace_PrintVal_d("Wy", &StdI->direct[0][1], 0.5 * StdI->length[0]);
Pyrochlore.c:  StdFace_PrintVal_d("Wz", &StdI->direct[0][2], 0.5 * StdI->length[0]);
Pyrochlore.c:  StdFace_PrintVal_d("Lx", &StdI->direct[1][0], 0.5 * StdI->length[1]);
Pyrochlore.c:  StdFace_PrintVal_d("Ly", &StdI->direct[1][1], 0.0);
Pyrochlore.c:  StdFace_PrintVal_d("Lz", &StdI->direct[1][2], 0.5 * StdI->length[1]);
Pyrochlore.c:  StdFace_PrintVal_d("Hx", &StdI->direct[2][0], 0.5 * StdI->length[2]);
Pyrochlore.c:  StdFace_PrintVal_d("Hy", &StdI->direct[2][1], 0.5 * StdI->length[2]);
Pyrochlore.c:  StdFace_PrintVal_d("Hz", &StdI->direct[2][2], 0.0);
Pyrochlore.c:  StdFace_PrintVal_d("phase0", &StdI->phase[0], 0.0);
Pyrochlore.c:  StdFace_PrintVal_d("phase1", &StdI->phase[1], 0.0);
Pyrochlore.c:  StdFace_PrintVal_d("phase2", &StdI->phase[2], 0.0);
Pyrochlore.c:  StdI->tau[0][0] = 0.0; StdI->tau[0][1] = 0.0; ; StdI->tau[0][2] = 0.0;
Pyrochlore.c:  StdI->tau[1][0] = 0.5; StdI->tau[1][1] = 0.0; ; StdI->tau[1][2] = 0.0;
Pyrochlore.c:  StdI->tau[2][0] = 0.0; StdI->tau[2][1] = 0.5; ; StdI->tau[2][2] = 0.0;
Pyrochlore.c:  StdI->tau[3][0] = 0.0; StdI->tau[3][1] = 0.0; ; StdI->tau[3][2] = 0.5;
Pyrochlore.c:  StdFace_NotUsed_d("K", StdI->K);
Pyrochlore.c:  StdFace_PrintVal_d("h", &StdI->h, 0.0);
Pyrochlore.c:  StdFace_PrintVal_d("Gamma", &StdI->Gamma, 0.0);
Pyrochlore.c:  if (strcmp(StdI->model, "spin") == 0 ) {
Pyrochlore.c:    StdFace_PrintVal_i("2S", &StdI->S2, 1);
Pyrochlore.c:    StdFace_PrintVal_d("D", &StdI->D[2][2], 0.0);
Pyrochlore.c:    StdFace_InputSpinNN(StdI, StdI->J0, StdI->J0All, "J0");
Pyrochlore.c:    StdFace_InputSpinNN(StdI, StdI->J1, StdI->J1All, "J1");
Pyrochlore.c:    StdFace_InputSpinNN(StdI, StdI->J2, StdI->J2All, "J2");
Pyrochlore.c:    StdFace_InputSpinNN(StdI, StdI->J0p, StdI->J0pAll, "J0'");
Pyrochlore.c:    StdFace_InputSpinNN(StdI, StdI->J1p, StdI->J1pAll, "J1'");
Pyrochlore.c:    StdFace_InputSpinNN(StdI, StdI->J2p, StdI->J2pAll, "J2'");
Pyrochlore.c:    StdFace_InputSpin(StdI, StdI->Jpp, StdI->JppAll, "J''");
Pyrochlore.c:    StdFace_NotUsed_d("mu", StdI->mu);
Pyrochlore.c:    StdFace_NotUsed_d("U", StdI->U);
Pyrochlore.c:    StdFace_NotUsed_c("t", StdI->t);
Pyrochlore.c:    StdFace_NotUsed_c("t0", StdI->t0);
Pyrochlore.c:    StdFace_NotUsed_c("t1", StdI->t1);
Pyrochlore.c:    StdFace_NotUsed_c("t2", StdI->t2);
Pyrochlore.c:    StdFace_NotUsed_c("t'", StdI->tp);
Pyrochlore.c:    StdFace_NotUsed_c("t0'", StdI->t0p);
Pyrochlore.c:    StdFace_NotUsed_c("t1'", StdI->t1p);
Pyrochlore.c:    StdFace_NotUsed_c("t2'", StdI->t2p);
Pyrochlore.c:    StdFace_NotUsed_c("t''", StdI->tpp);
Pyrochlore.c:    StdFace_NotUsed_d("V", StdI->V);
Pyrochlore.c:    StdFace_NotUsed_d("V0", StdI->V0);
Pyrochlore.c:    StdFace_NotUsed_d("V1", StdI->V1);
Pyrochlore.c:    StdFace_NotUsed_d("V'", StdI->Vp);
Pyrochlore.c:  }/*if (strcmp(StdI->model, "spin") == 0 )*/
Pyrochlore.c:    StdFace_PrintVal_d("mu", &StdI->mu, 0.0);
Pyrochlore.c:    StdFace_PrintVal_d("U", &StdI->U, 0.0);
Pyrochlore.c:    StdFace_InputHopp(StdI, &StdI->t0, "t0");
Pyrochlore.c:    StdFace_InputHopp(StdI, &StdI->t1, "t1");
Pyrochlore.c:    StdFace_InputHopp(StdI, &StdI->t2, "t2");
Pyrochlore.c:    StdFace_InputHopp(StdI, &StdI->t0p, "t0'");
Pyrochlore.c:    StdFace_InputHopp(StdI, &StdI->t1p, "t1'");
Pyrochlore.c:    StdFace_InputHopp(StdI, &StdI->t2p, "t2'");
Pyrochlore.c:    StdFace_InputCoulombV(StdI, &StdI->V0, "V0");
Pyrochlore.c:    StdFace_InputCoulombV(StdI, &StdI->V1, "V1");
Pyrochlore.c:    StdFace_InputCoulombV(StdI, &StdI->V2, "V2");
Pyrochlore.c:    StdFace_InputCoulombV(StdI, &StdI->V0p, "V0'");
Pyrochlore.c:    StdFace_InputCoulombV(StdI, &StdI->V1p, "V1'");
Pyrochlore.c:    StdFace_InputCoulombV(StdI, &StdI->V2p, "V2'");
Pyrochlore.c:    StdFace_NotUsed_J("J0", StdI->J0All, StdI->J0);
Pyrochlore.c:    StdFace_NotUsed_J("J1", StdI->J1All, StdI->J1);
Pyrochlore.c:    StdFace_NotUsed_J("J2", StdI->J2All, StdI->J2);
Pyrochlore.c:    StdFace_NotUsed_J("J0'", StdI->J0pAll, StdI->J0p);
Pyrochlore.c:    StdFace_NotUsed_J("J1'", StdI->J1pAll, StdI->J1p);
Pyrochlore.c:    StdFace_NotUsed_J("J2'", StdI->J2pAll, StdI->J2p);
Pyrochlore.c:    StdFace_NotUsed_J("J''", StdI->JppAll, StdI->Jpp);
Pyrochlore.c:    StdFace_NotUsed_d("D", StdI->D[2][2]);
Pyrochlore.c:    if (strcmp(StdI->model, "hubbard") == 0 ) {
Pyrochlore.c:      StdFace_NotUsed_i("2S", StdI->S2);
Pyrochlore.c:      StdFace_NotUsed_J("J", StdI->JAll, StdI->J);
Pyrochlore.c:    }/*if (strcmp(StdI->model, "hubbard") == 0 )*/
Pyrochlore.c:      StdFace_PrintVal_i("2S", &StdI->S2, 1);
Pyrochlore.c:      StdFace_InputSpin(StdI, StdI->J, StdI->JAll, "J");
Pyrochlore.c:  StdI->nsite = StdI->NsiteUC * StdI->NCell;
Pyrochlore.c:  if (strcmp(StdI->model, "kondo") == 0 ) StdI->nsite *= 2;
Pyrochlore.c:  StdI->locspinflag = (int *)malloc(sizeof(int) * StdI->nsite);
Pyrochlore.c:  if(strcmp(StdI->model, "spin") == 0 )
Pyrochlore.c:    for (isite = 0; isite < StdI->nsite; isite++) StdI->locspinflag[isite] = StdI->S2;
Pyrochlore.c:  else if(strcmp(StdI->model, "hubbard") == 0 )
Pyrochlore.c:    for (isite = 0; isite < StdI->nsite; isite++) StdI->locspinflag[isite] = 0;
Pyrochlore.c:    for (iL = 0; iL < StdI->nsite / 2; iL++) {
Pyrochlore.c:      StdI->locspinflag[iL] = StdI->S2;
Pyrochlore.c:      StdI->locspinflag[iL + StdI->nsite / 2] = 0;
Pyrochlore.c:  if (strcmp(StdI->model, "spin") == 0 ) {
Pyrochlore.c:    ntransMax = StdI->nsite * (StdI->S2 + 1/*h*/ + 2 * StdI->S2/*Gamma*/);
Pyrochlore.c:    nintrMax = StdI->NCell * (StdI->NsiteUC/*D*/ + 12/*J*/ + 0/*J'*/ + 0/*J''*/)
Pyrochlore.c:      * (3 * StdI->S2 + 1) * (3 * StdI->S2 + 1);
Pyrochlore.c:    ntransMax = StdI->NCell * 2/*spin*/ * (2 * StdI->NsiteUC/*mu+h+Gamma*/ + 24/*t*/ + 0/*t'*/ + 0/*t''*/);
Pyrochlore.c:    nintrMax = StdI->NCell * (StdI->NsiteUC/*U*/ + 4 * (12/*V*/ + 0/*V'*/ + 0/*V''*/));
Pyrochlore.c:    if (strcmp(StdI->model, "kondo") == 0) {
Pyrochlore.c:      ntransMax += StdI->nsite / 2 * (StdI->S2 + 1/*h*/ + 2 * StdI->S2/*Gamma*/);
Pyrochlore.c:      nintrMax += StdI->nsite / 2 * (3 * StdI->S2 + 1) * (3 * StdI->S2 + 1);
Pyrochlore.c:  for (kCell = 0; kCell < StdI->NCell; kCell++){
Pyrochlore.c:    iW = StdI->Cell[kCell][0];
Pyrochlore.c:    iL = StdI->Cell[kCell][1];
Pyrochlore.c:    iH = StdI->Cell[kCell][2];
Pyrochlore.c:    isite = StdI->NsiteUC * kCell;
Pyrochlore.c:    if (strcmp(StdI->model, "kondo") == 0) isite += StdI->nsite / 2;
Pyrochlore.c:    if (strcmp(StdI->model, "spin") == 0) {
Pyrochlore.c:      for (isiteUC = 0; isiteUC < StdI->NsiteUC; isiteUC++) {
Pyrochlore.c:        StdFace_MagField(StdI, StdI->S2, -StdI->h, -StdI->Gamma, isite + isiteUC);
Pyrochlore.c:        StdFace_GeneralJ(StdI, StdI->D, StdI->S2, StdI->S2, isite + isiteUC, isite + isiteUC);
Pyrochlore.c:      }/*for (isiteUC = 0; isiteUC < StdI->NsiteUC; isiteUC++)*/
Pyrochlore.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
Pyrochlore.c:      for (isiteUC = 0; isiteUC < StdI->NsiteUC; isiteUC++) {
Pyrochlore.c:        StdFace_HubbardLocal(StdI, StdI->mu, -StdI->h, -StdI->Gamma, StdI->U, isite + isiteUC);
Pyrochlore.c:      }/*for (isiteUC = 0; isiteUC < StdI->NsiteUC; isiteUC++)*/
Pyrochlore.c:      if (strcmp(StdI->model, "kondo") == 0) {
Pyrochlore.c:        jsite = StdI->NsiteUC * kCell;
Pyrochlore.c:        for (isiteUC = 0; isiteUC < StdI->NsiteUC; isiteUC++) {
Pyrochlore.c:          StdFace_GeneralJ(StdI, StdI->J, 1, StdI->S2, isite + 3, jsite + isiteUC);
Pyrochlore.c:          StdFace_MagField(StdI, StdI->S2, -StdI->h, -StdI->Gamma, jsite + isiteUC);
Pyrochlore.c:        }/*for (isiteUC = 0; isiteUC < StdI->NsiteUC; isiteUC++)*/
Pyrochlore.c:      }/*if (strcmp(StdI->model, "kondo") == 0 )*/
Pyrochlore.c:    }/*if (strcmp(StdI->model, "spin") != 0 )*/
Pyrochlore.c:    if (strcmp(StdI->model, "spin") == 0 ) {
Pyrochlore.c:      StdFace_GeneralJ(StdI, StdI->J0, StdI->S2, StdI->S2, isite, jsite);
Pyrochlore.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
Pyrochlore.c:      StdFace_Hopping(StdI, Cphase * StdI->t0, isite, jsite, dR);
Pyrochlore.c:      StdFace_Coulomb(StdI, StdI->V0, isite, jsite);
Pyrochlore.c:    if (strcmp(StdI->model, "spin") == 0) {
Pyrochlore.c:      StdFace_GeneralJ(StdI, StdI->J1, StdI->S2, StdI->S2, isite, jsite);
Pyrochlore.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
Pyrochlore.c:      StdFace_Hopping(StdI, Cphase * StdI->t1, isite, jsite, dR);
Pyrochlore.c:      StdFace_Coulomb(StdI, StdI->V1, isite, jsite);
Pyrochlore.c:    if (strcmp(StdI->model, "spin") == 0) {
Pyrochlore.c:      StdFace_GeneralJ(StdI, StdI->J2, StdI->S2, StdI->S2, isite, jsite);
Pyrochlore.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
Pyrochlore.c:      StdFace_Hopping(StdI, Cphase * StdI->t2, isite, jsite, dR);
Pyrochlore.c:      StdFace_Coulomb(StdI, StdI->V2, isite, jsite);
Pyrochlore.c:    if (strcmp(StdI->model, "spin") == 0) {
Pyrochlore.c:      StdFace_GeneralJ(StdI, StdI->J0p, StdI->S2, StdI->S2, isite, jsite);
Pyrochlore.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
Pyrochlore.c:      StdFace_Hopping(StdI, Cphase * StdI->t0p, isite, jsite, dR);
Pyrochlore.c:      StdFace_Coulomb(StdI, StdI->V0p, isite, jsite);
Pyrochlore.c:    if (strcmp(StdI->model, "spin") == 0) {
Pyrochlore.c:      StdFace_GeneralJ(StdI, StdI->J1p, StdI->S2, StdI->S2, isite, jsite);
Pyrochlore.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
Pyrochlore.c:      StdFace_Hopping(StdI, Cphase * StdI->t1p, isite, jsite, dR);
Pyrochlore.c:      StdFace_Coulomb(StdI, StdI->V1p, isite, jsite);
Pyrochlore.c:    if (strcmp(StdI->model, "spin") == 0) {
Pyrochlore.c:      StdFace_GeneralJ(StdI, StdI->J2p, StdI->S2, StdI->S2, isite, jsite);
Pyrochlore.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
Pyrochlore.c:      StdFace_Hopping(StdI, Cphase * StdI->t2p, isite, jsite, dR);
Pyrochlore.c:      StdFace_Coulomb(StdI, StdI->V2p, isite, jsite);
Pyrochlore.c:    if (strcmp(StdI->model, "spin") == 0) {
Pyrochlore.c:      StdFace_GeneralJ(StdI, StdI->J0, StdI->S2, StdI->S2, isite, jsite);
Pyrochlore.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
Pyrochlore.c:      StdFace_Hopping(StdI, Cphase * StdI->t0, isite, jsite, dR);
Pyrochlore.c:      StdFace_Coulomb(StdI, StdI->V0, isite, jsite);
Pyrochlore.c:    if (strcmp(StdI->model, "spin") == 0) {
Pyrochlore.c:      StdFace_GeneralJ(StdI, StdI->J1, StdI->S2, StdI->S2, isite, jsite);
Pyrochlore.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
Pyrochlore.c:      StdFace_Hopping(StdI, Cphase * StdI->t1, isite, jsite, dR);
Pyrochlore.c:      StdFace_Coulomb(StdI, StdI->V1, isite, jsite);
Pyrochlore.c:    if (strcmp(StdI->model, "spin") == 0) {
Pyrochlore.c:      StdFace_GeneralJ(StdI, StdI->J2, StdI->S2, StdI->S2, isite, jsite);
Pyrochlore.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
Pyrochlore.c:      StdFace_Hopping(StdI, Cphase * StdI->t2, isite, jsite, dR);
Pyrochlore.c:      StdFace_Coulomb(StdI, StdI->V2, isite, jsite);
Pyrochlore.c:    if (strcmp(StdI->model, "spin") == 0) {
Pyrochlore.c:      StdFace_GeneralJ(StdI, StdI->J0p, StdI->S2, StdI->S2, isite, jsite);
Pyrochlore.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
Pyrochlore.c:      StdFace_Hopping(StdI, Cphase * StdI->t0p, isite, jsite, dR);
Pyrochlore.c:      StdFace_Coulomb(StdI, StdI->V0p, isite, jsite);
Pyrochlore.c:    if (strcmp(StdI->model, "spin") == 0) {
Pyrochlore.c:      StdFace_GeneralJ(StdI, StdI->J1p, StdI->S2, StdI->S2, isite, jsite);
Pyrochlore.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
Pyrochlore.c:      StdFace_Hopping(StdI, Cphase * StdI->t1p, isite, jsite, dR);
Pyrochlore.c:      StdFace_Coulomb(StdI, StdI->V1p, isite, jsite);
Pyrochlore.c:    if (strcmp(StdI->model, "spin") == 0) {
Pyrochlore.c:      StdFace_GeneralJ(StdI, StdI->J2p, StdI->S2, StdI->S2, isite, jsite);
Pyrochlore.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
Pyrochlore.c:      StdFace_Hopping(StdI, Cphase * StdI->t2p, isite, jsite, dR);
Pyrochlore.c:      StdFace_Coulomb(StdI, StdI->V2p, isite, jsite);
Pyrochlore.c:  }/*for (kCell = 0; kCell < StdI->NCell; kCell++)*/
SquareLattice.c:  StdI->NsiteUC = 1;
SquareLattice.c:  StdFace_PrintVal_d("a", &StdI->a, 1.0);
SquareLattice.c:  StdFace_PrintVal_d("Wlength", &StdI->length[0], StdI->a);
SquareLattice.c:  StdFace_PrintVal_d("Llength", &StdI->length[1], StdI->a);
SquareLattice.c:  StdFace_PrintVal_d("Wx", &StdI->direct[0][0], StdI->length[0]);
SquareLattice.c:  StdFace_PrintVal_d("Wy", &StdI->direct[0][1], 0.0);
SquareLattice.c:  StdFace_PrintVal_d("Lx", &StdI->direct[1][0], 0.0);
SquareLattice.c:  StdFace_PrintVal_d("Ly", &StdI->direct[1][1], StdI->length[1]);
SquareLattice.c:  StdFace_PrintVal_d("phase0", &StdI->phase[0], 0.0);
SquareLattice.c:  StdFace_PrintVal_d("phase1", &StdI->phase[1], 0.0);
SquareLattice.c:  StdI->tau[0][0] = 0.0; StdI->tau[0][1] = 0.0; StdI->tau[0][2] = 0.0;
SquareLattice.c:  StdFace_NotUsed_J("J2", StdI->J2All, StdI->J2);
SquareLattice.c:  StdFace_NotUsed_J("J1'", StdI->J1pAll, StdI->J1p);
SquareLattice.c:  StdFace_NotUsed_J("J2'", StdI->J2pAll, StdI->J2p);
SquareLattice.c:  StdFace_NotUsed_c("t2", StdI->t2);
SquareLattice.c:  StdFace_NotUsed_d("t1'", StdI->t1p);
SquareLattice.c:  StdFace_NotUsed_d("t2'", StdI->t2p);
SquareLattice.c:  StdFace_NotUsed_d("V2", StdI->V2);
SquareLattice.c:  StdFace_NotUsed_d("V1'", StdI->V1p);
SquareLattice.c:  StdFace_NotUsed_d("V2'", StdI->V2p);
SquareLattice.c:  StdFace_NotUsed_d("K", StdI->K);
SquareLattice.c:  StdFace_PrintVal_d("h", &StdI->h, 0.0);
SquareLattice.c:  StdFace_PrintVal_d("Gamma", &StdI->Gamma, 0.0);
SquareLattice.c:  if (strcmp(StdI->model, "spin") == 0 ) {
SquareLattice.c:    StdFace_PrintVal_i("2S", &StdI->S2, 1);
SquareLattice.c:    StdFace_PrintVal_d("D", &StdI->D[2][2], 0.0);
SquareLattice.c:    StdFace_InputSpinNN(StdI, StdI->J0, StdI->J0All, "J0");
SquareLattice.c:    StdFace_InputSpinNN(StdI, StdI->J1, StdI->J1All, "J1");
SquareLattice.c:    StdFace_InputSpin(StdI, StdI->Jp, StdI->JpAll, "J'");
SquareLattice.c:    StdFace_NotUsed_d("mu", StdI->mu);
SquareLattice.c:    StdFace_NotUsed_d("U", StdI->U);
SquareLattice.c:    StdFace_NotUsed_c("t", StdI->t);
SquareLattice.c:    StdFace_NotUsed_c("t0", StdI->t0);
SquareLattice.c:    StdFace_NotUsed_c("t1", StdI->t1);
SquareLattice.c:    StdFace_NotUsed_c("t'", StdI->tp);
SquareLattice.c:    StdFace_NotUsed_d("V", StdI->V);
SquareLattice.c:    StdFace_NotUsed_d("V0", StdI->V0);
SquareLattice.c:    StdFace_NotUsed_d("V1", StdI->V1);
SquareLattice.c:    StdFace_NotUsed_d("V'", StdI->Vp);
SquareLattice.c:  }/*if (strcmp(StdI->model, "spin") == 0 )*/
SquareLattice.c:    StdFace_PrintVal_d("mu", &StdI->mu, 0.0);
SquareLattice.c:    StdFace_PrintVal_d("U", &StdI->U, 0.0);
SquareLattice.c:    StdFace_InputHopp(StdI, &StdI->t0, "t0");
SquareLattice.c:    StdFace_InputHopp(StdI, &StdI->t1, "t1");
SquareLattice.c:    StdFace_PrintVal_c("t'", &StdI->tp, 0.0);
SquareLattice.c:    StdFace_InputCoulombV(StdI, &StdI->V0, "V0");
SquareLattice.c:    StdFace_InputCoulombV(StdI, &StdI->V1, "V1");
SquareLattice.c:    StdFace_PrintVal_d("V'", &StdI->Vp, 0.0);
SquareLattice.c:    StdFace_NotUsed_J("J0", StdI->J0All, StdI->J0);
SquareLattice.c:    StdFace_NotUsed_J("J1", StdI->J1All, StdI->J1);
SquareLattice.c:    StdFace_NotUsed_J("J'", StdI->JpAll, StdI->Jp);
SquareLattice.c:    StdFace_NotUsed_d("D", StdI->D[2][2]);
SquareLattice.c:    if (strcmp(StdI->model, "hubbard") == 0 ) {
SquareLattice.c:      StdFace_NotUsed_i("2S", StdI->S2);
SquareLattice.c:      StdFace_NotUsed_J("J", StdI->JAll, StdI->J);
SquareLattice.c:    }/*if (strcmp(StdI->model, "hubbard") == 0 )*/
SquareLattice.c:      StdFace_PrintVal_i("2S", &StdI->S2, 1);
SquareLattice.c:      StdFace_InputSpin(StdI, StdI->J, StdI->JAll, "J");
SquareLattice.c:  StdI->nsite = StdI->NsiteUC * StdI->NCell;
SquareLattice.c:  if (strcmp(StdI->model, "kondo") == 0 ) StdI->nsite *= 2;
SquareLattice.c:  StdI->locspinflag = (int *)malloc(sizeof(int) * StdI->nsite);
SquareLattice.c:  if(strcmp(StdI->model, "spin") == 0 )
SquareLattice.c:    for (isite = 0; isite < StdI->nsite; isite++) StdI->locspinflag[isite] = StdI->S2;
SquareLattice.c:  else if(strcmp(StdI->model, "hubbard") == 0 )
SquareLattice.c:    for (isite = 0; isite < StdI->nsite; isite++) StdI->locspinflag[isite] = 0;
SquareLattice.c:    for (iL = 0; iL < StdI->nsite / 2; iL++) {
SquareLattice.c:      StdI->locspinflag[iL] = StdI->S2;
SquareLattice.c:      StdI->locspinflag[iL + StdI->nsite / 2] = 0;
SquareLattice.c:  if (strcmp(StdI->model, "spin") == 0 ) {
SquareLattice.c:    ntransMax = StdI->nsite * (StdI->S2 + 1/*h*/ + 2 * StdI->S2/*Gamma*/);
SquareLattice.c:    nintrMax = StdI->NCell * (StdI->NsiteUC/*D*/ + 2/*J*/ + 2/*J'*/)
SquareLattice.c:      * (3 * StdI->S2 + 1) * (3 * StdI->S2 + 1);
SquareLattice.c:    ntransMax = StdI->NCell * 2/*spin*/ * (2 * StdI->NsiteUC/*mu+h+Gamma*/ + 4/*t*/ + 4/*t'*/);
SquareLattice.c:    nintrMax = StdI->NCell * (StdI->NsiteUC/*U*/ + 4 * (2/*V*/ + 2/*V'*/));
SquareLattice.c:    if (strcmp(StdI->model, "kondo") == 0) {
SquareLattice.c:      ntransMax += StdI->nsite / 2 * (StdI->S2 + 1/*h*/ + 2 * StdI->S2/*Gamma*/);
SquareLattice.c:      nintrMax += StdI->nsite / 2 * (3 * StdI->S2 + 1) * (3 * StdI->S2 + 1);
SquareLattice.c:    }/*if (strcmp(StdI->model, "kondo") == 0)*/
SquareLattice.c:  for (kCell = 0; kCell < StdI->NCell; kCell++){
SquareLattice.c:    iW = StdI->Cell[kCell][0];
SquareLattice.c:    iL = StdI->Cell[kCell][1];
SquareLattice.c:    if (strcmp(StdI->model, "kondo") == 0 ) isite += StdI->NCell;
SquareLattice.c:    if (strcmp(StdI->model, "spin") == 0 ) {
SquareLattice.c:      StdFace_MagField(StdI, StdI->S2, -StdI->h, -StdI->Gamma, isite);
SquareLattice.c:      StdFace_GeneralJ(StdI, StdI->D, StdI->S2, StdI->S2, isite, isite);
SquareLattice.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
SquareLattice.c:      StdFace_HubbardLocal(StdI, StdI->mu, -StdI->h, -StdI->Gamma, StdI->U, isite);
SquareLattice.c:      if (strcmp(StdI->model, "kondo") == 0 ) {
SquareLattice.c:        StdFace_GeneralJ(StdI, StdI->J, 1, StdI->S2, isite, jsite);
SquareLattice.c:        StdFace_MagField(StdI, StdI->S2, -StdI->h, -StdI->Gamma, jsite);
SquareLattice.c:      }/*if (strcmp(StdI->model, "kondo") == 0 )*/
SquareLattice.c:    if (strcmp(StdI->model, "spin") == 0 ) {
SquareLattice.c:      StdFace_GeneralJ(StdI, StdI->J0, StdI->S2, StdI->S2, isite, jsite);
SquareLattice.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
SquareLattice.c:      StdFace_Hopping(StdI, Cphase * StdI->t0, isite, jsite, dR);
SquareLattice.c:      StdFace_Coulomb(StdI, StdI->V0, isite, jsite);
SquareLattice.c:    if (strcmp(StdI->model, "spin") == 0 ) {
SquareLattice.c:      StdFace_GeneralJ(StdI, StdI->J1, StdI->S2, StdI->S2, isite, jsite);
SquareLattice.c:      StdFace_Hopping(StdI, Cphase * StdI->t1, isite, jsite, dR);
SquareLattice.c:      StdFace_Coulomb(StdI, StdI->V1, isite, jsite);
SquareLattice.c:    if (strcmp(StdI->model, "spin") == 0 ) {
SquareLattice.c:      StdFace_GeneralJ(StdI, StdI->Jp, StdI->S2, StdI->S2, isite, jsite);
SquareLattice.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
SquareLattice.c:      StdFace_Hopping(StdI, Cphase * StdI->tp, isite, jsite, dR);
SquareLattice.c:      StdFace_Coulomb(StdI, StdI->Vp, isite, jsite);
SquareLattice.c:    if (strcmp(StdI->model, "spin") == 0 ) {
SquareLattice.c:      StdFace_GeneralJ(StdI, StdI->Jp, StdI->S2, StdI->S2, isite, jsite);
SquareLattice.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
SquareLattice.c:      StdFace_Hopping(StdI, Cphase * StdI->tp, isite, jsite, dR);
SquareLattice.c:      StdFace_Coulomb(StdI, StdI->Vp, isite, jsite);
SquareLattice.c:  }/*for (kCell = 0; kCell < StdI->NCell; kCell++)*/
StdFace_ModelUtil.c:  StdI->trans[StdI->ntrans] = trans0;
StdFace_ModelUtil.c:  StdI->transindx[StdI->ntrans][0] = isite;
StdFace_ModelUtil.c:  StdI->transindx[StdI->ntrans][1] = ispin;
StdFace_ModelUtil.c:  StdI->transindx[StdI->ntrans][2] = jsite; 
StdFace_ModelUtil.c:  StdI->transindx[StdI->ntrans][3] = jspin;
StdFace_ModelUtil.c:  StdI->ntrans = StdI->ntrans + 1;
StdFace_ModelUtil.c:  if (strcmp(StdI->method, "timeevolution") == 0 && StdI->PumpBody == 1) {
StdFace_ModelUtil.c:    for (it = 0; it < StdI->Lanczos_max; it++) {
StdFace_ModelUtil.c:      for (ii = 0; ii < 3; ii++) Cphase += /*2.0*StdI->pi */ StdI->At[it][ii] * dR[ii];
StdFace_ModelUtil.c:        StdI->pump[it][StdI->npump[it]] = coef * trans0;
StdFace_ModelUtil.c:        StdI->pumpindx[it][StdI->npump[it]][0] = isite;
StdFace_ModelUtil.c:        StdI->pumpindx[it][StdI->npump[it]][1] = ispin;
StdFace_ModelUtil.c:        StdI->pumpindx[it][StdI->npump[it]][2] = jsite;
StdFace_ModelUtil.c:        StdI->pumpindx[it][StdI->npump[it]][3] = ispin;
StdFace_ModelUtil.c:        StdI->npump[it] = StdI->npump[it] + 1;
StdFace_ModelUtil.c:        StdI->pump[it][StdI->npump[it]] = conj(coef * trans0);
StdFace_ModelUtil.c:        StdI->pumpindx[it][StdI->npump[it]][0] = jsite;
StdFace_ModelUtil.c:        StdI->pumpindx[it][StdI->npump[it]][1] = ispin;
StdFace_ModelUtil.c:        StdI->pumpindx[it][StdI->npump[it]][2] = isite;
StdFace_ModelUtil.c:        StdI->pumpindx[it][StdI->npump[it]][3] = ispin;
StdFace_ModelUtil.c:        StdI->npump[it] = StdI->npump[it] + 1;
StdFace_ModelUtil.c:    }/*for (it = 0; it < StdI->Lanczos_max; it++)*/
StdFace_ModelUtil.c:  }/*if (strcmp(StdI->method, "timeevolution") == 0)*/
StdFace_ModelUtil.c:  StdI->Cintra[StdI->NCintra] = U0;
StdFace_ModelUtil.c:  StdI->CintraIndx[StdI->NCintra][0] = isite;
StdFace_ModelUtil.c:  StdI->NCintra += 1;
StdFace_ModelUtil.c:  StdI->intr[StdI->nintr] = intr0;
StdFace_ModelUtil.c:  StdI->intrindx[StdI->nintr][0] = site1; StdI->intrindx[StdI->nintr][1] = spin1;
StdFace_ModelUtil.c:  StdI->intrindx[StdI->nintr][2] = site2; StdI->intrindx[StdI->nintr][3] = spin2;
StdFace_ModelUtil.c:  StdI->intrindx[StdI->nintr][4] = site3; StdI->intrindx[StdI->nintr][5] = spin3;
StdFace_ModelUtil.c:  StdI->intrindx[StdI->nintr][6] = site4; StdI->intrindx[StdI->nintr][7] = spin4;
StdFace_ModelUtil.c:  StdI->nintr = StdI->nintr + 1;
StdFace_ModelUtil.c:    StdI->Hund[StdI->NHund] = -0.5 * J[2][2];
StdFace_ModelUtil.c:    StdI->HundIndx[StdI->NHund][0] = isite;
StdFace_ModelUtil.c:    StdI->HundIndx[StdI->NHund][1] = jsite;
StdFace_ModelUtil.c:    StdI->NHund += 1;
StdFace_ModelUtil.c:    StdI->Cinter[StdI->NCinter] = -0.25 * J[2][2];
StdFace_ModelUtil.c:    StdI->CinterIndx[StdI->NCinter][0] = isite;
StdFace_ModelUtil.c:    StdI->CinterIndx[StdI->NCinter][1] = jsite;
StdFace_ModelUtil.c:    StdI->NCinter += 1;
StdFace_ModelUtil.c:      StdI->Ex[StdI->NEx] = - 0.25 * (J[0][0] + J[1][1]);
StdFace_ModelUtil.c:      if (strcmp(StdI->model, "kondo") == 0)
StdFace_ModelUtil.c:        StdI->Ex[StdI->NEx] = -0.25 * (J[0][0] + J[1][1]);
StdFace_ModelUtil.c:        StdI->Ex[StdI->NEx] = 0.25 * (J[0][0] + J[1][1]);
StdFace_ModelUtil.c:      StdI->ExIndx[StdI->NEx][0] = isite;
StdFace_ModelUtil.c:      StdI->ExIndx[StdI->NEx][1] = jsite;
StdFace_ModelUtil.c:      StdI->NEx += 1;
StdFace_ModelUtil.c:      StdI->PairLift[StdI->NPairLift] = 0.25 * (J[0][0] - J[1][1]);
StdFace_ModelUtil.c:      StdI->PLIndx[StdI->NPairLift][0] = isite;
StdFace_ModelUtil.c:      StdI->PLIndx[StdI->NPairLift][1] = jsite;
StdFace_ModelUtil.c:      StdI->NPairLift += 1;
StdFace_ModelUtil.c:  StdI->Cinter[StdI->NCinter] = V;
StdFace_ModelUtil.c:  StdI->CinterIndx[StdI->NCinter][0] = isite;
StdFace_ModelUtil.c:  StdI->CinterIndx[StdI->NCinter][1] = jsite;
StdFace_ModelUtil.c:  StdI->NCinter += 1;
StdFace_ModelUtil.c:    for (jj = 0; jj < 3; jj++)iCellV_frac[ii] += StdI->rbox[ii][jj] * iCellV[jj];
StdFace_ModelUtil.c:    nBox[ii] = (iCellV_frac[ii] + StdI->NCell * 1000) / StdI->NCell - 1000;
StdFace_ModelUtil.c:    iCellV_frac[ii] -= StdI->NCell*(nBox[ii]);
StdFace_ModelUtil.c:    for (jj = 0; jj < 3; jj++) iCellV_fold[ii] += StdI->box[jj][ii] * iCellV_frac[jj];
StdFace_ModelUtil.c:    iCellV_fold[ii] = (iCellV_fold[ii] + StdI->NCell * 1000) / StdI->NCell - 1000;
StdFace_ModelUtil.c:    (StdI->L != StdI->NaN_i || StdI->W != StdI->NaN_i || StdI->Height != StdI->NaN_i)
StdFace_ModelUtil.c:    (StdI->box[0][0] != StdI->NaN_i || StdI->box[0][1] != StdI->NaN_i || StdI->box[0][2] != StdI->NaN_i ||
StdFace_ModelUtil.c:     StdI->box[1][0] != StdI->NaN_i || StdI->box[1][1] != StdI->NaN_i || StdI->box[1][2] != StdI->NaN_i ||
StdFace_ModelUtil.c:     StdI->box[2][0] != StdI->NaN_i || StdI->box[2][1] != StdI->NaN_i || StdI->box[2][2] != StdI->NaN_i)
StdFace_ModelUtil.c:  else if (StdI->L != StdI->NaN_i || StdI->W != StdI->NaN_i || StdI->Height != StdI->NaN_i)
StdFace_ModelUtil.c:    StdFace_PrintVal_i("L", &StdI->L, 1);
StdFace_ModelUtil.c:    StdFace_PrintVal_i("W", &StdI->W, 1);
StdFace_ModelUtil.c:    StdFace_PrintVal_i("Height", &StdI->Height, 1);
StdFace_ModelUtil.c:      StdI->box[ii][jj] = 0;
StdFace_ModelUtil.c:    StdI->box[0][0] = StdI->W;
StdFace_ModelUtil.c:    StdI->box[1][1] = StdI->L;
StdFace_ModelUtil.c:    StdI->box[2][2] = StdI->Height;
StdFace_ModelUtil.c:    StdFace_PrintVal_i("a0W", &StdI->box[0][0], 1);
StdFace_ModelUtil.c:    StdFace_PrintVal_i("a0L", &StdI->box[0][1], 0);
StdFace_ModelUtil.c:    StdFace_PrintVal_i("a0H", &StdI->box[0][2], 0);
StdFace_ModelUtil.c:    StdFace_PrintVal_i("a1W", &StdI->box[1][0], 0);
StdFace_ModelUtil.c:    StdFace_PrintVal_i("a1L", &StdI->box[1][1], 1);
StdFace_ModelUtil.c:    StdFace_PrintVal_i("a1H", &StdI->box[1][2], 0);
StdFace_ModelUtil.c:    StdFace_PrintVal_i("a2W", &StdI->box[2][0], 0);
StdFace_ModelUtil.c:    StdFace_PrintVal_i("a2L", &StdI->box[2][1], 0);
StdFace_ModelUtil.c:    StdFace_PrintVal_i("a2H", &StdI->box[2][2], 1);
StdFace_ModelUtil.c:    StdI->direct[0][2] = 0.0;
StdFace_ModelUtil.c:    StdI->direct[1][2] = 0.0;
StdFace_ModelUtil.c:    StdI->direct[2][0] = 0.0;
StdFace_ModelUtil.c:    StdI->direct[2][1] = 0.0;
StdFace_ModelUtil.c:    StdI->direct[2][2] = 1.0;
StdFace_ModelUtil.c:  if (dim == 2) StdI->phase[2] = 0.0;
StdFace_ModelUtil.c:    StdI->ExpPhase[ii] = cos(StdI->pi180 * StdI->phase[ii]) + I*sin(StdI->pi180 * StdI->phase[ii]);
StdFace_ModelUtil.c:    if (cabs(StdI->ExpPhase[ii] + 1.0) < 0.000001) StdI->AntiPeriod[ii] = 1;
StdFace_ModelUtil.c:    else StdI->AntiPeriod[ii] = 0;
StdFace_ModelUtil.c:  StdI->tau = (double **)malloc(sizeof(double*) * StdI->NsiteUC);
StdFace_ModelUtil.c:  for (ii = 0; ii < StdI->NsiteUC; ii++) {
StdFace_ModelUtil.c:    StdI->tau[ii] = (double *)malloc(sizeof(double) * 3);
StdFace_ModelUtil.c:  StdI->NCell = 0;
StdFace_ModelUtil.c:    StdI->NCell += StdI->box[0][ii]
StdFace_ModelUtil.c:      * StdI->box[1][(ii + 1) % 3]
StdFace_ModelUtil.c:      * StdI->box[2][(ii + 2) % 3]
StdFace_ModelUtil.c:      - StdI->box[0][ii]
StdFace_ModelUtil.c:      * StdI->box[1][(ii + 2) % 3]
StdFace_ModelUtil.c:      * StdI->box[2][(ii + 1) % 3];
StdFace_ModelUtil.c:  printf("   Number of Cell = %d\n", abs(StdI->NCell));
StdFace_ModelUtil.c:  if (StdI->NCell == 0) {
StdFace_ModelUtil.c:      StdI->rbox[ii][jj] = StdI->box[(ii + 1) % 3][(jj + 1) % 3] * StdI->box[(ii + 2) % 3][(jj + 2) % 3]
StdFace_ModelUtil.c:                         - StdI->box[(ii + 1) % 3][(jj + 2) % 3] * StdI->box[(ii + 2) % 3][(jj + 1) % 3];
StdFace_ModelUtil.c:  if (StdI->NCell < 0) {
StdFace_ModelUtil.c:        StdI->rbox[ii][jj] *= -1;
StdFace_ModelUtil.c:    StdI->NCell *= -1;
StdFace_ModelUtil.c:  }/*if (StdI->NCell < 0)*/
StdFace_ModelUtil.c:          for (jj = 0; jj < 3; jj++) edge += nBox[jj] * StdI->box[jj][ii];
StdFace_ModelUtil.c:  StdI->Cell = (int **)malloc(sizeof(int*) * StdI->NCell);
StdFace_ModelUtil.c:  for (ii = 0; ii < StdI->NCell; ii++) {
StdFace_ModelUtil.c:    StdI->Cell[ii] = (int *)malloc(sizeof(int) * 3);
StdFace_ModelUtil.c:  }/*for (ii = 0; ii < StdI->NCell; ii++)*/
StdFace_ModelUtil.c:            StdI->Cell[jj][ii] = iCellV[ii];
StdFace_ModelUtil.c:    pos[1][0] = StdI->direct[0][0] * (double)StdI->box[0][0] + StdI->direct[1][0] * (double)StdI->box[0][1];
StdFace_ModelUtil.c:    pos[1][1] = StdI->direct[0][1] * (double)StdI->box[0][0] + StdI->direct[1][1] * (double)StdI->box[0][1];
StdFace_ModelUtil.c:    pos[2][0] = StdI->direct[0][0] * (double)StdI->box[1][0] + StdI->direct[1][0] * (double)StdI->box[1][1];
StdFace_ModelUtil.c:    pos[2][1] = StdI->direct[0][1] * (double)StdI->box[1][0] + StdI->direct[1][1] * (double)StdI->box[1][1];
StdFace_ModelUtil.c:  dR[0] = - (double)diW + StdI->tau[isiteUC][0] - StdI->tau[jsiteUC][0];
StdFace_ModelUtil.c:  dR[1] = - (double)diL + StdI->tau[isiteUC][1] - StdI->tau[jsiteUC][1];
StdFace_ModelUtil.c:  dR[2] = - (double)diH + StdI->tau[isiteUC][2] - StdI->tau[jsiteUC][2];
StdFace_ModelUtil.c:  for (ii = 0; ii < 3; ii++) *Cphase *= cpow(StdI->ExpPhase[ii], (double)nBox[ii]);
StdFace_ModelUtil.c:  for (kCell = 0; kCell < StdI->NCell; kCell++) {
StdFace_ModelUtil.c:    if (jCellV[0] == StdI->Cell[kCell][0] &&
StdFace_ModelUtil.c:        jCellV[1] == StdI->Cell[kCell][1] &&
StdFace_ModelUtil.c:        jCellV[2] == StdI->Cell[kCell][2]) 
StdFace_ModelUtil.c:    if (iW == StdI->Cell[kCell][0] &&
StdFace_ModelUtil.c:        iL == StdI->Cell[kCell][1] &&
StdFace_ModelUtil.c:        iH == StdI->Cell[kCell][2])
StdFace_ModelUtil.c:  }/*for (iCell = 0; iCell < StdI->NCell; iCell++)*/
StdFace_ModelUtil.c:  *isite = iCell * StdI->NsiteUC + isiteUC;
StdFace_ModelUtil.c:  *jsite = jCell * StdI->NsiteUC + jsiteUC;
StdFace_ModelUtil.c:  if (strcmp(StdI->model, "kondo") == 0) {
StdFace_ModelUtil.c:    *isite += StdI->NCell * StdI->NsiteUC;
StdFace_ModelUtil.c:    *jsite += StdI->NCell * StdI->NsiteUC;
StdFace_ModelUtil.c:  xi = StdI->direct[0][0] * ((double)iW + StdI->tau[jsiteUC][0])
StdFace_ModelUtil.c:     + StdI->direct[1][0] * ((double)iL + StdI->tau[jsiteUC][1]);
StdFace_ModelUtil.c:  yi = StdI->direct[0][1] * ((double)iW + StdI->tau[jsiteUC][0])
StdFace_ModelUtil.c:     + StdI->direct[1][1] * ((double)iL + StdI->tau[jsiteUC][1]);
StdFace_ModelUtil.c:  xj = StdI->direct[0][0] * ((double)(iW - diW) + StdI->tau[isiteUC][0])
StdFace_ModelUtil.c:     + StdI->direct[1][0] * ((double)(iL - diL) + StdI->tau[isiteUC][1]);
StdFace_ModelUtil.c:  yj = StdI->direct[0][1] * ((double)(iW - diW) + StdI->tau[isiteUC][0])
StdFace_ModelUtil.c:     + StdI->direct[1][1] * ((double)(iL - diL) + StdI->tau[isiteUC][1]);
StdFace_ModelUtil.c:  xi = StdI->direct[1][0] * ((double)iL + StdI->tau[isiteUC][1])
StdFace_ModelUtil.c:     + StdI->direct[0][0] * ((double)iW + StdI->tau[isiteUC][0]);
StdFace_ModelUtil.c:  yi = StdI->direct[1][1] * ((double)iL + StdI->tau[isiteUC][1])
StdFace_ModelUtil.c:     + StdI->direct[0][1] * ((double)iW + StdI->tau[isiteUC][0]);
StdFace_ModelUtil.c:  xj = StdI->direct[0][0] * ((double)(iW + diW) + StdI->tau[jsiteUC][0])
StdFace_ModelUtil.c:     + StdI->direct[1][0] * ((double)(iL + diL) + StdI->tau[jsiteUC][1]);
StdFace_ModelUtil.c:  yj = StdI->direct[0][1] * ((double)(iW + diW) + StdI->tau[jsiteUC][0])
StdFace_ModelUtil.c:     + StdI->direct[1][1] * ((double)(iL + diL) + StdI->tau[jsiteUC][1]);
StdFace_ModelUtil.c:        vec[jj] += (double)StdI->box[ii][kk] * StdI->direct[kk][jj];
StdFace_ModelUtil.c:  fprintf(fp, "%d 1\n", StdI->NCell * StdI->NsiteUC);
StdFace_ModelUtil.c:  for (iCell = 0; iCell < StdI->NCell; iCell++) {
StdFace_ModelUtil.c:    for (isite = 0; isite < StdI->NsiteUC; isite++) {
StdFace_ModelUtil.c:          vec[jj] += ((double)StdI->Cell[iCell][kk] + StdI->tau[isite][kk])
StdFace_ModelUtil.c:          * StdI->direct[kk][jj];
StdFace_ModelUtil.c:  if (isnan(StdI->JAll) == 0 && isnan(J0All)  == 0) {
StdFace_ModelUtil.c:      if (isnan(StdI->JAll) == 0 && isnan(StdI->J[i1][i2]) == 0) {
StdFace_ModelUtil.c:      else if (isnan(J0All) == 0 && isnan(StdI->J[i1][i2]) == 0) {
StdFace_ModelUtil.c:      else if (isnan(J0[i1][i2]) == 0 && isnan(StdI->JAll) == 0) {
StdFace_ModelUtil.c:          if (isnan(J0[i1][i2]) == 0 && isnan(StdI->J[i3][i4]) == 0) {
StdFace_ModelUtil.c:      else if (isnan(StdI->J[i1][i2]) == 0) {
StdFace_ModelUtil.c:        J0[i1][i2] = StdI->J[i1][i2];
StdFace_ModelUtil.c:      else if (i1 == i2 && isnan(StdI->JAll) == 0) {
StdFace_ModelUtil.c:        J0[i1][i2] = StdI->JAll;
StdFace_ModelUtil.c:  if (isnan(StdI->V) == 0 && isnan(*V0) == 0) {
StdFace_ModelUtil.c:  else if (isnan(StdI->V) == 0) {
StdFace_ModelUtil.c:    *V0 = StdI->V;
StdFace_ModelUtil.c:  if (isnan(creal(StdI->t)) == 0 && isnan(creal(*t0)) == 0) {
StdFace_ModelUtil.c:  else if (isnan(creal(StdI->t)) == 0) {
StdFace_ModelUtil.c:    *t0 = StdI->t;
StdFace_ModelUtil.c:      StdI->direct[ii][0], StdI->direct[ii][1], StdI->direct[ii][2]);
StdFace_ModelUtil.c:    StdI->phase[0], StdI->phase[1], StdI->phase[2]);
StdFace_ModelUtil.c:      StdI->box[ii][0], StdI->box[ii][1], StdI->box[ii][2]);
StdFace_ModelUtil.c:  for (iCell = 0; iCell < StdI->NCell; iCell++) {
StdFace_ModelUtil.c:    for (isite = 0; isite < StdI->NsiteUC; isite++) {
StdFace_ModelUtil.c:        StdI->Cell[iCell][0] - StdI->Cell[0][0],
StdFace_ModelUtil.c:        StdI->Cell[iCell][1] - StdI->Cell[0][1],
StdFace_ModelUtil.c:        StdI->Cell[iCell][2] - StdI->Cell[0][2],
StdFace_ModelUtil.c:    }/*for (isite = 0; isite < StdI->NsiteUC; isite++)*/
StdFace_ModelUtil.c:  }/* for (iCell = 0; iCell < StdI->NCell; iCell++)*/
StdFace_ModelUtil.c:  if (strcmp(StdI->model, "kondo") == 0) {
StdFace_ModelUtil.c:    for (iCell = 0; iCell < StdI->NCell; iCell++) {
StdFace_ModelUtil.c:      for (isite = 0; isite < StdI->NsiteUC; isite++) {
StdFace_ModelUtil.c:          StdI->Cell[iCell][0] - StdI->Cell[0][0],
StdFace_ModelUtil.c:          StdI->Cell[iCell][1] - StdI->Cell[0][1],
StdFace_ModelUtil.c:          StdI->Cell[iCell][2] - StdI->Cell[0][2],
StdFace_ModelUtil.c:          isite + StdI->NsiteUC);
StdFace_ModelUtil.c:      }/*for (isite = 0; isite < StdI->NsiteUC; isite++)*/
StdFace_ModelUtil.c:    }/* for (iCell = 0; iCell < StdI->NCell; iCell++)*/
StdFace_ModelUtil.c:  StdI->transindx = (int **)malloc(sizeof(int*) * ntransMax);
StdFace_ModelUtil.c:  StdI->trans = (double complex *)malloc(sizeof(double complex) * ntransMax);
StdFace_ModelUtil.c:    StdI->transindx[ii] = (int *)malloc(sizeof(int) * 4);
StdFace_ModelUtil.c:  StdI->ntrans = 0;
StdFace_ModelUtil.c:  if (strcmp(StdI->method, "timeevolution") == 0 && StdI->PumpBody == 1) {
StdFace_ModelUtil.c:    StdI->npump = (int *)malloc(sizeof(int) * StdI->Lanczos_max);
StdFace_ModelUtil.c:    StdI->pumpindx = (int ***)malloc(sizeof(int**) * StdI->Lanczos_max);
StdFace_ModelUtil.c:    StdI->pump = (double complex **)malloc(sizeof(double complex*) * StdI->Lanczos_max);
StdFace_ModelUtil.c:    for (it = 0; it < StdI->Lanczos_max; it++) {
StdFace_ModelUtil.c:      StdI->npump[it] = 0;
StdFace_ModelUtil.c:      StdI->pumpindx[it] = (int **)malloc(sizeof(int*) * ntransMax);
StdFace_ModelUtil.c:      StdI->pump[it] = (double complex *)malloc(sizeof(double complex) * ntransMax);
StdFace_ModelUtil.c:        StdI->pumpindx[it][ii] = (int *)malloc(sizeof(int) * 4);
StdFace_ModelUtil.c:    }/*for (it = 0; it < StdI->Lanczos_max;)*/
StdFace_ModelUtil.c:  }/*if (strcmp(StdI->method, "timeevolution") == 0*/
StdFace_ModelUtil.c:  StdI->intrindx = (int **)malloc(sizeof(int*) * nintrMax);
StdFace_ModelUtil.c:  StdI->intr = (double complex *)malloc(sizeof(double complex) * nintrMax);
StdFace_ModelUtil.c:    StdI->intrindx[ii] = (int *)malloc(sizeof(int) * 8);
StdFace_ModelUtil.c:  StdI->nintr = 0;
StdFace_ModelUtil.c:  StdI->CintraIndx = (int **)malloc(sizeof(int*) * nintrMax);
StdFace_ModelUtil.c:  StdI->Cintra = (double *)malloc(sizeof(double) * nintrMax);
StdFace_ModelUtil.c:    StdI->CintraIndx[ii] = (int *)malloc(sizeof(int) * 1);
StdFace_ModelUtil.c:  StdI->NCintra = 0;
StdFace_ModelUtil.c:  StdI->CinterIndx = (int **)malloc(sizeof(int*) * nintrMax);
StdFace_ModelUtil.c:  StdI->Cinter = (double *)malloc(sizeof(double) * nintrMax);
StdFace_ModelUtil.c:    StdI->CinterIndx[ii] = (int *)malloc(sizeof(int) * 2);
StdFace_ModelUtil.c:  StdI->NCinter = 0;
StdFace_ModelUtil.c:  StdI->HundIndx = (int **)malloc(sizeof(int*) * nintrMax);
StdFace_ModelUtil.c:  StdI->Hund = (double *)malloc(sizeof(double) * nintrMax);
StdFace_ModelUtil.c:    StdI->HundIndx[ii] = (int *)malloc(sizeof(int) * 2);
StdFace_ModelUtil.c:  StdI->NHund = 0;
StdFace_ModelUtil.c:  StdI->ExIndx = (int **)malloc(sizeof(int*) * nintrMax);
StdFace_ModelUtil.c:  StdI->Ex = (double *)malloc(sizeof(double) * nintrMax);
StdFace_ModelUtil.c:    StdI->ExIndx[ii] = (int *)malloc(sizeof(int) * 2);
StdFace_ModelUtil.c:  StdI->NEx = 0;
StdFace_ModelUtil.c:  StdI->PLIndx = (int **)malloc(sizeof(int*) * nintrMax);
StdFace_ModelUtil.c:  StdI->PairLift = (double *)malloc(sizeof(double) * nintrMax);
StdFace_ModelUtil.c:    StdI->PLIndx[ii] = (int *)malloc(sizeof(int) * 2);
StdFace_ModelUtil.c:  StdI->NPairLift = 0;
StdFace_ModelUtil.c:  StdI->PHIndx = (int **)malloc(sizeof(int*) * nintrMax);
StdFace_ModelUtil.c:  StdI->PairHopp = (double *)malloc(sizeof(double) * nintrMax);
StdFace_ModelUtil.c:    StdI->PHIndx[ii] = (int *)malloc(sizeof(int) * 2);
StdFace_ModelUtil.c:  StdI->NPairHopp = 0;
StdFace_ModelUtil.c:    for (jj = 0; jj < 3; jj++)iCellV_frac[ii] += StdI->rboxsub[ii][jj] * iCellV[jj];
StdFace_ModelUtil.c:    nBox[ii] = (iCellV_frac[ii] + StdI->NCellsub * 1000) / StdI->NCellsub - 1000;
StdFace_ModelUtil.c:    iCellV_frac[ii] -= StdI->NCellsub*(nBox[ii]);
StdFace_ModelUtil.c:    for (jj = 0; jj < 3; jj++) iCellV_fold[ii] += StdI->boxsub[jj][ii] * iCellV_frac[jj];
StdFace_ModelUtil.c:    iCellV_fold[ii] = (iCellV_fold[ii] + StdI->NCellsub * 1000) / StdI->NCellsub - 1000;
StdFace_ModelUtil.c:  Sym = (int **)malloc(sizeof(int*) * StdI->nsite);
StdFace_ModelUtil.c:  Anti = (int **)malloc(sizeof(int*) * StdI->nsite);
StdFace_ModelUtil.c:  for (jsite = 0; jsite < StdI->nsite; jsite++) {
StdFace_ModelUtil.c:    Sym[jsite] = (int *)malloc(sizeof(int) * StdI->nsite);
StdFace_ModelUtil.c:    Anti[jsite] = (int *)malloc(sizeof(int) * StdI->nsite);
StdFace_ModelUtil.c:  StdI->NSym = 0;
StdFace_ModelUtil.c:  for (iCell = 0; iCell < StdI->NCell; iCell++) {
StdFace_ModelUtil.c:    StdFace_FoldSiteSub(StdI, StdI->Cell[iCell], nBox, iCellV);
StdFace_ModelUtil.c:    if (iCellV[0] == StdI->Cell[iCell][0] && 
StdFace_ModelUtil.c:        iCellV[1] == StdI->Cell[iCell][1] && 
StdFace_ModelUtil.c:        iCellV[2] == StdI->Cell[iCell][2]) {
StdFace_ModelUtil.c:      for (jCell = 0; jCell < StdI->NCell; jCell++) {
StdFace_ModelUtil.c:        for (ii = 0; ii < 3; ii++)jCellV[ii] = StdI->Cell[jCell][ii] + iCellV[ii];
StdFace_ModelUtil.c:        for (kCell = 0; kCell < StdI->NCell; kCell++) {
StdFace_ModelUtil.c:          if (jCellV[0] == StdI->Cell[kCell][0] && 
StdFace_ModelUtil.c:              jCellV[1] == StdI->Cell[kCell][1] &&
StdFace_ModelUtil.c:              jCellV[2] == StdI->Cell[kCell][2]) 
StdFace_ModelUtil.c:            for (jsite = 0; jsite < StdI->NsiteUC; jsite++) {
StdFace_ModelUtil.c:              Sym[StdI->NSym][jCell*StdI->NsiteUC + jsite] = kCell*StdI->NsiteUC + jsite;
StdFace_ModelUtil.c:              Anti[StdI->NSym][jCell*StdI->NsiteUC + jsite]
StdFace_ModelUtil.c:                = StdI->AntiPeriod[0] * nBox[0]
StdFace_ModelUtil.c:                + StdI->AntiPeriod[1] * nBox[1]
StdFace_ModelUtil.c:                + StdI->AntiPeriod[2] * nBox[2];
StdFace_ModelUtil.c:              if (strcmp(StdI->model, "kondo") == 0) {
StdFace_ModelUtil.c:                Sym[StdI->NSym][StdI->nsite / 2 + jCell*StdI->NsiteUC + jsite] = StdI->nsite / 2 + kCell*StdI->NsiteUC + jsite;
StdFace_ModelUtil.c:                Anti[StdI->NSym][StdI->nsite / 2 + jCell*StdI->NsiteUC + jsite]
StdFace_ModelUtil.c:                  = StdI->AntiPeriod[0] * nBox[0]
StdFace_ModelUtil.c:                  + StdI->AntiPeriod[1] * nBox[1]
StdFace_ModelUtil.c:                  + StdI->AntiPeriod[2] * nBox[2];
StdFace_ModelUtil.c:              }/*if (strcmp(StdI->model, "kondo") == 0)*/
StdFace_ModelUtil.c:            }/*for (jsite = 0; jsite < StdI->NsiteUC; jsite++)*/
StdFace_ModelUtil.c:          }/*if (jWfold == StdI->Cell[kCell][0] && jLfold == StdI->Cell[kCell][1])*/
StdFace_ModelUtil.c:        }/*for (kCell = 0; kCell < StdI->NCell; kCell++)*/
StdFace_ModelUtil.c:      }/*for (jCell = 0; jCell < StdI->NCell; jCell++)*/
StdFace_ModelUtil.c:      StdI->NSym += 1;
StdFace_ModelUtil.c:  }/*for (iCell = 0; iCell < StdI->NCell; iCell++)*/
StdFace_ModelUtil.c:  fprintf(fp, "NQPTrans %10d\n", StdI->NSym);
StdFace_ModelUtil.c:  for (iSym = 0; iSym < StdI->NSym; iSym++) {
StdFace_ModelUtil.c:  for (iSym = 0; iSym < StdI->NSym; iSym++) {
StdFace_ModelUtil.c:    for (jsite = 0; jsite < StdI->nsite; jsite++) {
StdFace_ModelUtil.c:      if (StdI->AntiPeriod[0] == 1 || StdI->AntiPeriod[1] == 1 || StdI->AntiPeriod[2] == 1) {
StdFace_ModelUtil.c:  for (jsite = 0; jsite < StdI->nsite; jsite++) {
StdFace_ModelUtil.c:  if ((StdI->Lsub != StdI->NaN_i || StdI->Wsub != StdI->NaN_i || StdI->Hsub != StdI->NaN_i)
StdFace_ModelUtil.c:    && (StdI->boxsub[0][0] != StdI->NaN_i || StdI->boxsub[0][1] != StdI->NaN_i || StdI->boxsub[0][2] != StdI->NaN_i ||
StdFace_ModelUtil.c:        StdI->boxsub[1][0] != StdI->NaN_i || StdI->boxsub[1][1] != StdI->NaN_i || StdI->boxsub[1][2] != StdI->NaN_i ||
StdFace_ModelUtil.c:        StdI->boxsub[2][0] != StdI->NaN_i || StdI->boxsub[2][1] != StdI->NaN_i || StdI->boxsub[2][2] != StdI->NaN_i))
StdFace_ModelUtil.c:  else if (StdI->Wsub != StdI->NaN_i || StdI->Lsub != StdI->NaN_i || StdI->Hsub != StdI->NaN_i) {
StdFace_ModelUtil.c:    StdFace_PrintVal_i("Lsub", &StdI->Lsub, 1);
StdFace_ModelUtil.c:    StdFace_PrintVal_i("Wsub", &StdI->Wsub, 1);
StdFace_ModelUtil.c:    StdFace_PrintVal_i("Hsub", &StdI->Hsub, 1);
StdFace_ModelUtil.c:      StdI->boxsub[ii][jj] = 0;
StdFace_ModelUtil.c:    StdI->boxsub[0][0] = StdI->Wsub;
StdFace_ModelUtil.c:    StdI->boxsub[1][1] = StdI->Lsub;
StdFace_ModelUtil.c:    StdI->boxsub[2][2] = StdI->Hsub;
StdFace_ModelUtil.c:    StdFace_PrintVal_i("a0Wsub", &StdI->boxsub[0][0], StdI->box[0][0]);
StdFace_ModelUtil.c:    StdFace_PrintVal_i("a0Lsub", &StdI->boxsub[0][1], StdI->box[0][1]);
StdFace_ModelUtil.c:    StdFace_PrintVal_i("a0Hsub", &StdI->boxsub[0][2], StdI->box[0][2]);
StdFace_ModelUtil.c:    StdFace_PrintVal_i("a1Wsub", &StdI->boxsub[1][0], StdI->box[1][0]);
StdFace_ModelUtil.c:    StdFace_PrintVal_i("a1Lsub", &StdI->boxsub[1][1], StdI->box[1][1]);
StdFace_ModelUtil.c:    StdFace_PrintVal_i("a1Hsub", &StdI->boxsub[1][2], StdI->box[1][2]);
StdFace_ModelUtil.c:    StdFace_PrintVal_i("a2Wsub", &StdI->boxsub[2][0], StdI->box[2][0]);
StdFace_ModelUtil.c:    StdFace_PrintVal_i("a2Lsub", &StdI->boxsub[2][1], StdI->box[2][1]);
StdFace_ModelUtil.c:    StdFace_PrintVal_i("a2Hsub", &StdI->boxsub[2][2], StdI->box[2][2]);
StdFace_ModelUtil.c:  StdI->NCellsub = 0;
StdFace_ModelUtil.c:    StdI->NCellsub += StdI->boxsub[0][ii]
StdFace_ModelUtil.c:                    * StdI->boxsub[1][(ii + 1) % 3]
StdFace_ModelUtil.c:                    * StdI->boxsub[2][(ii + 2) % 3]
StdFace_ModelUtil.c:                    - StdI->boxsub[0][ii]
StdFace_ModelUtil.c:                    * StdI->boxsub[1][(ii + 2) % 3]
StdFace_ModelUtil.c:                    * StdI->boxsub[2][(ii + 1) % 3];
StdFace_ModelUtil.c:  printf("         Number of Cell in the sublattice: %d\n", abs(StdI->NCellsub));
StdFace_ModelUtil.c:  if (StdI->NCellsub == 0) {
StdFace_ModelUtil.c:      StdI->rboxsub[ii][jj] = StdI->boxsub[(ii + 1) % 3][(jj + 1) % 3] * StdI->boxsub[(ii + 2) % 3][(jj + 2) % 3]
StdFace_ModelUtil.c:                            - StdI->boxsub[(ii + 1) % 3][(jj + 2) % 3] * StdI->boxsub[(ii + 2) % 3][(jj + 1) % 3];
StdFace_ModelUtil.c:  if (StdI->NCellsub < 0) {
StdFace_ModelUtil.c:        StdI->rboxsub[ii][jj] *= -1;
StdFace_ModelUtil.c:    StdI->NCellsub *= -1;
StdFace_ModelUtil.c:  }/*if (StdI->NCell < 0)*/
StdFace_ModelUtil.c:      for (kk = 0; kk < 3; kk++) prod += StdI->rboxsub[ii][kk] * (double)StdI->box[jj][kk];
StdFace_ModelUtil.c:      if (prod % StdI->NCellsub != 0) {
StdFace_ModelUtil.c:      }/*if (prod % StdI->NCellsub != 0)*/
StdFace_ModelUtil.c:  StdI->Orb = (int **)malloc(sizeof(int*) * StdI->nsite);
StdFace_ModelUtil.c:  StdI->AntiOrb = (int **)malloc(sizeof(int*) * StdI->nsite);
StdFace_ModelUtil.c:  for (isite = 0; isite < StdI->nsite; isite++) {
StdFace_ModelUtil.c:    StdI->Orb[isite] = (int *)malloc(sizeof(int) * StdI->nsite);
StdFace_ModelUtil.c:    StdI->AntiOrb[isite] = (int *)malloc(sizeof(int) * StdI->nsite);
StdFace_ModelUtil.c:  CellDone = (int **)malloc(sizeof(int*) * StdI->NCell);
StdFace_ModelUtil.c:  for (iCell = 0; iCell < StdI->NCell; iCell++) {
StdFace_ModelUtil.c:    CellDone[iCell] = (int *)malloc(sizeof(int) * StdI->NCell);
StdFace_ModelUtil.c:    for (jCell = 0; jCell < StdI->NCell; jCell++) {
StdFace_ModelUtil.c:  for (iCell = 0; iCell < StdI->NCell; iCell++) {
StdFace_ModelUtil.c:    StdFace_FoldSiteSub(StdI, StdI->Cell[iCell], nBox, iCellV);
StdFace_ModelUtil.c:    for (kCell = 0; kCell < StdI->NCell; kCell++) {
StdFace_ModelUtil.c:      if (iCellV[0] == StdI->Cell[kCell][0] && 
StdFace_ModelUtil.c:          iCellV[1] == StdI->Cell[kCell][1] &&
StdFace_ModelUtil.c:          iCellV[2] == StdI->Cell[kCell][2]) 
StdFace_ModelUtil.c:    }/*for (kCell = 0; kCell < StdI->NCell; kCell++)*/
StdFace_ModelUtil.c:    for (jCell = 0; jCell < StdI->NCell; jCell++) {
StdFace_ModelUtil.c:        jCellV[ii] = StdI->Cell[jCell][ii] + iCellV[ii] - StdI->Cell[iCell][ii];
StdFace_ModelUtil.c:      for (kCell = 0; kCell < StdI->NCell; kCell++) {
StdFace_ModelUtil.c:        if (jCellV[0] == StdI->Cell[kCell][0] &&
StdFace_ModelUtil.c:            jCellV[1] == StdI->Cell[kCell][1] &&
StdFace_ModelUtil.c:            jCellV[2] == StdI->Cell[kCell][2]) 
StdFace_ModelUtil.c:      }/*for (kCell = 0; kCell < StdI->NCell; kCell++)*/
StdFace_ModelUtil.c:        dCellV[ii] = StdI->Cell[jCell][ii] - StdI->Cell[iCell][ii];
StdFace_ModelUtil.c:      for (ii = 0; ii < 3; ii++)Anti += StdI->AntiPeriod[ii] * nBox[ii];
StdFace_ModelUtil.c:      for (isite = 0; isite < StdI->NsiteUC; isite++) {
StdFace_ModelUtil.c:        for (jsite = 0; jsite < StdI->NsiteUC; jsite++) {
StdFace_ModelUtil.c:            StdI->Orb[iCell2*StdI->NsiteUC + isite][jCell2*StdI->NsiteUC + jsite] = iOrb;
StdFace_ModelUtil.c:            StdI->AntiOrb[iCell2*StdI->NsiteUC + isite][jCell2*StdI->NsiteUC + jsite] = Anti;
StdFace_ModelUtil.c:          StdI->Orb[iCell*StdI->NsiteUC + isite][jCell*StdI->NsiteUC + jsite]
StdFace_ModelUtil.c:            = StdI->Orb[iCell2*StdI->NsiteUC + isite][jCell2*StdI->NsiteUC + jsite];
StdFace_ModelUtil.c:          StdI->AntiOrb[iCell*StdI->NsiteUC + isite][jCell*StdI->NsiteUC + jsite] = Anti;
StdFace_ModelUtil.c:          if (strcmp(StdI->model, "kondo") == 0) {
StdFace_ModelUtil.c:              StdI->Orb[StdI->nsite / 2 + iCell2*StdI->NsiteUC + isite]
StdFace_ModelUtil.c:                       [                  jCell2*StdI->NsiteUC + jsite] = iOrb;
StdFace_ModelUtil.c:              StdI->AntiOrb[StdI->nsite / 2 + iCell2*StdI->NsiteUC + isite]
StdFace_ModelUtil.c:                           [                  jCell2*StdI->NsiteUC + jsite] = Anti;
StdFace_ModelUtil.c:              StdI->Orb[                  iCell2*StdI->NsiteUC + isite]
StdFace_ModelUtil.c:                       [StdI->nsite / 2 + jCell2*StdI->NsiteUC + jsite] = iOrb;
StdFace_ModelUtil.c:              StdI->AntiOrb[                  iCell2*StdI->NsiteUC + isite]
StdFace_ModelUtil.c:                           [StdI->nsite / 2 + jCell2*StdI->NsiteUC + jsite] = Anti;
StdFace_ModelUtil.c:              StdI->Orb[StdI->nsite / 2 + iCell2*StdI->NsiteUC + isite]
StdFace_ModelUtil.c:                       [StdI->nsite / 2 + jCell2*StdI->NsiteUC + jsite] = iOrb;
StdFace_ModelUtil.c:              StdI->AntiOrb[StdI->nsite / 2 + iCell2*StdI->NsiteUC + isite]
StdFace_ModelUtil.c:                           [StdI->nsite / 2 + jCell2*StdI->NsiteUC + jsite] = Anti;
StdFace_ModelUtil.c:            StdI->Orb[StdI->nsite / 2 + iCell*StdI->NsiteUC + isite]
StdFace_ModelUtil.c:                     [                  jCell*StdI->NsiteUC + jsite]
StdFace_ModelUtil.c:            = StdI->Orb[StdI->nsite / 2 + iCell2*StdI->NsiteUC + isite]
StdFace_ModelUtil.c:                       [                  jCell2*StdI->NsiteUC + jsite];
StdFace_ModelUtil.c:            StdI->AntiOrb[StdI->nsite / 2 + iCell*StdI->NsiteUC + isite]
StdFace_ModelUtil.c:                         [                  jCell*StdI->NsiteUC + jsite] = Anti;
StdFace_ModelUtil.c:            StdI->Orb[                  iCell*StdI->NsiteUC + isite]
StdFace_ModelUtil.c:                     [StdI->nsite / 2 + jCell*StdI->NsiteUC + jsite]
StdFace_ModelUtil.c:            = StdI->Orb[                  iCell2*StdI->NsiteUC + isite]
StdFace_ModelUtil.c:                       [StdI->nsite / 2 + jCell2*StdI->NsiteUC + jsite];
StdFace_ModelUtil.c:            StdI->AntiOrb[iCell*StdI->NsiteUC + isite]
StdFace_ModelUtil.c:                         [StdI->nsite / 2 + jCell*StdI->NsiteUC + jsite] = Anti;
StdFace_ModelUtil.c:            StdI->Orb[StdI->nsite / 2 + iCell*StdI->NsiteUC + isite]
StdFace_ModelUtil.c:                     [StdI->nsite / 2 + jCell*StdI->NsiteUC + jsite]
StdFace_ModelUtil.c:              = StdI->Orb[StdI->nsite / 2 + iCell2*StdI->NsiteUC + isite]
StdFace_ModelUtil.c:                         [StdI->nsite / 2 + jCell2*StdI->NsiteUC + jsite];
StdFace_ModelUtil.c:              StdI->AntiOrb[StdI->nsite / 2 + iCell*StdI->NsiteUC + isite]
StdFace_ModelUtil.c:                           [StdI->nsite / 2 + jCell*StdI->NsiteUC + jsite] = Anti;
StdFace_ModelUtil.c:          }/*if (strcmp(StdI->model, "kondo") == 0)*/
StdFace_ModelUtil.c:        }/*for (jsite = 0; jsite < StdI->NsiteUC; jsite++)*/
StdFace_ModelUtil.c:      }/*for (isite = 0; isite < StdI->NsiteUC; isite++)*/
StdFace_ModelUtil.c:    }/*for (jCell = 0; jCell < StdI->NCell; jCell++)*/
StdFace_ModelUtil.c:  }/*for (iCell = 0; iCell < StdI->NCell; iCell++)*/
StdFace_ModelUtil.c:  StdI->NOrb = iOrb;
StdFace_ModelUtil.c:  for (iCell = 0; iCell < StdI->NCell; iCell++) free(CellDone[iCell]);
StdFace_ModelUtil.c:  Jastrow = (int **)malloc(sizeof(int*) * StdI->nsite);
StdFace_ModelUtil.c:  for (isite = 0; isite < StdI->nsite; isite++) 
StdFace_ModelUtil.c:    Jastrow[isite] = (int *)malloc(sizeof(int) * StdI->nsite);
StdFace_ModelUtil.c:  if (abs(StdI->NMPTrans) == 1 || StdI->NMPTrans == StdI->NaN_i) {
StdFace_ModelUtil.c:    for (isite = 0; isite < StdI->nsite; isite++) {
StdFace_ModelUtil.c:      for (jsite = 0; jsite < StdI->nsite; jsite++) {
StdFace_ModelUtil.c:        Jastrow[isite][jsite] = StdI->Orb[isite][jsite];
StdFace_ModelUtil.c:    }/*for (isite = 0; isite < StdI->nsite; isite++)*/
StdFace_ModelUtil.c:    for (iorb = 0; iorb < StdI->NOrb; iorb++) {
StdFace_ModelUtil.c:      for (isite = 0; isite < StdI->nsite; isite++) {
StdFace_ModelUtil.c:        for (jsite = 0; jsite < StdI->nsite; jsite++) {
StdFace_ModelUtil.c:      }/*for (isite = 0; isite < StdI->nsite; isite++)*/
StdFace_ModelUtil.c:    }/*for (iorb = 0; iorb < StdI->NOrb; iorb++)*/
StdFace_ModelUtil.c:    if (strcmp(StdI->model, "hubbard") == 0) NJastrow = 0;
StdFace_ModelUtil.c:    for (isite = 0; isite < StdI->nsite; isite++) {
StdFace_ModelUtil.c:      if (StdI->locspinflag[isite] != 0) {
StdFace_ModelUtil.c:        for (jsite = 0; jsite < StdI->nsite; jsite++) {
StdFace_ModelUtil.c:          for (isite1 = 0; isite1 < StdI->nsite; isite1++) {
StdFace_ModelUtil.c:            for (jsite1 = 0; jsite1 < StdI->nsite; jsite1++) {
StdFace_ModelUtil.c:            }/*for (jsite1 = 0; jsite1 < StdI->nsite; jsite1++)*/
StdFace_ModelUtil.c:          }/*for (isite1 = 0; isite1 < StdI->nsite; isite1++)*/
StdFace_ModelUtil.c:    }/*for (isite = 0; isite < StdI->nsite; isite++)*/
StdFace_ModelUtil.c:    for (isite = 0; isite < StdI->nsite; isite++) {
StdFace_ModelUtil.c:      for (jsite = 0; jsite < StdI->nsite; jsite++) {
StdFace_ModelUtil.c:    }/*for (isite = 0; isite < StdI->nsite; isite++)*/
StdFace_ModelUtil.c:  }/*if (abs(StdI->NMPTrans) == 1)*/
StdFace_ModelUtil.c:    if (strcmp(StdI->model, "spin") == 0) {
StdFace_ModelUtil.c:      for (isite = 0; isite < StdI->nsite; isite++) {
StdFace_ModelUtil.c:        for (jsite = 0; jsite < StdI->nsite; jsite++) {
StdFace_ModelUtil.c:        }/*for (jsite = 0; jsite < StdI->nsite; jsite++)*/
StdFace_ModelUtil.c:      }/*for (isite = 0; isite < StdI->nsite; isite++)*/
StdFace_ModelUtil.c:    }/*if (strcmp(StdI->model, "spin") == 0)*/
StdFace_ModelUtil.c:      if (strcmp(StdI->model, "kondo") == 0) {
StdFace_ModelUtil.c:        for (isite = 0; isite < StdI->nsite; isite++) {
StdFace_ModelUtil.c:          for (jsite = 0; jsite < StdI->nsite / 2; jsite++) {
StdFace_ModelUtil.c:          }/*for (jsite = 0; jsite < StdI->nsite; jsite++)*/
StdFace_ModelUtil.c:        }/*for (isite = 0; isite < StdI->nsite; isite++)*/
StdFace_ModelUtil.c:      }/*if (strcmp(StdI->model, "kondo") == 0)*/
StdFace_ModelUtil.c:      for (dCell = 0; dCell < StdI->NCell; dCell++) {
StdFace_ModelUtil.c:          -StdI->Cell[dCell][0], -StdI->Cell[dCell][1], -StdI->Cell[dCell][2],
StdFace_ModelUtil.c:        if (strcmp(StdI->model, "kondo") == 0) jsite += -StdI->NCell * StdI->NsiteUC;
StdFace_ModelUtil.c:        iCell = jsite / StdI->NsiteUC;
StdFace_ModelUtil.c:        for (isiteUC = 0; isiteUC < StdI->NsiteUC; isiteUC++) {
StdFace_ModelUtil.c:          for (jsiteUC = 0; jsiteUC < StdI->NsiteUC; jsiteUC++) {
StdFace_ModelUtil.c:              StdI->Cell[dCell][0] == 0 &&
StdFace_ModelUtil.c:              StdI->Cell[dCell][1] == 0 &&
StdFace_ModelUtil.c:              StdI->Cell[dCell][2] == 0) continue;/*Diagonal*/
StdFace_ModelUtil.c:            for (iCell = 0; iCell < StdI->NCell; iCell++) {
StdFace_ModelUtil.c:                StdI->Cell[iCell][0], StdI->Cell[iCell][1], StdI->Cell[iCell][2],
StdFace_ModelUtil.c:                StdI->Cell[dCell][0], StdI->Cell[dCell][1], StdI->Cell[dCell][2],
StdFace_ModelUtil.c:            }/*for (iCell = 0; iCell < StdI->NCell; iCell++)*/
StdFace_ModelUtil.c:          }/*for (jsiteUC = 0; jsiteUC < StdI->NsiteUC; jsiteUC++)*/
StdFace_ModelUtil.c:        }/*for (isiteUC = 0; isiteUC < StdI->NsiteUC; isiteUC++)*/
StdFace_ModelUtil.c:      }/*for (dCell = 0; dCell < StdI->NCell; dCell++)*/
StdFace_ModelUtil.c:    }/*if (strcmp(StdI->model, "spin") != 0)*/
StdFace_ModelUtil.c:  }/*if (abs(StdI->NMPTrans) != 1)*/
StdFace_ModelUtil.c:  for (isite = 0; isite < StdI->nsite; isite++) {
StdFace_ModelUtil.c:    for (jsite = 0; jsite < StdI->nsite; jsite++) {
StdFace_ModelUtil.c:  }/*for (isite = 0; isite < StdI->nsite; isite++)*/
StdFace_ModelUtil.c:    if (strcmp(StdI->model, "hubbard") == 0 || iJastrow > 0)
StdFace_ModelUtil.c:  for (isite = 0; isite < StdI->nsite; isite++) free(Jastrow[isite]);
StdFace_main.c:  for (ktrans = 0; ktrans < StdI->ntrans; ktrans++) {
StdFace_main.c:    LargeValue0 += cabs(StdI->trans[ktrans]);
StdFace_main.c:  for (kintr = 0; kintr < StdI->nintr; kintr++) {
StdFace_main.c:    LargeValue0 += cabs(StdI->intr[kintr]);
StdFace_main.c:  for (kintr = 0; kintr < StdI->NCintra; kintr++) {
StdFace_main.c:    LargeValue0 += fabs(StdI->Cintra[kintr]);
StdFace_main.c:  for (kintr = 0; kintr < StdI->NCinter; kintr++) {
StdFace_main.c:    LargeValue0 += fabs(StdI->Cinter[kintr]);
StdFace_main.c:  for (kintr = 0; kintr < StdI->NEx; kintr++) {
StdFace_main.c:    LargeValue0 += 2.0 * fabs(StdI->Ex[kintr]);
StdFace_main.c:  for (kintr = 0; kintr < StdI->NPairLift; kintr++) {
StdFace_main.c:    LargeValue0 += 2.0 * fabs(StdI->PairLift[kintr]);
StdFace_main.c:  for (kintr = 0; kintr < StdI->NHund; kintr++) {
StdFace_main.c:    LargeValue0 += 2.0 * fabs(StdI->Hund[kintr]);
StdFace_main.c:  LargeValue0 /= (double)StdI->nsite;
StdFace_main.c:  StdFace_PrintVal_d("LargeValue", &StdI->LargeValue, LargeValue0);
StdFace_main.c:  if (strcmp(StdI->method, "****") == 0){
StdFace_main.c:  else if (strcmp(StdI->method, "lanczos") == 0) iCalcType = 0;
StdFace_main.c:  else if (strcmp(StdI->method, "lanczosenergy") == 0) { 
StdFace_main.c:  else if (strcmp(StdI->method, "tpq") == 0) iCalcType = 1;
StdFace_main.c:  else if (strcmp(StdI->method, "fulldiag") == 0 ) iCalcType = 2;
StdFace_main.c:  else if (strcmp(StdI->method, "cg") == 0) iCalcType = 3;
StdFace_main.c:  else if (strcmp(StdI->method, "timeevolution") == 0) iCalcType = 4;
StdFace_main.c:    fprintf(stdout, "\n ERROR ! Unsupported Solver : %s\n", StdI->method);
StdFace_main.c:  }/*if (strcmp(StdI->method, METHODS) != 0*/
StdFace_main.c:  if (iCalcType != 4) StdI->PumpBody = 0;
StdFace_main.c:  if (strcmp(StdI->model, "hubbard") == 0) {
StdFace_main.c:    if (StdI->lGC == 0)iCalcModel = 0;
StdFace_main.c:  }/*if (strcmp(StdI->model, "hubbard") == 0)*/
StdFace_main.c:  else if (strcmp(StdI->model, "spin") == 0) {
StdFace_main.c:    if (StdI->lGC == 0)iCalcModel = 1;
StdFace_main.c:  }/*if (strcmp(StdI->model, "spin") == 0)*/
StdFace_main.c:  else if (strcmp(StdI->model, "kondo") == 0) {
StdFace_main.c:    if (StdI->lGC == 0)iCalcModel = 2;
StdFace_main.c:  }/*if (strcmp(StdI->model, "kondo") == 0)*/
StdFace_main.c:  if (strcmp(StdI->Restart, "****") == 0) {
StdFace_main.c:    strcpy(StdI->Restart, "none\0");
StdFace_main.c:  }/*if (strcmp(StdI->Restart, "****") == 0)*/
StdFace_main.c:    fprintf(stdout, "          Restart = %s\n", StdI->Restart);
StdFace_main.c:    if (strcmp(StdI->Restart, "none") == 0) iRestart = 0;
StdFace_main.c:    else if (strcmp(StdI->Restart, "restart_out") == 0 ||
StdFace_main.c:             strcmp(StdI->Restart, "save") == 0) iRestart = 1;
StdFace_main.c:    else if (strcmp(StdI->Restart, "restartsave") == 0 ||
StdFace_main.c:             strcmp(StdI->Restart, "restart")     == 0) iRestart = 2;
StdFace_main.c:    else if (strcmp(StdI->Restart, "restart_in") == 0) iRestart = 3;
StdFace_main.c:      fprintf(stdout, "\n ERROR ! Restart Mode : %s\n", StdI->Restart);
StdFace_main.c:  }/*if (strcmp(StdI->Restart, "****") != 0)*/
StdFace_main.c:  if (strcmp(StdI->InitialVecType, "****") == 0) {
StdFace_main.c:    strcpy(StdI->InitialVecType, "c\0");
StdFace_main.c:  }/*if (strcmp(StdI->InitialVecType, "****") == 0)*/
StdFace_main.c:    fprintf(stdout, "   InitialVecType = %s\n", StdI->InitialVecType);
StdFace_main.c:    if (strcmp(StdI->InitialVecType, "c") == 0) iInitialVecTpye = 0;
StdFace_main.c:    else if (strcmp(StdI->InitialVecType, "r") == 0) iInitialVecTpye = 1;
StdFace_main.c:      fprintf(stdout, "\n ERROR ! Restart Mode : %s\n", StdI->Restart);
StdFace_main.c:  }/*if (strcmp(StdI->InitialVecType, "****") != 0)*/
StdFace_main.c:  if (strcmp(StdI->EigenVecIO, "****") == 0) {
StdFace_main.c:    strcpy(StdI->EigenVecIO, "none\0");
StdFace_main.c:  }/*if (strcmp(StdI->EigenVecIO, "****") == 0)*/
StdFace_main.c:    fprintf(stdout, "       EigenVecIO = %s\n", StdI->EigenVecIO);
StdFace_main.c:    if (strcmp(StdI->EigenVecIO, "none") == 0) InputEigenVec = 0;
StdFace_main.c:    else if (strcmp(StdI->EigenVecIO, "in") == 0) InputEigenVec = 1;
StdFace_main.c:    else if (strcmp(StdI->EigenVecIO, "out") == 0) OutputEigenVec = 1;
StdFace_main.c:    else if (strcmp(StdI->EigenVecIO, "inout") == 0) {
StdFace_main.c:    }/*if (strcmp(StdI->EigenVecIO, "inout") == 0)*/
StdFace_main.c:      fprintf(stdout, "\n ERROR ! EigenVecIO Mode : %s\n", StdI->Restart);
StdFace_main.c:  }/*if (strcmp(StdI->EigenVecIO, "****") != 0)*/
StdFace_main.c:  if (strcmp(StdI->method, "timeevolution") == 0) InputEigenVec = 1;
StdFace_main.c:  if (strcmp(StdI->CalcSpec, "****") == 0) {
StdFace_main.c:    strcpy(StdI->CalcSpec, "none\0");
StdFace_main.c:  }/*if (strcmp(StdI->CalcSpec, "****") == 0)*/
StdFace_main.c:    fprintf(stdout, "         CalcSpec = %s\n", StdI->CalcSpec);
StdFace_main.c:    if (strcmp(StdI->CalcSpec, "none") == 0) iCalcSpec = 0;
StdFace_main.c:    else if (strcmp(StdI->CalcSpec, "normal") == 0) iCalcSpec = 1;
StdFace_main.c:    else if (strcmp(StdI->CalcSpec, "noiteration") == 0) iCalcSpec = 2;
StdFace_main.c:    else if (strcmp(StdI->CalcSpec, "restart_out") == 0) iCalcSpec = 3;
StdFace_main.c:    else if (strcmp(StdI->CalcSpec, "restart_in") == 0) iCalcSpec = 4;
StdFace_main.c:    else if (strcmp(StdI->CalcSpec, "restartsave") == 0 ||
StdFace_main.c:             strcmp(StdI->CalcSpec, "restart")     == 0) iCalcSpec = 5;
StdFace_main.c:      fprintf(stdout, "\n ERROR ! CalcSpec : %s\n", StdI->CalcSpec);
StdFace_main.c:  }/*if (strcmp(StdI->CalcSpec, "****") != 0)*/
StdFace_main.c:  if (strcmp(StdI->model, "spin") == 0 && StdI->S2 > 1) {
StdFace_main.c:    coef = (double *)malloc(sizeof(double) * (StdI->S2 + 1));
StdFace_main.c:    spin = (int **)malloc(sizeof(int*) * (StdI->S2 + 1));
StdFace_main.c:    for (ispin = 0; ispin < StdI->S2 + 1; ispin++) spin[ispin] = (int *)malloc(sizeof(int) * 2);
StdFace_main.c:  fourier_r = (double *)malloc(sizeof(double) * StdI->nsite);
StdFace_main.c:  fourier_i = (double *)malloc(sizeof(double) * StdI->nsite);
StdFace_main.c:  StdFace_PrintVal_d("SpectrumQW", &StdI->SpectrumQ[0], 0.0);
StdFace_main.c:  StdFace_PrintVal_d("SpectrumQL", &StdI->SpectrumQ[1], 0.0);
StdFace_main.c:  StdFace_PrintVal_d("SpectrumQH", &StdI->SpectrumQ[2], 0.0);
StdFace_main.c:  if (strcmp(StdI->SpectrumType, "****") == 0) {
StdFace_main.c:    strcpy(StdI->SpectrumType, "szsz\0");
StdFace_main.c:    if (strcmp(StdI->model, "spin") == 0) {
StdFace_main.c:      NumOp = StdI->S2 + 1;
StdFace_main.c:      for (ispin = 0; ispin <= StdI->S2; ispin++) {
StdFace_main.c:        Sz = (double)ispin - (double)StdI->S2 * 0.5;
StdFace_main.c:    StdI->SpectrumBody = 2;
StdFace_main.c:    fprintf(stdout, "     SpectrumType = %s\n", StdI->SpectrumType);
StdFace_main.c:    if (strcmp(StdI->SpectrumType, "szsz") == 0) {
StdFace_main.c:      if (strcmp(StdI->model, "spin") == 0) {
StdFace_main.c:        NumOp = StdI->S2 + 1;
StdFace_main.c:        for (ispin = 0; ispin <= StdI->S2; ispin++) {
StdFace_main.c:          Sz = (double)ispin - (double)StdI->S2 * 0.5;
StdFace_main.c:      StdI->SpectrumBody = 2;
StdFace_main.c:    else if (strcmp(StdI->SpectrumType, "s+s-") == 0) {
StdFace_main.c:      if (strcmp(StdI->model, "spin") == 0 && StdI->S2 > 1) {
StdFace_main.c:        NumOp = StdI->S2;
StdFace_main.c:        S = (double)StdI->S2 * 0.5;
StdFace_main.c:        for (ispin = 0; ispin < StdI->S2; ispin++) {
StdFace_main.c:          Sz = (double)ispin - (double)StdI->S2 * 0.5;
StdFace_main.c:      StdI->SpectrumBody = 2;
StdFace_main.c:    else if (strcmp(StdI->SpectrumType, "density") == 0) {
StdFace_main.c:      StdI->SpectrumBody = 2;
StdFace_main.c:    else if (strcmp(StdI->SpectrumType, "up") == 0) {
StdFace_main.c:      StdI->SpectrumBody = 1;
StdFace_main.c:    else if (strcmp(StdI->SpectrumType, "down") == 0) {
StdFace_main.c:      StdI->SpectrumBody = 1;
StdFace_main.c:      fprintf(stdout, "\n ERROR ! SpectrumType : %s\n", StdI->SpectrumType);
StdFace_main.c:  for (icell = 0; icell < StdI->NCell; icell++) {
StdFace_main.c:    for (itau = 0; itau < StdI->NsiteUC; itau++) {
StdFace_main.c:      Cphase = (StdI->Cell[icell][0] + StdI->tau[itau][0])*StdI->SpectrumQ[0]
StdFace_main.c:             + (StdI->Cell[icell][1] + StdI->tau[itau][1])*StdI->SpectrumQ[1]
StdFace_main.c:             + (StdI->Cell[icell][2] + StdI->tau[itau][2])*StdI->SpectrumQ[2];
StdFace_main.c:      fourier_r[isite] = cos(2.0*StdI->pi*Cphase);
StdFace_main.c:      fourier_i[isite] = sin(2.0*StdI->pi*Cphase);
StdFace_main.c:  if (strcmp(StdI->model, "kondo") == 0) {
StdFace_main.c:    for (isite = 0; isite < StdI->nsite / 2; isite++) {
StdFace_main.c:      fourier_r[isite + StdI->nsite / 2] = fourier_r[isite];
StdFace_main.c:      fourier_i[isite + StdI->nsite / 2] = fourier_i[isite];
StdFace_main.c:    }/*for (isite = 0; isite < StdI->nsite; isite++)*/
StdFace_main.c:  }/*if (strcmp(StdI->model, "kondo") == 0)*/
StdFace_main.c:  if (StdI->SpectrumBody == 1) {
StdFace_main.c:    if (strcmp(StdI->model, "kondo") == 0) {
StdFace_main.c:      fprintf(fp, "NSingle %d\n", StdI->nsite / 2 * NumOp);
StdFace_main.c:      fprintf(fp, "NSingle %d\n", StdI->nsite * NumOp);
StdFace_main.c:    if (strcmp(StdI->model, "kondo") == 0) {
StdFace_main.c:      for (isite = StdI->nsite / 2; isite < StdI->nsite; isite++) {
StdFace_main.c:      }/*for (isite = 0; isite < StdI->nsite; isite++)*/
StdFace_main.c:    }/*if (strcmp(StdI->model, "kondo") == 0)*/
StdFace_main.c:      for (isite = 0; isite < StdI->nsite; isite++) {
StdFace_main.c:      }/*for (isite = 0; isite < StdI->nsite; isite++)*/
StdFace_main.c:    fprintf(fp, "NPair %d\n", StdI->nsite * NumOp);
StdFace_main.c:    for (isite = 0; isite < StdI->nsite; isite++) {
StdFace_main.c:  if (strcmp(StdI->model, "spin") == 0) 
StdFace_main.c:    for (ispin = 0; ispin < StdI->S2 + 1; ispin++) free(spin[ispin]);
StdFace_main.c:  StdFace_PrintVal_d("VecPotW", &StdI->VecPot[0], 0.0);
StdFace_main.c:  StdFace_PrintVal_d("VecPotL", &StdI->VecPot[1], 0.0);
StdFace_main.c:  StdFace_PrintVal_d("VecPotH", &StdI->VecPot[2], 0.0);
StdFace_main.c:  StdFace_PrintVal_i("Lanczos_max", &StdI->Lanczos_max, 1000);
StdFace_main.c:  StdFace_PrintVal_d("dt", &StdI->dt, 0.1);
StdFace_main.c:  StdFace_PrintVal_d("freq", &StdI->freq, 0.1);
StdFace_main.c:  StdFace_PrintVal_d("tshift", &StdI->tshift, 0.0);
StdFace_main.c:  StdFace_PrintVal_d("tdump", &StdI->tdump, 0.1);
StdFace_main.c:  StdFace_PrintVal_d("Uquench", &StdI->Uquench, 0.0);
StdFace_main.c:  StdFace_PrintVal_i("ExpandCoef", &StdI->ExpandCoef, 10);
StdFace_main.c:  StdI->At = (double **)malloc(sizeof(double*) * StdI->Lanczos_max);
StdFace_main.c:  Et = (double **)malloc(sizeof(double*) * StdI->Lanczos_max);
StdFace_main.c:  for (it = 0; it < StdI->Lanczos_max; it++) {
StdFace_main.c:    StdI->At[it] = (double *)malloc(sizeof(double) * 3);
StdFace_main.c:  if (strcmp(StdI->PumpType, "****") == 0) {
StdFace_main.c:    strcpy(StdI->PumpType, "quench\0");
StdFace_main.c:    StdI->PumpBody = 2;
StdFace_main.c:  }/*if (strcmp(StdI->PumpType, "****")*/
StdFace_main.c:    fprintf(stdout, "     PumpType = %s\n", StdI->PumpType);
StdFace_main.c:    if (strcmp(StdI->PumpType, "quench") == 0) {
StdFace_main.c:      StdI->PumpBody = 2;
StdFace_main.c:    }/*if (strcmp(StdI->PumpType, "quench")*/
StdFace_main.c:    else if (strcmp(StdI->PumpType, "pulselaser") == 0) {
StdFace_main.c:      for (it = 0; it < StdI->Lanczos_max; it++) {
StdFace_main.c:        time = StdI->dt*(double)it;
StdFace_main.c:          StdI->At[it][ii] = StdI->VecPot[ii] * cos(StdI->freq*(time - StdI->tshift))
StdFace_main.c:            * exp(-0.5* (time - StdI->tshift)*(time - StdI->tshift) / (StdI->tdump*StdI->tdump));
StdFace_main.c:          Et[it][ii] = -StdI->VecPot[ii]
StdFace_main.c:            (StdI->tshift - time) / (StdI->tdump*StdI->tdump) * cos(StdI->freq*(time - StdI->tshift))
StdFace_main.c:              - StdI->freq* sin(StdI->freq*(time - StdI->tshift))
StdFace_main.c:            * exp(-0.5* (time - StdI->tshift)*(time - StdI->tshift) / (StdI->tdump*StdI->tdump));
StdFace_main.c:      }/*for (it = 0; it < StdI->Lanczos_max; it++)*/
StdFace_main.c:      StdI->PumpBody = 1;
StdFace_main.c:    }/*if (strcmp(StdI->PumpType, "pulselaser") == 0)*/
StdFace_main.c:    else if (strcmp(StdI->PumpType, "aclaser") == 0) {
StdFace_main.c:      for (it = 0; it < StdI->Lanczos_max; it++) {
StdFace_main.c:        time = StdI->dt*(double)it;
StdFace_main.c:          StdI->At[it][ii] = StdI->VecPot[ii] * sin(StdI->freq*(time - StdI->tshift));
StdFace_main.c:          Et[it][ii] = StdI->VecPot[ii] * cos(StdI->freq*(time - StdI->tshift)) * StdI->freq;
StdFace_main.c:      }/*for (it = 0; it < StdI->Lanczos_max; it++)*/
StdFace_main.c:      StdI->PumpBody = 1;
StdFace_main.c:    }/*if (strcmp(StdI->PumpType, "aclaser") == 0)*/
StdFace_main.c:    else if (strcmp(StdI->PumpType, "dclaser") == 0) {
StdFace_main.c:      for (it = 0; it < StdI->Lanczos_max; it++) {
StdFace_main.c:        time = StdI->dt*(double)it;
StdFace_main.c:          StdI->At[it][ii] = StdI->VecPot[ii] * time;
StdFace_main.c:          Et[it][ii] = -StdI->VecPot[ii];
StdFace_main.c:      }/*for (it = 0; it < StdI->Lanczos_max; it++)*/
StdFace_main.c:      StdI->PumpBody = 1;
StdFace_main.c:    }/* if (strcmp(StdI->PumpType, "dclaser") == 0)*/
StdFace_main.c:      fprintf(stdout, "\n ERROR ! PumpType : %s\n", StdI->PumpType);
StdFace_main.c:  }/*if (! strcmp(StdI->PumpType, "****"))*/
StdFace_main.c:  if (StdI->PumpBody == 1) {
StdFace_main.c:    for (it = 0; it < StdI->Lanczos_max; it++) {
StdFace_main.c:      time = StdI->dt*(double)it;
StdFace_main.c:        time, StdI->At[it][0], StdI->At[it][1], StdI->At[it][2], Et[it][0], Et[it][1], Et[it][2]);
StdFace_main.c:  }/*if (StdI->PumpBody == 1)*/
StdFace_main.c:  for (it = 0; it < StdI->Lanczos_max; it++) free(Et[it]);
StdFace_main.c:  if (StdI->PumpBody == 1) {
StdFace_main.c:    fprintf(fp, "AllTimeStep %d\n", StdI->Lanczos_max);
StdFace_main.c:    for (it = 0; it < StdI->Lanczos_max; it++) {
StdFace_main.c:      for (ipump = 0; ipump < StdI->npump[it]; ipump++) {
StdFace_main.c:        for (jpump = ipump + 1; jpump < StdI->npump[it]; jpump++) {
StdFace_main.c:          if (StdI->pumpindx[it][ipump][0] == StdI->pumpindx[it][jpump][0]
StdFace_main.c:            && StdI->pumpindx[it][ipump][1] == StdI->pumpindx[it][jpump][1]
StdFace_main.c:            && StdI->pumpindx[it][ipump][2] == StdI->pumpindx[it][jpump][2]
StdFace_main.c:            && StdI->pumpindx[it][ipump][3] == StdI->pumpindx[it][jpump][3]) {
StdFace_main.c:            StdI->pump[it][ipump] = StdI->pump[it][ipump] + StdI->pump[it][jpump];
StdFace_main.c:            StdI->pump[it][jpump] = 0.0;
StdFace_main.c:        }/*for (ktrans = jtrans + 1; ktrans < StdI->ntrans; ktrans++)*/
StdFace_main.c:      }/*for (jtrans = 0; jtrans < StdI->ntrans; jtrans++)*/
StdFace_main.c:      for (ipump = 0; ipump < StdI->npump[it]; ipump++) 
StdFace_main.c:        if (cabs(StdI->pump[it][ipump]) > 0.000001) npump0 += 1;
StdFace_main.c:      fprintf(fp, "%f  %d\n", StdI->dt*(double)it, npump0);
StdFace_main.c:      for (ipump = 0; ipump < StdI->npump[it]; ipump++) {
StdFace_main.c:        if (cabs(StdI->pump[it][ipump]) <= 0.000001) continue;
StdFace_main.c:          StdI->pumpindx[it][ipump][0], StdI->pumpindx[it][ipump][1],
StdFace_main.c:          StdI->pumpindx[it][ipump][2], StdI->pumpindx[it][ipump][3],
StdFace_main.c:          creal(StdI->pump[it][ipump]), cimag(StdI->pump[it][ipump]));
StdFace_main.c:      }/*for (itrans = 0; itrans < StdI->ntrans; itrans++)*/
StdFace_main.c:    }/*for (it = 0; it < StdI->Lanczos_max; it++)*/
StdFace_main.c:    fprintf(fp, "AllTimeStep %d\n", StdI->Lanczos_max);
StdFace_main.c:    for (it = 0; it < StdI->Lanczos_max; it++) {
StdFace_main.c:      fprintf(fp, "%f  %d\n", StdI->dt*(double)it, StdI->nsite);
StdFace_main.c:      for (isite = 0; isite < StdI->nsite; isite++) {
StdFace_main.c:          isite, 0, isite, 0, isite, 1, isite, 1, StdI->Uquench, 0.0);
StdFace_main.c:      }/*for (isite = 0; isite < StdI->nsite; isite++)*/
StdFace_main.c:    }/*for (it = 0; it < StdI->Lanczos_max; it++)*/
StdFace_main.c:  fprintf(fp, "NOrbitalIdx %10d\n", StdI->NOrb);
StdFace_main.c:  fprintf(fp, "ComplexType %10d\n", StdI->ComplexType);
StdFace_main.c:  for (isite = 0; isite < StdI->nsite; isite++) {
StdFace_main.c:    for (jsite = 0; jsite < StdI->nsite; jsite++) {
StdFace_main.c:      if (StdI->AntiPeriod[0] == 1 || StdI->AntiPeriod[1] == 1 || StdI->AntiPeriod[2] == 1) {
StdFace_main.c:        fprintf(fp, "%5d  %5d  %5d  %5d\n", isite, jsite, StdI->Orb[isite][jsite], StdI->AntiOrb[isite][jsite]);
StdFace_main.c:        fprintf(fp, "%5d  %5d  %5d\n", isite, jsite, StdI->Orb[isite][jsite]);
StdFace_main.c:  }/*for (isite = 0; isite < StdI->nsite; isite++)*/
StdFace_main.c:  for (iOrb = 0; iOrb < StdI->NOrb; iOrb++)
StdFace_main.c:  for (isite = 0; isite < StdI->nsite; isite++) free(StdI->Orb[isite]);
StdFace_main.c:  free(StdI->Orb);
StdFace_main.c:  OrbGC = (int **)malloc(sizeof(int*) * StdI->nsite);
StdFace_main.c:  AntiOrbGC = (int **)malloc(sizeof(int*) * StdI->nsite);
StdFace_main.c:  for (isite = 0; isite < StdI->nsite; isite++) {
StdFace_main.c:    OrbGC[isite] = (int *)malloc(sizeof(int) * StdI->nsite);
StdFace_main.c:    AntiOrbGC[isite] = (int *)malloc(sizeof(int) * StdI->nsite);
StdFace_main.c:    for (jsite = 0; jsite < StdI->nsite; jsite++) {
StdFace_main.c:      OrbGC[isite][jsite] = StdI->Orb[isite][jsite];
StdFace_main.c:      AntiOrbGC[isite][jsite] = StdI->AntiOrb[isite][jsite];
StdFace_main.c:  }/*for (isite = 0; isite < StdI->nsite; isite++)*/
StdFace_main.c:  for (iorb = 0; iorb < StdI->NOrb; iorb++) {
StdFace_main.c:    for (isite = 0; isite < StdI->nsite; isite++) {
StdFace_main.c:      for (jsite = 0; jsite < StdI->nsite; jsite++) {
StdFace_main.c:    }/*for (isite = 0; isite < StdI->nsite; isite++)*/
StdFace_main.c:  }/*for (iorb = 0; iorb < StdI->NOrb; iorb++)*/
StdFace_main.c:  for (isite = 0; isite < StdI->nsite; isite++) {
StdFace_main.c:        for (isite1 = 0; isite1 < StdI->nsite; isite1++) {
StdFace_main.c:          for (jsite1 = 0; jsite1 < StdI->nsite; jsite1++) {
StdFace_main.c:          }/*for (jsite1 = 0; jsite1 < StdI->nsite; jsite1++)*/
StdFace_main.c:        }/*for (isite1 = 0; isite1 < StdI->nsite; isite1++)*/
StdFace_main.c:  }/*for (isite = 0; isite < StdI->nsite; isite++)*/
StdFace_main.c:  for (isite = 0; isite < StdI->nsite; isite++) {
StdFace_main.c:    for (jsite = 0; jsite < StdI->nsite; jsite++) {
StdFace_main.c:  }/*for (isite = 0; isite < StdI->nsite; isite++)*/
StdFace_main.c:  fprintf(fp, "ComplexType %10d\n", StdI->ComplexType);
StdFace_main.c:  for (isite = 0; isite < StdI->nsite; isite++) {
StdFace_main.c:    for (jsite = 0; jsite < StdI->nsite; jsite++) {
StdFace_main.c:      if (StdI->AntiPeriod[0] == 1 || StdI->AntiPeriod[1] == 1 || StdI->AntiPeriod[2] == 1)
StdFace_main.c:  }/*for (isite = 0; isite < StdI->nsite; isite++)*/
StdFace_main.c:  for (isite = 0; isite < StdI->nsite; isite++) {
StdFace_main.c:  Gutz = (int *)malloc(sizeof(int) * StdI->nsite);
StdFace_main.c:  if (abs(StdI->NMPTrans) == 1 || StdI->NMPTrans == StdI->NaN_i) {
StdFace_main.c:    if (strcmp(StdI->model, "hubbard") == 0) NGutzwiller = 0;
StdFace_main.c:    for (isite = 0; isite < StdI->nsite; isite++) Gutz[isite] = StdI->Orb[isite][isite];
StdFace_main.c:    for (isite = 0; isite < StdI->nsite; isite++) {
StdFace_main.c:      if (StdI->locspinflag[isite] != 0) {
StdFace_main.c:        for (jsite = 0; jsite < StdI->nsite; jsite++) {
StdFace_main.c:        }/*for (jsite = 0; jsite < StdI->nsite; jsite++)*/
StdFace_main.c:    }/*for (isite = 0; isite < StdI->nsite; isite++)*/
StdFace_main.c:    for (isite = 0; isite < StdI->nsite; isite++) {
StdFace_main.c:    }/*for (isite = 0; isite < StdI->nsite; isite++)*/
StdFace_main.c:  }/*if (abs(StdI->NMPTrans) == 1)*/
StdFace_main.c:    if (strcmp(StdI->model, "hubbard") == 0) NGutzwiller = StdI->NsiteUC;
StdFace_main.c:    else if (strcmp(StdI->model, "spin") == 0) NGutzwiller = 1;
StdFace_main.c:    else NGutzwiller = StdI->NsiteUC + 1;
StdFace_main.c:    for (iCell = 0; iCell < StdI->NCell; iCell++) {
StdFace_main.c:      for (isite = 0; isite < StdI->NsiteUC; isite++) {
StdFace_main.c:        if (strcmp(StdI->model, "hubbard") == 0)
StdFace_main.c:          Gutz[isite + StdI->NsiteUC*iCell] = isite;
StdFace_main.c:        else if (strcmp(StdI->model, "spin") == 0)
StdFace_main.c:          Gutz[isite + StdI->NsiteUC*iCell] = 0;
StdFace_main.c:          Gutz[isite + StdI->NsiteUC*iCell] = 0;
StdFace_main.c:          Gutz[isite + StdI->NsiteUC*(iCell + StdI->NCell)] = isite + 1;
StdFace_main.c:      }/*for (isite = 0; isite < StdI->NsiteUC; isite++)*/
StdFace_main.c:    }/*for (iCell = 0; iCell < StdI->NCell; iCell++)*/
StdFace_main.c:  }/*if (abs(StdI->NMPTrans) != 1)*/
StdFace_main.c:  for (isite = 0; isite < StdI->nsite; isite++)
StdFace_main.c:    if (strcmp(StdI->model, "hubbard") == 0 || iGutz > 0)
StdFace_main.c:  StdI->NaN_i = 2147483647;
StdFace_main.c:  StdI->pi = acos(-1.0);
StdFace_main.c:  StdI->a = NaN_d;
StdFace_main.c:  for (i = 0; i < 3; i++) StdI->length[i] = NaN_d;
StdFace_main.c:      StdI->box[i][j] = StdI->NaN_i;
StdFace_main.c:  StdI->Gamma = NaN_d;
StdFace_main.c:  StdI->h = NaN_d;
StdFace_main.c:  StdI->Height = StdI->NaN_i;
StdFace_main.c:  StdI->JAll = NaN_d;
StdFace_main.c:  StdI->JpAll = NaN_d;
StdFace_main.c:  StdI->JppAll = NaN_d;
StdFace_main.c:  StdI->J0All = NaN_d;
StdFace_main.c:  StdI->J0pAll = NaN_d;
StdFace_main.c:  StdI->J1All = NaN_d;
StdFace_main.c:  StdI->J1pAll = NaN_d;
StdFace_main.c:  StdI->J2All = NaN_d;
StdFace_main.c:  StdI->J2pAll = NaN_d;
StdFace_main.c:      StdI->J[i][j] = NaN_d;
StdFace_main.c:      StdI->Jp[i][j] = NaN_d;
StdFace_main.c:      StdI->Jpp[i][j] = NaN_d;
StdFace_main.c:      StdI->J0[i][j] = NaN_d;
StdFace_main.c:      StdI->J0p[i][j] = NaN_d;
StdFace_main.c:      StdI->J1[i][j] = NaN_d;
StdFace_main.c:      StdI->J1p[i][j] = NaN_d;
StdFace_main.c:      StdI->J2[i][j] = NaN_d;
StdFace_main.c:      StdI->J2p[i][j] = NaN_d;
StdFace_main.c:      StdI->D[i][j] = 0.0;
StdFace_main.c:  StdI->D[2][2] = NaN_d;
StdFace_main.c:  StdI->K = NaN_d;
StdFace_main.c:  StdI->L = StdI->NaN_i;
StdFace_main.c:      StdI->direct[i][j] = NaN_d;
StdFace_main.c:  StdI->mu = NaN_d;
StdFace_main.c:  StdI->S2 = StdI->NaN_i;
StdFace_main.c:  StdI->t = NaN_d;
StdFace_main.c:  StdI->tp = NaN_d;
StdFace_main.c:  StdI->tpp = NaN_d;
StdFace_main.c:  StdI->t0 = NaN_d;
StdFace_main.c:  StdI->t0p = NaN_d;
StdFace_main.c:  StdI->t1 = NaN_d;
StdFace_main.c:  StdI->t1p = NaN_d;
StdFace_main.c:  StdI->t2 = NaN_d;
StdFace_main.c:  StdI->t2p = NaN_d;
StdFace_main.c:  StdI->U = NaN_d;
StdFace_main.c:  StdI->V = NaN_d;
StdFace_main.c:  StdI->Vp = NaN_d;
StdFace_main.c:  StdI->Vpp = NaN_d;
StdFace_main.c:  StdI->V0 = NaN_d;
StdFace_main.c:  StdI->V0p = NaN_d;
StdFace_main.c:  StdI->V1 = NaN_d;
StdFace_main.c:  StdI->V1p = NaN_d;
StdFace_main.c:  StdI->V2 = NaN_d;
StdFace_main.c:  StdI->V2p = NaN_d;
StdFace_main.c:  StdI->W = StdI->NaN_i;
StdFace_main.c:  for (i = 0; i < 3; i++)StdI->phase[i] = NaN_d;
StdFace_main.c:  StdI->pi180 = StdI->pi / 180.0;
StdFace_main.c:  StdI->nelec = StdI->NaN_i;
StdFace_main.c:  StdI->Sz2 = StdI->NaN_i;
StdFace_main.c:  strcpy(StdI->model, "****\0");
StdFace_main.c:  strcpy(StdI->lattice, "****\0");
StdFace_main.c:  strcpy(StdI->outputmode, "****\0");
StdFace_main.c:  strcpy(StdI->CDataFileHead, "****\0");
StdFace_main.c:  StdI->cutoff_t = NaN_d;
StdFace_main.c:  StdI->cutoff_u = NaN_d;
StdFace_main.c:  StdI->cutoff_j = NaN_d;
StdFace_main.c:  StdI->LargeValue = NaN_d;
StdFace_main.c:  StdI->OmegaMax = NaN_d;
StdFace_main.c:  StdI->OmegaMin = NaN_d;
StdFace_main.c:  StdI->OmegaIm = NaN_d;
StdFace_main.c:  StdI->Nomega = StdI->NaN_i;
StdFace_main.c:  for (i = 0; i < 3; i++)StdI->SpectrumQ[i] = NaN_d;
StdFace_main.c:  strcpy(StdI->method, "****\0");
StdFace_main.c:  strcpy(StdI->Restart, "****\0");
StdFace_main.c:  strcpy(StdI->EigenVecIO, "****\0");
StdFace_main.c:  strcpy(StdI->InitialVecType, "****\0");
StdFace_main.c:  strcpy(StdI->CalcSpec, "****\0");
StdFace_main.c:  strcpy(StdI->SpectrumType, "****\0");
StdFace_main.c:  StdI->FlgTemp = 1;
StdFace_main.c:  StdI->Lanczos_max = StdI->NaN_i;
StdFace_main.c:  StdI->initial_iv = StdI->NaN_i;
StdFace_main.c:  StdI->nvec = StdI->NaN_i;
StdFace_main.c:  StdI->exct = StdI->NaN_i;
StdFace_main.c:  StdI->LanczosEps = StdI->NaN_i;
StdFace_main.c:  StdI->LanczosTarget = StdI->NaN_i;
StdFace_main.c:  StdI->NumAve = StdI->NaN_i;
StdFace_main.c:  StdI->ExpecInterval = StdI->NaN_i;
StdFace_main.c:  StdI->dt = NaN_d;
StdFace_main.c:  StdI->tdump = NaN_d;
StdFace_main.c:  StdI->tshift = NaN_d;
StdFace_main.c:  StdI->freq = NaN_d;
StdFace_main.c:  StdI->Uquench = NaN_d;
StdFace_main.c:  for (i = 0; i < 3; i++)StdI->VecPot[i] = NaN_d;;
StdFace_main.c:  strcpy(StdI->PumpType, "****\0");
StdFace_main.c:  StdI->ExpandCoef = StdI->NaN_i;
StdFace_main.c:  strcpy(StdI->CParaFileHead, "****\0");
StdFace_main.c:  StdI->NVMCCalMode = StdI->NaN_i;
StdFace_main.c:  StdI->NLanczosMode = StdI->NaN_i;
StdFace_main.c:  StdI->NDataIdxStart = StdI->NaN_i;
StdFace_main.c:  StdI->NDataQtySmp = StdI->NaN_i;
StdFace_main.c:  StdI->NSPGaussLeg = StdI->NaN_i;
StdFace_main.c:  StdI->NSPStot = StdI->NaN_i;
StdFace_main.c:  StdI->NMPTrans = StdI->NaN_i;
StdFace_main.c:  StdI->NSROptItrStep = StdI->NaN_i;
StdFace_main.c:  StdI->NSROptItrSmp = StdI->NaN_i;
StdFace_main.c:  StdI->DSROptRedCut = NaN_d;
StdFace_main.c:  StdI->DSROptStaDel = NaN_d;
StdFace_main.c:  StdI->DSROptStepDt = NaN_d;
StdFace_main.c:  StdI->NVMCWarmUp = StdI->NaN_i;
StdFace_main.c:  StdI->NVMCInterval = StdI->NaN_i;
StdFace_main.c:  StdI->NVMCSample = StdI->NaN_i;
StdFace_main.c:  StdI->NExUpdatePath = StdI->NaN_i;
StdFace_main.c:  StdI->RndSeed = StdI->NaN_i;
StdFace_main.c:  StdI->NSplitSize = StdI->NaN_i;
StdFace_main.c:  StdI->NStore = StdI->NaN_i;
StdFace_main.c:  StdI->NSRCG = StdI->NaN_i;
StdFace_main.c:  StdI->ComplexType = StdI->NaN_i;
StdFace_main.c:      StdI->boxsub[i][j] = StdI->NaN_i;
StdFace_main.c:  StdI->Hsub = StdI->NaN_i;
StdFace_main.c:  StdI->Lsub = StdI->NaN_i;
StdFace_main.c:  StdI->Wsub = StdI->NaN_i;
StdFace_main.c:  for (isite = 0; isite < StdI->nsite; isite++)
StdFace_main.c:    if (StdI->locspinflag[isite] != 0) nlocspin = nlocspin + 1;
StdFace_main.c:  for (isite = 0; isite < StdI->nsite; isite++)
StdFace_main.c:    fprintf(fp, "%5d  %5d\n", isite, StdI->locspinflag[isite]);
StdFace_main.c:  for (jtrans = 0; jtrans < StdI->ntrans; jtrans++){
StdFace_main.c:    for (ktrans = jtrans + 1; ktrans < StdI->ntrans; ktrans++){
StdFace_main.c:      if (StdI->transindx[jtrans][0] == StdI->transindx[ktrans][0]
StdFace_main.c:        && StdI->transindx[jtrans][1] == StdI->transindx[ktrans][1]
StdFace_main.c:        && StdI->transindx[jtrans][2] == StdI->transindx[ktrans][2]
StdFace_main.c:        && StdI->transindx[jtrans][3] == StdI->transindx[ktrans][3]){
StdFace_main.c:        StdI->trans[jtrans] = StdI->trans[jtrans] + StdI->trans[ktrans];
StdFace_main.c:        StdI->trans[ktrans] = 0.0;
StdFace_main.c:    }/*for (ktrans = jtrans + 1; ktrans < StdI->ntrans; ktrans++)*/
StdFace_main.c:  }/*for (jtrans = 0; jtrans < StdI->ntrans; jtrans++)*/
StdFace_main.c:  for (ktrans = 0; ktrans < StdI->ntrans; ktrans++){
StdFace_main.c:    if (cabs(StdI->trans[ktrans]) > 0.000001) ntrans0 = ntrans0 + 1;
StdFace_main.c:  for (ktrans = 0; ktrans < StdI->ntrans; ktrans++) {
StdFace_main.c:    if (cabs(StdI->trans[ktrans]) > 0.000001)
StdFace_main.c:        StdI->transindx[ktrans][0], StdI->transindx[ktrans][1],
StdFace_main.c:        StdI->transindx[ktrans][2], StdI->transindx[ktrans][3],
StdFace_main.c:        creal(StdI->trans[ktrans]), cimag(StdI->trans[ktrans]));
StdFace_main.c:  if (StdI->LCintra == 1) fprintf( fp, "    CoulombIntra  coulombintra.def\n");
StdFace_main.c:  if (StdI->LCinter == 1) fprintf( fp, "    CoulombInter  coulombinter.def\n");
StdFace_main.c:  if (StdI->LHund == 1)fprintf(    fp, "            Hund  hund.def\n");
StdFace_main.c:  if (StdI->LEx == 1)fprintf(      fp, "        Exchange  exchange.def\n");
StdFace_main.c:  if (StdI->LPairLift == 1)fprintf(fp, "        PairLift  pairlift.def\n");
StdFace_main.c:  if (StdI->LPairHopp == 1)fprintf(fp, "         PairHop  pairhopp.def\n");
StdFace_main.c:  if (StdI->Lintr == 1)fprintf(    fp, "        InterAll  interall.def\n");
StdFace_main.c:  if (StdI->ioutputmode != 0) {
StdFace_main.c:  if(StdI->SpectrumBody == 1) 
StdFace_main.c:  if (strcmp(StdI->method, "timeevolution") == 0) {
StdFace_main.c:    if (StdI->PumpBody == 1)
StdFace_main.c:    else if (StdI->PumpBody == 2)
StdFace_main.c:  }/*if (strcmp(StdI->method, "timeevolution") == 0)*/
StdFace_main.c:                                   StdI->CDataFileHead);
StdFace_main.c:  if (StdI->lBoost == 1) fprintf(  fp, "           Boost  boost.def\n");
StdFace_main.c:  if (StdI->lGC == 1 || (StdI->Sz2 != 0 && StdI->Sz2 != StdI->NaN_i))
StdFace_main.c:  fprintf(fp, "CDataFileHead  %s\n", StdI->CDataFileHead);
StdFace_main.c:  fprintf(fp, "Nsite          %-5d\n", StdI->nsite);
StdFace_main.c:  if (StdI->Sz2 != StdI->NaN_i) fprintf(fp, "2Sz            %-5d\n", StdI->Sz2);
StdFace_main.c:  if (StdI->nelec != StdI->NaN_i) fprintf(fp, "Ncond          %-5d\n", StdI->nelec);
StdFace_main.c:  fprintf(fp, "Lanczos_max    %-5d\n", StdI->Lanczos_max);
StdFace_main.c:  fprintf(fp, "initial_iv     %-5d\n", StdI->initial_iv);
StdFace_main.c:  if(StdI->nvec != StdI->NaN_i) fprintf(fp, "nvec           %-5d\n", StdI->nvec);
StdFace_main.c:  fprintf(fp, "exct           %-5d\n", StdI->exct);
StdFace_main.c:  fprintf(fp, "LanczosEps     %-5d\n", StdI->LanczosEps);
StdFace_main.c:  fprintf(fp, "LanczosTarget  %-5d\n", StdI->LanczosTarget);
StdFace_main.c:  fprintf(fp, "LargeValue     %-25.15e\n", StdI->LargeValue);
StdFace_main.c:  fprintf(fp, "NumAve         %-5d\n", StdI->NumAve);
StdFace_main.c:  fprintf(fp, "ExpecInterval  %-5d\n", StdI->ExpecInterval);
StdFace_main.c:  fprintf(fp, "NOmega         %-5d\n", StdI->Nomega);
StdFace_main.c:  fprintf(fp, "OmegaMax       %-25.15e %-25.15e\n", StdI->OmegaMax, StdI->OmegaIm);
StdFace_main.c:  fprintf(fp, "OmegaMin       %-25.15e %-25.15e\n", StdI->OmegaMin, StdI->OmegaIm);
StdFace_main.c:  if (strcmp(StdI->method, "timeevolution") == 0)
StdFace_main.c:    fprintf(fp, "ExpandCoef     %-5d\n", StdI->ExpandCoef);
StdFace_main.c:  fprintf(fp, "CDataFileHead  %s\n", StdI->CDataFileHead);
StdFace_main.c:  fprintf(fp, "CParaFileHead  %s\n", StdI->CParaFileHead);
StdFace_main.c:  fprintf(fp, "NVMCCalMode    %d\n", StdI->NVMCCalMode);
StdFace_main.c:  /*fprintf(fp, "NLanczosMode   %d\n", StdI->NLanczosMode);*/
StdFace_main.c:  fprintf(fp, "NDataIdxStart  %d\n", StdI->NDataIdxStart);
StdFace_main.c:  fprintf(fp, "NDataQtySmp    %d\n", StdI->NDataQtySmp);
StdFace_main.c:  fprintf(fp, "Nsite          %d\n", StdI->nsite);
StdFace_main.c:  fprintf(fp, "Ncond          %-5d\n", StdI->nelec);
StdFace_main.c:  if (StdI->Sz2 != StdI->NaN_i)
StdFace_main.c:    fprintf(fp, "2Sz            %d\n", StdI->Sz2);
StdFace_main.c:  if (StdI->NSPGaussLeg != StdI->NaN_i)
StdFace_main.c:    fprintf(fp, "NSPGaussLeg    %d\n", StdI->NSPGaussLeg);
StdFace_main.c:  if (StdI->NSPStot != StdI->NaN_i)
StdFace_main.c:    fprintf(fp, "NSPStot        %d\n", StdI->NSPStot);
StdFace_main.c:  fprintf(fp, "NMPTrans       %d\n", StdI->NMPTrans);
StdFace_main.c:  fprintf(fp, "NSROptItrStep  %d\n", StdI->NSROptItrStep);
StdFace_main.c:  fprintf(fp, "NSROptItrSmp   %d\n", StdI->NSROptItrSmp);
StdFace_main.c:  fprintf(fp, "DSROptRedCut   %.10f\n", StdI->DSROptRedCut);
StdFace_main.c:  fprintf(fp, "DSROptStaDel   %.10f\n", StdI->DSROptStaDel);
StdFace_main.c:  fprintf(fp, "DSROptStepDt   %.10f\n", StdI->DSROptStepDt);
StdFace_main.c:  fprintf(fp, "NVMCWarmUp     %d\n", StdI->NVMCWarmUp);
StdFace_main.c:  fprintf(fp, "NVMCInterval   %d\n", StdI->NVMCInterval);
StdFace_main.c:  fprintf(fp, "NVMCSample     %d\n", StdI->NVMCSample);
StdFace_main.c:  fprintf(fp, "NExUpdatePath  %d\n", StdI->NExUpdatePath);
StdFace_main.c:  fprintf(fp, "RndSeed        %d\n", StdI->RndSeed);
StdFace_main.c:  fprintf(fp, "NSplitSize     %d\n", StdI->NSplitSize);
StdFace_main.c:  fprintf(fp, "NStore         %d\n", StdI->NStore);
StdFace_main.c:  fprintf(fp, "NSRCG          %d\n", StdI->NSRCG);
StdFace_main.c:  if (StdI->ioutputmode != 0) {
StdFace_main.c:      if (strcmp(StdI->model, "kondo") == 0) xkondo = 2;
StdFace_main.c:      if (StdI->ioutputmode == 1) {
StdFace_main.c:        for (isite = 0; isite < StdI->NsiteUC*xkondo; isite++) {
StdFace_main.c:          if (isite >= StdI->NsiteUC) isite += StdI->nsite / 2;
StdFace_main.c:          if (StdI->locspinflag[isite] == 0) SiMax = 1;
StdFace_main.c:          else SiMax = StdI->locspinflag[isite];
StdFace_main.c:            for (jsite = 0; jsite < StdI->nsite; jsite++) {
StdFace_main.c:              if (StdI->locspinflag[jsite] == 0) SjMax = 1;
StdFace_main.c:              else SjMax = StdI->locspinflag[jsite];
StdFace_main.c:                  (StdI->locspinflag[isite] != 0 && StdI->locspinflag[jsite] != 0)) continue;
StdFace_main.c:            }/*for (jsite = 0; jsite < StdI->nsite; jsite++)*/
StdFace_main.c:        }/*for (isite = 0; isite < StdI->nsite; isite++)*/
StdFace_main.c:      }/*if (StdI->ioutputmode == 1)*/
StdFace_main.c:        for (isite = 0; isite < StdI->nsite; isite++) {
StdFace_main.c:          if (StdI->locspinflag[isite] == 0) SiMax = 1;
StdFace_main.c:          else SiMax = StdI->locspinflag[isite];
StdFace_main.c:            for (jsite = 0; jsite < StdI->nsite; jsite++) {
StdFace_main.c:              if (StdI->locspinflag[jsite] == 0) SjMax = 1;
StdFace_main.c:              else SjMax = StdI->locspinflag[jsite];
StdFace_main.c:                  (StdI->locspinflag[isite] != 0 && StdI->locspinflag[jsite] != 0)) continue;
StdFace_main.c:            }/*for (jsite = 0; jsite < StdI->nsite; jsite++)*/
StdFace_main.c:        }/*for (isite = 0; isite < StdI->nsite; isite++)*/
StdFace_main.c:      }/*if (StdI->ioutputmode == 2)*/
StdFace_main.c:    }/*if (StdI->ioutputmode != 0)*/
StdFace_main.c:  }/*if (StdI->ioutputmode != 0) */
StdFace_main.c:  if (StdI->ioutputmode == 1) {
StdFace_main.c:      if (strcmp(StdI->model, "kondo") == 0) xkondo = 2;
StdFace_main.c:      for (site1 = 0; site1 < StdI->NsiteUC*xkondo; site1++) {
StdFace_main.c:        if (site1 >= StdI->NsiteUC) site1 += StdI->nsite / 2;
StdFace_main.c:        if (StdI->locspinflag[site1] == 0) S1Max = 1;
StdFace_main.c:        else S1Max = StdI->locspinflag[site1];
StdFace_main.c:            for (site3 = 0; site3 < StdI->nsite; site3++) {
StdFace_main.c:              if (StdI->locspinflag[site3] == 0) S3Max = 1;
StdFace_main.c:              else S3Max = StdI->locspinflag[site3];
StdFace_main.c:            }/*for (site3 = 0; site3 < StdI->nsite; site3++)*/
StdFace_main.c:      }/*for (site1 = 0; site1 < StdI->nsite; site1++)*/
StdFace_main.c:  }/*if (StdI->ioutputmode == 1)*/
StdFace_main.c:  else if (StdI->ioutputmode == 2) {
StdFace_main.c:      for (site1 = 0; site1 < StdI->nsite; site1++) {
StdFace_main.c:        if (StdI->locspinflag[site1] == 0) S1Max = 1;
StdFace_main.c:        else S1Max = StdI->locspinflag[site1];
StdFace_main.c:          for (site2 = 0; site2 < StdI->nsite; site2++) {
StdFace_main.c:            if (StdI->locspinflag[site1] != 0 && StdI->locspinflag[site2] != 0
StdFace_main.c:            if (StdI->locspinflag[site2] == 0) S2Max = 1;
StdFace_main.c:            else S2Max = StdI->locspinflag[site2];
StdFace_main.c:              for (site3 = 0; site3 < StdI->nsite; site3++) {
StdFace_main.c:                if (StdI->locspinflag[site3] == 0) S3Max = 1;
StdFace_main.c:                else S3Max = StdI->locspinflag[site3];
StdFace_main.c:                  for (site4 = 0; site4 < StdI->nsite; site4++) {
StdFace_main.c:                    if (StdI->locspinflag[site3] != 0 && StdI->locspinflag[site4] != 0
StdFace_main.c:                    if (StdI->locspinflag[site4] == 0) S4Max = 1;
StdFace_main.c:                    else S4Max = StdI->locspinflag[site4];
StdFace_main.c:                  }/*for (site4 = 0; site4 < StdI->nsite; site4++)*/
StdFace_main.c:              }/*for (site3 = 0; site3 < StdI->nsite; site3++)*/
StdFace_main.c:          }/*for (site2 = 0; site2 < StdI->nsite; site2++)*/
StdFace_main.c:      }/*for (site1 = 0; site1 < StdI->nsite; site1++)*/
StdFace_main.c:  }/*if (StdI->ioutputmode == 2)*/
StdFace_main.c:  if (StdI->ioutputmode != 0) {
StdFace_main.c:  }/*if (StdI->ioutputmode != 0)*/
StdFace_main.c:  if (strcmp(StdI->outputmode, "non") == 0
StdFace_main.c:    || strcmp(StdI->outputmode, "none") == 0
StdFace_main.c:    || strcmp(StdI->outputmode, "off") == 0) {
StdFace_main.c:    StdI->ioutputmode = 0;
StdFace_main.c:    fprintf(stdout, "      ioutputmode = %-10d\n", StdI->ioutputmode);
StdFace_main.c:  else if (strcmp(StdI->outputmode, "cor") == 0
StdFace_main.c:    || strcmp(StdI->outputmode, "corr") == 0
StdFace_main.c:    || strcmp(StdI->outputmode, "correlation") == 0) {
StdFace_main.c:    StdI->ioutputmode = 1;
StdFace_main.c:    fprintf(stdout, "      ioutputmode = %-10d\n", StdI->ioutputmode);
StdFace_main.c:  else if (strcmp(StdI->outputmode, "****") == 0) {
StdFace_main.c:    StdI->ioutputmode = 1;
StdFace_main.c:    fprintf(stdout, "      ioutputmode = %-10d  ######  DEFAULT VALUE IS USED  ######\n", StdI->ioutputmode);
StdFace_main.c:  else if (strcmp(StdI->outputmode, "raw") == 0
StdFace_main.c:    || strcmp(StdI->outputmode, "all") == 0
StdFace_main.c:    || strcmp(StdI->outputmode, "full") == 0) {
StdFace_main.c:    StdI->ioutputmode = 2;
StdFace_main.c:    fprintf(stdout, "      ioutputmode = %-10d\n", StdI->ioutputmode);
StdFace_main.c:    fprintf(stdout, "\n ERROR ! Unsupported OutPutMode : %s\n", StdI->outputmode);
StdFace_main.c:  StdFace_PrintVal_i("Lanczos_max", &StdI->Lanczos_max, 2000);
StdFace_main.c:  StdFace_PrintVal_i("initial_iv", &StdI->initial_iv, -1);
StdFace_main.c:  /*StdFace_PrintVal_i("nvec", &StdI->nvec, 1);*/
StdFace_main.c:  StdFace_PrintVal_i("exct", &StdI->exct, 1);
StdFace_main.c:  StdFace_PrintVal_i("LanczosEps", &StdI->LanczosEps, 14);
StdFace_main.c:  StdFace_PrintVal_i("LanczosTarget", &StdI->LanczosTarget, 2);
StdFace_main.c:  if(StdI->LanczosTarget < StdI->exct) StdI->LanczosTarget = StdI->exct;
StdFace_main.c:  StdFace_PrintVal_i("NumAve", &StdI->NumAve, 5);
StdFace_main.c:  StdFace_PrintVal_i("ExpecInterval", &StdI->ExpecInterval, 20);
StdFace_main.c:  StdFace_PrintVal_i("NOmega", &StdI->Nomega, 200);
StdFace_main.c:  StdFace_PrintVal_d("OmegaMax", &StdI->OmegaMax, StdI->LargeValue*StdI->nsite);
StdFace_main.c:  StdFace_PrintVal_d("OmegaMin", &StdI->OmegaMin, -StdI->LargeValue*StdI->nsite);
StdFace_main.c:  StdFace_PrintVal_d("OmegaIm", &StdI->OmegaIm, 0.01* (int)StdI->LargeValue);
StdFace_main.c:  if (strcmp(StdI->CParaFileHead, "****") == 0) {
StdFace_main.c:    strcpy(StdI->CParaFileHead, "zqp\0");
StdFace_main.c:    fprintf(stdout, "    CParaFileHead = %-12s######  DEFAULT VALUE IS USED  ######\n", StdI->CParaFileHead);
StdFace_main.c:  else fprintf(stdout, "    CParaFileHead = %-s\n", StdI->CParaFileHead);
StdFace_main.c:  StdFace_PrintVal_i("NVMCCalMode", &StdI->NVMCCalMode, 0);
StdFace_main.c:  StdFace_PrintVal_i("NLanczosMode", &StdI->NLanczosMode, 0);
StdFace_main.c:  StdFace_PrintVal_i("NDataIdxStart", &StdI->NDataIdxStart, 1);
StdFace_main.c:  if (StdI->NVMCCalMode == 0) StdFace_NotUsed_i("NDataQtySmp", StdI->NDataQtySmp);
StdFace_main.c:  /*else*/StdFace_PrintVal_i("NDataQtySmp", &StdI->NDataQtySmp, 1);
StdFace_main.c:  if (StdI->lGC == 0 && (StdI->Sz2 == 0 || StdI->Sz2 == StdI->NaN_i)) {
StdFace_main.c:    StdFace_PrintVal_i("NSPGaussLeg", &StdI->NSPGaussLeg, 8);
StdFace_main.c:    StdFace_PrintVal_i("NSPStot", &StdI->NSPStot, 0);
StdFace_main.c:    StdFace_NotUsed_i("NSPGaussLeg", StdI->NSPGaussLeg);
StdFace_main.c:    StdFace_NotUsed_i("NSPStot", StdI->NSPStot);
StdFace_main.c:  if (StdI->AntiPeriod[0] == 1 || StdI->AntiPeriod[1] == 1 || StdI->AntiPeriod[2] == 2)
StdFace_main.c:    StdFace_PrintVal_i("NMPTrans", &StdI->NMPTrans, -1);
StdFace_main.c:  else StdFace_PrintVal_i("NMPTrans", &StdI->NMPTrans, 1);
StdFace_main.c:  StdFace_PrintVal_i("NSROptItrStep", &StdI->NSROptItrStep, 1000);
StdFace_main.c:  if (StdI->NVMCCalMode == 1) StdFace_NotUsed_i("NSROptItrSmp", StdI->NSROptItrSmp);
StdFace_main.c:  /*else*/ StdFace_PrintVal_i("NSROptItrSmp", &StdI->NSROptItrSmp, StdI->NSROptItrStep/10);
StdFace_main.c:  StdFace_PrintVal_i("NVMCWarmUp", &StdI->NVMCWarmUp, 10);
StdFace_main.c:  StdFace_PrintVal_i("NVMCInterval", &StdI->NVMCInterval, 1);
StdFace_main.c:  StdFace_PrintVal_i("NVMCSample", &StdI->NVMCSample, 1000);
StdFace_main.c:  if (strcmp(StdI->model, "hubbard") == 0) StdI->NExUpdatePath = 0;
StdFace_main.c:  else if (strcmp(StdI->model, "spin") == 0) StdI->NExUpdatePath = 2;
StdFace_main.c:  else if (strcmp(StdI->model, "kondo") == 0) { 
StdFace_main.c:    if(StdI->lGC==0) StdI->NExUpdatePath = 1; 
StdFace_main.c:    else StdI->NExUpdatePath = 3;
StdFace_main.c:  fprintf(stdout, "  %15s = %-10d\n", "NExUpdatePath", StdI->NExUpdatePath);
StdFace_main.c:  StdFace_PrintVal_i("RndSeed", &StdI->RndSeed, 123456789);
StdFace_main.c:  StdFace_PrintVal_i("NSplitSize", &StdI->NSplitSize, 1);
StdFace_main.c:  StdFace_PrintVal_i("NStore", &StdI->NStore, 1);
StdFace_main.c:  StdFace_PrintVal_i("NSRCG", &StdI->NSRCG, 0);
StdFace_main.c:  StdFace_PrintVal_d("DSROptRedCut", &StdI->DSROptRedCut, 0.001);
StdFace_main.c:  StdFace_PrintVal_d("DSROptStaDel", &StdI->DSROptStaDel, 0.02);
StdFace_main.c:  StdFace_PrintVal_d("DSROptStepDt", &StdI->DSROptStepDt, 0.02);
StdFace_main.c:  if (strcmp(StdI->model, "hubbard") == 0){
StdFace_main.c:    if (StdI->lGC == 0) StdFace_RequiredVal_i("nelec", StdI->nelec);
StdFace_main.c:      StdFace_NotUsed_i("nelec", StdI->nelec);
StdFace_main.c:      StdFace_NotUsed_i("2Sz", StdI->Sz2);
StdFace_main.c:    StdFace_RequiredVal_i("nelec", StdI->nelec);
StdFace_main.c:    if (StdI->lGC == 0) StdFace_PrintVal_i("2Sz", &StdI->Sz2, 0);
StdFace_main.c:    else StdFace_NotUsed_i("2Sz", StdI->Sz2);
StdFace_main.c:  else if (strcmp(StdI->model, "spin") == 0) {
StdFace_main.c:    StdFace_NotUsed_i("nelec", StdI->nelec);
StdFace_main.c:    StdI->nelec = 0;
StdFace_main.c:    if (StdI->lGC == 0) StdFace_RequiredVal_i("2Sz", StdI->Sz2);
StdFace_main.c:    else StdFace_NotUsed_i("2Sz", StdI->Sz2);
StdFace_main.c:  }/*else if (strcmp(StdI->model, "spin") == 0)*/
StdFace_main.c:  else if (strcmp(StdI->model, "kondo") == 0) {
StdFace_main.c:    if (StdI->lGC == 0) StdFace_RequiredVal_i("nelec", StdI->nelec);
StdFace_main.c:      StdFace_NotUsed_i("nelec", StdI->nelec);
StdFace_main.c:      StdFace_NotUsed_i("2Sz", StdI->Sz2);
StdFace_main.c:    StdFace_RequiredVal_i("nelec", StdI->nelec);
StdFace_main.c:    if (StdI->lGC == 0) StdFace_PrintVal_i("2Sz", &StdI->Sz2, 0);
StdFace_main.c:    else StdFace_NotUsed_i("2Sz", StdI->Sz2);
StdFace_main.c:  }/*else if (strcmp(StdI->model, "kondo") == 0)*/
StdFace_main.c:  for (kintr = 0; kintr < StdI->NCintra; kintr++) {
StdFace_main.c:    for (jintr = kintr + 1; jintr < StdI->NCintra; jintr++) 
StdFace_main.c:      if(StdI->CintraIndx[jintr][0] == StdI->CintraIndx[kintr][0])
StdFace_main.c:        StdI->Cintra[kintr] += StdI->Cintra[jintr];
StdFace_main.c:        StdI->Cintra[jintr] = 0.0;
StdFace_main.c:  for (kintr = 0; kintr < StdI->NCintra; kintr++) {
StdFace_main.c:    if (fabs(StdI->Cintra[kintr]) > 0.000001) nintr0 = nintr0 + 1;
StdFace_main.c:  if (nintr0 == 0 || StdI->lBoost == 1) StdI->LCintra = 0;
StdFace_main.c:  else StdI->LCintra = 1;
StdFace_main.c:  if (StdI->LCintra == 1) {
StdFace_main.c:    for (kintr = 0; kintr < StdI->NCintra; kintr++) {
StdFace_main.c:      if (fabs(StdI->Cintra[kintr]) > 0.000001)
StdFace_main.c:          StdI->CintraIndx[kintr][0], StdI->Cintra[kintr]);
StdFace_main.c:  }/*if (StdI->LCintra == 1)*/
StdFace_main.c:  for (kintr = 0; kintr < StdI->NCinter; kintr++) {
StdFace_main.c:    for (jintr = kintr + 1; jintr < StdI->NCinter; jintr++)
StdFace_main.c:        (    StdI->CinterIndx[jintr][0] == StdI->CinterIndx[kintr][0]
StdFace_main.c:          && StdI->CinterIndx[jintr][1] == StdI->CinterIndx[kintr][1])
StdFace_main.c:        (    StdI->CinterIndx[jintr][0] == StdI->CinterIndx[kintr][1]
StdFace_main.c:          && StdI->CinterIndx[jintr][1] == StdI->CinterIndx[kintr][0])
StdFace_main.c:        StdI->Cinter[kintr] += StdI->Cinter[jintr];
StdFace_main.c:        StdI->Cinter[jintr] = 0.0;
StdFace_main.c:  }/*for (kintr = 0; kintr < StdI->NCinter; kintr++)*/
StdFace_main.c:  for (kintr = 0; kintr < StdI->NCinter; kintr++) {
StdFace_main.c:    if (fabs(StdI->Cinter[kintr]) > 0.000001) nintr0 = nintr0 + 1;
StdFace_main.c:  if (nintr0 == 0 || StdI->lBoost == 1) StdI->LCinter = 0;
StdFace_main.c:  else StdI->LCinter = 1;
StdFace_main.c:  if (StdI->LCinter == 1) {
StdFace_main.c:    for (kintr = 0; kintr < StdI->NCinter; kintr++) {
StdFace_main.c:      if (fabs(StdI->Cinter[kintr]) > 0.000001)
StdFace_main.c:          StdI->CinterIndx[kintr][0], StdI->CinterIndx[kintr][1], StdI->Cinter[kintr]);
StdFace_main.c:  }/*if (StdI->LCinter == 1)*/
StdFace_main.c:  for (kintr = 0; kintr < StdI->NHund; kintr++) {
StdFace_main.c:    for (jintr = kintr + 1; jintr < StdI->NHund; jintr++)
StdFace_main.c:        (StdI->HundIndx[jintr][0] == StdI->HundIndx[kintr][0]
StdFace_main.c:          && StdI->HundIndx[jintr][1] == StdI->HundIndx[kintr][1])
StdFace_main.c:        (StdI->HundIndx[jintr][0] == StdI->HundIndx[kintr][1]
StdFace_main.c:          && StdI->HundIndx[jintr][1] == StdI->HundIndx[kintr][0])
StdFace_main.c:        StdI->Hund[kintr] += StdI->Hund[jintr];
StdFace_main.c:        StdI->Hund[jintr] = 0.0;
StdFace_main.c:  }/*for (kintr = 0; kintr < StdI->NHund; kintr++)*/
StdFace_main.c:  for (kintr = 0; kintr < StdI->NHund; kintr++) {
StdFace_main.c:    if (fabs(StdI->Hund[kintr]) > 0.000001) nintr0 = nintr0 + 1;
StdFace_main.c:  if (nintr0 == 0 || StdI->lBoost == 1) StdI->LHund = 0;
StdFace_main.c:  else StdI->LHund = 1;
StdFace_main.c:  if (StdI->LHund == 1) {
StdFace_main.c:    for (kintr = 0; kintr < StdI->NHund; kintr++) {
StdFace_main.c:      if (fabs(StdI->Hund[kintr]) > 0.000001)
StdFace_main.c:          StdI->HundIndx[kintr][0], StdI->HundIndx[kintr][1], StdI->Hund[kintr]);
StdFace_main.c:  }/*if (StdI->LHund == 1)*/
StdFace_main.c:  for (kintr = 0; kintr < StdI->NEx; kintr++) {
StdFace_main.c:    for (jintr = kintr + 1; jintr < StdI->NEx; jintr++)
StdFace_main.c:        (StdI->ExIndx[jintr][0] == StdI->ExIndx[kintr][0]
StdFace_main.c:          && StdI->ExIndx[jintr][1] == StdI->ExIndx[kintr][1])
StdFace_main.c:        (StdI->ExIndx[jintr][0] == StdI->ExIndx[kintr][1]
StdFace_main.c:          && StdI->ExIndx[jintr][1] == StdI->ExIndx[kintr][0])
StdFace_main.c:        StdI->Ex[kintr] += StdI->Ex[jintr];
StdFace_main.c:        StdI->Ex[jintr] = 0.0;
StdFace_main.c:  }/*for (kintr = 0; kintr < StdI->NEx; kintr++)*/
StdFace_main.c:  for (kintr = 0; kintr < StdI->NEx; kintr++) {
StdFace_main.c:    if (fabs(StdI->Ex[kintr]) > 0.000001) nintr0 = nintr0 + 1;
StdFace_main.c:  if (nintr0 == 0 || StdI->lBoost == 1) StdI->LEx = 0;
StdFace_main.c:  else StdI->LEx = 1;
StdFace_main.c:  if (StdI->LEx == 1) {
StdFace_main.c:    for (kintr = 0; kintr < StdI->NEx; kintr++) {
StdFace_main.c:      if (fabs(StdI->Ex[kintr]) > 0.000001)
StdFace_main.c:          StdI->ExIndx[kintr][0], StdI->ExIndx[kintr][1], StdI->Ex[kintr]);
StdFace_main.c:  for (kintr = 0; kintr < StdI->NPairLift; kintr++) {
StdFace_main.c:    for (jintr = kintr + 1; jintr < StdI->NPairLift; jintr++)
StdFace_main.c:        (StdI->PLIndx[jintr][0] == StdI->PLIndx[kintr][0]
StdFace_main.c:          && StdI->PLIndx[jintr][1] == StdI->PLIndx[kintr][1])
StdFace_main.c:        (StdI->PLIndx[jintr][0] == StdI->PLIndx[kintr][1]
StdFace_main.c:          && StdI->PLIndx[jintr][1] == StdI->PLIndx[kintr][0])
StdFace_main.c:        StdI->PairLift[kintr] += StdI->PairLift[jintr];
StdFace_main.c:        StdI->PairLift[jintr] = 0.0;
StdFace_main.c:  }/*for (kintr = 0; kintr < StdI->NPairLift; kintr++)*/
StdFace_main.c:  for (kintr = 0; kintr < StdI->NPairLift; kintr++) {
StdFace_main.c:    if (fabs(StdI->PairLift[kintr]) > 0.000001) nintr0 = nintr0 + 1;
StdFace_main.c:  if (nintr0 == 0 || StdI->lBoost == 1) StdI->LPairLift = 0;
StdFace_main.c:  else StdI->LPairLift = 1;
StdFace_main.c:  if (StdI->LPairLift == 1) {
StdFace_main.c:    for (kintr = 0; kintr < StdI->NPairLift; kintr++) {
StdFace_main.c:      if (fabs(StdI->PairLift[kintr]) > 0.000001)
StdFace_main.c:          StdI->PLIndx[kintr][0], StdI->PLIndx[kintr][1], StdI->PairLift[kintr]);
StdFace_main.c:  for (kintr = 0; kintr < StdI->NPairHopp; kintr++) {
StdFace_main.c:    for (jintr = kintr + 1; jintr < StdI->NPairHopp; jintr++)
StdFace_main.c:        (StdI->PHIndx[jintr][0] == StdI->PHIndx[kintr][0]
StdFace_main.c:          && StdI->PHIndx[jintr][1] == StdI->PHIndx[kintr][1])
StdFace_main.c:        (StdI->PHIndx[jintr][0] == StdI->PHIndx[kintr][1]
StdFace_main.c:          && StdI->PHIndx[jintr][1] == StdI->PHIndx[kintr][0])
StdFace_main.c:        StdI->PairHopp[kintr] += StdI->PairHopp[jintr];
StdFace_main.c:        StdI->PairHopp[jintr] = 0.0;
StdFace_main.c:  }/*for (kintr = 0; kintr < StdI->NPairHopp; kintr++)*/
StdFace_main.c:  for (kintr = 0; kintr < StdI->NPairHopp; kintr++) {
StdFace_main.c:    if (fabs(StdI->PairHopp[kintr]) > 0.000001) nintr0 = nintr0 + 1;
StdFace_main.c:  if (nintr0 == 0 || StdI->lBoost == 1) StdI->LPairHopp = 0;
StdFace_main.c:  else StdI->LPairHopp = 1;
StdFace_main.c:  if (StdI->LPairHopp == 1) {
StdFace_main.c:    for (kintr = 0; kintr < StdI->NPairHopp; kintr++) {
StdFace_main.c:      if (fabs(StdI->PairHopp[kintr]) > 0.000001)
StdFace_main.c:          StdI->PHIndx[kintr][0], StdI->PHIndx[kintr][1], StdI->PairHopp[kintr]);
StdFace_main.c:  for (jintr = 0; jintr < StdI->nintr; jintr++) {
StdFace_main.c:    for (kintr = jintr + 1; kintr < StdI->nintr; kintr++) {
StdFace_main.c:        (StdI->intrindx[jintr][0] == StdI->intrindx[kintr][0]
StdFace_main.c:          && StdI->intrindx[jintr][1] == StdI->intrindx[kintr][1]
StdFace_main.c:          && StdI->intrindx[jintr][2] == StdI->intrindx[kintr][2]
StdFace_main.c:          && StdI->intrindx[jintr][3] == StdI->intrindx[kintr][3]
StdFace_main.c:          && StdI->intrindx[jintr][4] == StdI->intrindx[kintr][4]
StdFace_main.c:          && StdI->intrindx[jintr][5] == StdI->intrindx[kintr][5]
StdFace_main.c:          && StdI->intrindx[jintr][6] == StdI->intrindx[kintr][6]
StdFace_main.c:          && StdI->intrindx[jintr][7] == StdI->intrindx[kintr][7])
StdFace_main.c:        (StdI->intrindx[jintr][0] == StdI->intrindx[kintr][4]
StdFace_main.c:          && StdI->intrindx[jintr][1] == StdI->intrindx[kintr][5]
StdFace_main.c:          && StdI->intrindx[jintr][2] == StdI->intrindx[kintr][6]
StdFace_main.c:          && StdI->intrindx[jintr][3] == StdI->intrindx[kintr][7]
StdFace_main.c:          && StdI->intrindx[jintr][4] == StdI->intrindx[kintr][0]
StdFace_main.c:          && StdI->intrindx[jintr][5] == StdI->intrindx[kintr][1]
StdFace_main.c:          && StdI->intrindx[jintr][6] == StdI->intrindx[kintr][2]
StdFace_main.c:          && StdI->intrindx[jintr][7] == StdI->intrindx[kintr][3])
StdFace_main.c:        StdI->intr[jintr] = StdI->intr[jintr] + StdI->intr[kintr];
StdFace_main.c:        StdI->intr[kintr] = 0.0;
StdFace_main.c:        (StdI->intrindx[jintr][0] == StdI->intrindx[kintr][4]
StdFace_main.c:          && StdI->intrindx[jintr][1] == StdI->intrindx[kintr][5]
StdFace_main.c:          && StdI->intrindx[jintr][2] == StdI->intrindx[kintr][2]
StdFace_main.c:          && StdI->intrindx[jintr][3] == StdI->intrindx[kintr][3]
StdFace_main.c:          && StdI->intrindx[jintr][4] == StdI->intrindx[kintr][0]
StdFace_main.c:          && StdI->intrindx[jintr][5] == StdI->intrindx[kintr][1]
StdFace_main.c:          && StdI->intrindx[jintr][6] == StdI->intrindx[kintr][6]
StdFace_main.c:          && StdI->intrindx[jintr][7] == StdI->intrindx[kintr][7])
StdFace_main.c:        (StdI->intrindx[jintr][0] == StdI->intrindx[kintr][0]
StdFace_main.c:          && StdI->intrindx[jintr][1] == StdI->intrindx[kintr][1]
StdFace_main.c:          && StdI->intrindx[jintr][2] == StdI->intrindx[kintr][6]
StdFace_main.c:          && StdI->intrindx[jintr][3] == StdI->intrindx[kintr][7]
StdFace_main.c:          && StdI->intrindx[jintr][4] == StdI->intrindx[kintr][4]
StdFace_main.c:          && StdI->intrindx[jintr][5] == StdI->intrindx[kintr][5]
StdFace_main.c:          && StdI->intrindx[jintr][6] == StdI->intrindx[kintr][2]
StdFace_main.c:          && StdI->intrindx[jintr][7] == StdI->intrindx[kintr][3])
StdFace_main.c:        StdI->intr[jintr] = StdI->intr[jintr] - StdI->intr[kintr];
StdFace_main.c:        StdI->intr[kintr] = 0.0;
StdFace_main.c:    }/*for (kintr = jintr + 1; kintr < StdI->nintr; kintr++)*/
StdFace_main.c:  }/*for (jintr = 0; jintr < StdI->nintr; jintr++)*/
StdFace_main.c:  for (jintr = 0; jintr < StdI->nintr; jintr++) {
StdFace_main.c:    for (kintr = jintr + 1; kintr < StdI->nintr; kintr++) {
StdFace_main.c:      if (StdI->intrindx[jintr][6] == StdI->intrindx[kintr][4]
StdFace_main.c:        && StdI->intrindx[jintr][7] == StdI->intrindx[kintr][5]
StdFace_main.c:        && StdI->intrindx[jintr][4] == StdI->intrindx[kintr][6]
StdFace_main.c:        && StdI->intrindx[jintr][5] == StdI->intrindx[kintr][7]
StdFace_main.c:        && StdI->intrindx[jintr][2] == StdI->intrindx[kintr][0]
StdFace_main.c:        && StdI->intrindx[jintr][3] == StdI->intrindx[kintr][1]
StdFace_main.c:        && StdI->intrindx[jintr][0] == StdI->intrindx[kintr][2]
StdFace_main.c:        && StdI->intrindx[jintr][1] == StdI->intrindx[kintr][3]
StdFace_main.c:        StdI->intrindx[kintr][0] = StdI->intrindx[jintr][6];
StdFace_main.c:        StdI->intrindx[kintr][1] = StdI->intrindx[jintr][7];
StdFace_main.c:        StdI->intrindx[kintr][2] = StdI->intrindx[jintr][4];
StdFace_main.c:        StdI->intrindx[kintr][3] = StdI->intrindx[jintr][5];
StdFace_main.c:        StdI->intrindx[kintr][4] = StdI->intrindx[jintr][2];
StdFace_main.c:        StdI->intrindx[kintr][5] = StdI->intrindx[jintr][3];
StdFace_main.c:        StdI->intrindx[kintr][6] = StdI->intrindx[jintr][0];
StdFace_main.c:        StdI->intrindx[kintr][7] = StdI->intrindx[jintr][1];
StdFace_main.c:        (StdI->intrindx[jintr][6] == StdI->intrindx[kintr][4]
StdFace_main.c:          && StdI->intrindx[jintr][7] == StdI->intrindx[kintr][5]
StdFace_main.c:          && StdI->intrindx[jintr][4] == StdI->intrindx[kintr][2]
StdFace_main.c:          && StdI->intrindx[jintr][5] == StdI->intrindx[kintr][3]
StdFace_main.c:          && StdI->intrindx[jintr][2] == StdI->intrindx[kintr][0]
StdFace_main.c:          && StdI->intrindx[jintr][3] == StdI->intrindx[kintr][1]
StdFace_main.c:          && StdI->intrindx[jintr][0] == StdI->intrindx[kintr][6]
StdFace_main.c:          && StdI->intrindx[jintr][1] == StdI->intrindx[kintr][7])
StdFace_main.c:        (StdI->intrindx[jintr][6] == StdI->intrindx[kintr][0]
StdFace_main.c:          && StdI->intrindx[jintr][7] == StdI->intrindx[kintr][1]
StdFace_main.c:          && StdI->intrindx[jintr][4] == StdI->intrindx[kintr][6]
StdFace_main.c:          && StdI->intrindx[jintr][5] == StdI->intrindx[kintr][7]
StdFace_main.c:          && StdI->intrindx[jintr][2] == StdI->intrindx[kintr][4]
StdFace_main.c:          && StdI->intrindx[jintr][3] == StdI->intrindx[kintr][5]
StdFace_main.c:          && StdI->intrindx[jintr][0] == StdI->intrindx[kintr][2]
StdFace_main.c:          && StdI->intrindx[jintr][1] == StdI->intrindx[kintr][3])
StdFace_main.c:        StdI->intrindx[kintr][0] = StdI->intrindx[jintr][6];
StdFace_main.c:        StdI->intrindx[kintr][1] = StdI->intrindx[jintr][7];
StdFace_main.c:        StdI->intrindx[kintr][2] = StdI->intrindx[jintr][4];
StdFace_main.c:        StdI->intrindx[kintr][3] = StdI->intrindx[jintr][5];
StdFace_main.c:        StdI->intrindx[kintr][4] = StdI->intrindx[jintr][2];
StdFace_main.c:        StdI->intrindx[kintr][5] = StdI->intrindx[jintr][3];
StdFace_main.c:        StdI->intrindx[kintr][6] = StdI->intrindx[jintr][0];
StdFace_main.c:        StdI->intrindx[kintr][7] = StdI->intrindx[jintr][1];
StdFace_main.c:        StdI->intr[kintr] = -StdI->intr[kintr];
StdFace_main.c:    }/*for (kintr = jintr + 1; kintr < StdI->nintr; kintr++)*/
StdFace_main.c:  }/*for (jintr = 0; jintr < StdI->nintr; jintr++)*/
StdFace_main.c:  for (jintr = 0; jintr < StdI->nintr; jintr++) {
StdFace_main.c:      (StdI->intrindx[jintr][0] == StdI->intrindx[jintr][4]
StdFace_main.c:        && StdI->intrindx[jintr][1] == StdI->intrindx[jintr][5]) ||
StdFace_main.c:        (StdI->intrindx[jintr][2] == StdI->intrindx[jintr][6]
StdFace_main.c:          && StdI->intrindx[jintr][3] == StdI->intrindx[jintr][7])
StdFace_main.c:        (StdI->intrindx[jintr][0] == StdI->intrindx[jintr][2]
StdFace_main.c:          && StdI->intrindx[jintr][1] == StdI->intrindx[jintr][3])
StdFace_main.c:        (StdI->intrindx[jintr][0] == StdI->intrindx[jintr][6]
StdFace_main.c:          && StdI->intrindx[jintr][1] == StdI->intrindx[jintr][7])
StdFace_main.c:        (StdI->intrindx[jintr][4] == StdI->intrindx[jintr][2]
StdFace_main.c:          && StdI->intrindx[jintr][5] == StdI->intrindx[jintr][3])
StdFace_main.c:        (StdI->intrindx[jintr][4] == StdI->intrindx[jintr][6]
StdFace_main.c:          && StdI->intrindx[jintr][5] == StdI->intrindx[jintr][7])
StdFace_main.c:        StdI->intr[jintr] = 0.0;
StdFace_main.c:  }/*for (jintr = 0; jintr < StdI->nintr; jintr++)*/
StdFace_main.c:  for (kintr = 0; kintr < StdI->nintr; kintr++) {
StdFace_main.c:    if (cabs(StdI->intr[kintr]) > 0.000001) nintr0 = nintr0 + 1;
StdFace_main.c:  if (nintr0 == 0 || StdI->lBoost == 1) StdI->Lintr = 0;
StdFace_main.c:  else StdI->Lintr = 1;
StdFace_main.c:  if (StdI->Lintr == 1) {
StdFace_main.c:    if (StdI->lBoost == 0) {
StdFace_main.c:      for (kintr = 0; kintr < StdI->nintr; kintr++) {
StdFace_main.c:        if (cabs(StdI->intr[kintr]) > 0.000001)
StdFace_main.c:            StdI->intrindx[kintr][0], StdI->intrindx[kintr][1],
StdFace_main.c:            StdI->intrindx[kintr][2], StdI->intrindx[kintr][3],
StdFace_main.c:            StdI->intrindx[kintr][4], StdI->intrindx[kintr][5],
StdFace_main.c:            StdI->intrindx[kintr][6], StdI->intrindx[kintr][7],
StdFace_main.c:            creal(StdI->intr[kintr]), cimag(StdI->intr[kintr]));
StdFace_main.c:      }/*for (kintr = 0; kintr < StdI->nintr; kintr++)*/
StdFace_main.c:    }/* if (StdI->lBoost == 0)*/
StdFace_main.c:    if (strcmp(keyword, "a") == 0) StoreWithCheckDup_d(keyword, value, &StdI->a);
StdFace_main.c:    else if (strcmp(keyword, "a0h") == 0) StoreWithCheckDup_i(keyword, value, &StdI->box[0][2]);
StdFace_main.c:    else if (strcmp(keyword, "a0l") == 0) StoreWithCheckDup_i(keyword, value, &StdI->box[0][1]);
StdFace_main.c:    else if (strcmp(keyword, "a0w") == 0) StoreWithCheckDup_i(keyword, value, &StdI->box[0][0]);
StdFace_main.c:    else if (strcmp(keyword, "a1h") == 0) StoreWithCheckDup_i(keyword, value, &StdI->box[1][2]);
StdFace_main.c:    else if (strcmp(keyword, "a1l") == 0) StoreWithCheckDup_i(keyword, value, &StdI->box[1][1]);
StdFace_main.c:    else if (strcmp(keyword, "a1w") == 0) StoreWithCheckDup_i(keyword, value, &StdI->box[1][0]);
StdFace_main.c:    else if (strcmp(keyword, "a2h") == 0) StoreWithCheckDup_i(keyword, value, &StdI->box[2][2]);
StdFace_main.c:    else if (strcmp(keyword, "a2l") == 0) StoreWithCheckDup_i(keyword, value, &StdI->box[2][1]);
StdFace_main.c:    else if (strcmp(keyword, "a2w") == 0) StoreWithCheckDup_i(keyword, value, &StdI->box[2][0]);
StdFace_main.c:    else if (strcmp(keyword, "cutoff_j") == 0) StoreWithCheckDup_d(keyword, value, &StdI->cutoff_j);
StdFace_main.c:    else if (strcmp(keyword, "cutoff_t") == 0) StoreWithCheckDup_d(keyword, value, &StdI->cutoff_t);
StdFace_main.c:    else if (strcmp(keyword, "cutoff_u") == 0) StoreWithCheckDup_d(keyword, value, &StdI->cutoff_u);
StdFace_main.c:    else if (strcmp(keyword, "d") == 0) StoreWithCheckDup_d(keyword, value, &StdI->D[2][2]);
StdFace_main.c:    else if (strcmp(keyword, "gamma") == 0) StoreWithCheckDup_d(keyword, value, &StdI->Gamma);
StdFace_main.c:    else if (strcmp(keyword, "h") == 0) StoreWithCheckDup_d(keyword, value, &StdI->h);
StdFace_main.c:    else if (strcmp(keyword, "height") == 0) StoreWithCheckDup_i(keyword, value, &StdI->Height);
StdFace_main.c:    else if (strcmp(keyword, "hlength") == 0) StoreWithCheckDup_d(keyword, value, &StdI->length[2]);
StdFace_main.c:    else if (strcmp(keyword, "hx") == 0) StoreWithCheckDup_d(keyword, value, &StdI->direct[2][0]);
StdFace_main.c:    else if (strcmp(keyword, "hy") == 0) StoreWithCheckDup_d(keyword, value, &StdI->direct[2][1]);
StdFace_main.c:    else if (strcmp(keyword, "hz") == 0) StoreWithCheckDup_d(keyword, value, &StdI->direct[2][2]);
StdFace_main.c:    else if (strcmp(keyword, "j") == 0) StoreWithCheckDup_d(keyword, value, &StdI->JAll);
StdFace_main.c:    else if (strcmp(keyword, "jx") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J[0][0]);
StdFace_main.c:    else if (strcmp(keyword, "jxy") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J[0][1]);
StdFace_main.c:    else if (strcmp(keyword, "jxz") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J[0][2]);
StdFace_main.c:    else if (strcmp(keyword, "jy") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J[1][1]);
StdFace_main.c:    else if (strcmp(keyword, "jyx") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J[1][0]);
StdFace_main.c:    else if (strcmp(keyword, "jyz") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J[1][2]);
StdFace_main.c:    else if (strcmp(keyword, "jz") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J[2][2]);
StdFace_main.c:    else if (strcmp(keyword, "jzx") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J[2][0]);
StdFace_main.c:    else if (strcmp(keyword, "jzy") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J[2][1]);
StdFace_main.c:    else if (strcmp(keyword, "j0") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J0All);
StdFace_main.c:    else if (strcmp(keyword, "j0x") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J0[0][0]);
StdFace_main.c:    else if (strcmp(keyword, "j0xy") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J0[0][1]);
StdFace_main.c:    else if (strcmp(keyword, "j0xz") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J0[0][2]);
StdFace_main.c:    else if (strcmp(keyword, "j0y") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J0[1][1]);
StdFace_main.c:    else if (strcmp(keyword, "j0yx") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J0[1][0]);
StdFace_main.c:    else if (strcmp(keyword, "j0yz") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J0[1][2]);
StdFace_main.c:    else if (strcmp(keyword, "j0z") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J0[2][2]);
StdFace_main.c:    else if (strcmp(keyword, "j0zx") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J0[2][0]);
StdFace_main.c:    else if (strcmp(keyword, "j0zy") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J0[2][1]);
StdFace_main.c:    else if (strcmp(keyword, "j0'") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J0pAll);
StdFace_main.c:    else if (strcmp(keyword, "j0'x") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J0p[0][0]);
StdFace_main.c:    else if (strcmp(keyword, "j0'xy") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J0p[0][1]);
StdFace_main.c:    else if (strcmp(keyword, "j0'xz") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J0p[0][2]);
StdFace_main.c:    else if (strcmp(keyword, "j0'y") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J0p[1][1]);
StdFace_main.c:    else if (strcmp(keyword, "j0'yx") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J0p[1][0]);
StdFace_main.c:    else if (strcmp(keyword, "j0'yz") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J0p[1][2]);
StdFace_main.c:    else if (strcmp(keyword, "j0'z") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J0p[2][2]);
StdFace_main.c:    else if (strcmp(keyword, "j0'zx") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J0p[2][0]);
StdFace_main.c:    else if (strcmp(keyword, "j0'zy") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J0p[2][1]);
StdFace_main.c:    else if (strcmp(keyword, "j1") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J1All);
StdFace_main.c:    else if (strcmp(keyword, "j1x") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J1[0][0]);
StdFace_main.c:    else if (strcmp(keyword, "j1xy") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J1[0][1]);
StdFace_main.c:    else if (strcmp(keyword, "j1xz") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J1[0][2]);
StdFace_main.c:    else if (strcmp(keyword, "j1y") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J1[1][1]);
StdFace_main.c:    else if (strcmp(keyword, "j1yx") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J1[1][0]);
StdFace_main.c:    else if (strcmp(keyword, "j1yz") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J1[1][2]);
StdFace_main.c:    else if (strcmp(keyword, "j1z") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J1[2][2]);
StdFace_main.c:    else if (strcmp(keyword, "j1zx") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J1[2][0]);
StdFace_main.c:    else if (strcmp(keyword, "j1zy") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J1[2][1]);
StdFace_main.c:    else if (strcmp(keyword, "j1'") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J1pAll);
StdFace_main.c:    else if (strcmp(keyword, "j1'x") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J1p[0][0]);
StdFace_main.c:    else if (strcmp(keyword, "j1'xy") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J1p[0][1]);
StdFace_main.c:    else if (strcmp(keyword, "j1'xz") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J1p[0][2]);
StdFace_main.c:    else if (strcmp(keyword, "j1'y") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J1p[1][1]);
StdFace_main.c:    else if (strcmp(keyword, "j1'yx") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J1p[1][0]);
StdFace_main.c:    else if (strcmp(keyword, "j1'yz") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J1p[1][2]);
StdFace_main.c:    else if (strcmp(keyword, "j1'z") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J1p[2][2]);
StdFace_main.c:    else if (strcmp(keyword, "j1'zx") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J1p[2][0]);
StdFace_main.c:    else if (strcmp(keyword, "j1'zy") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J1p[2][1]);
StdFace_main.c:    else if (strcmp(keyword, "j2") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J2All);
StdFace_main.c:    else if (strcmp(keyword, "j2x") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J2[0][0]);
StdFace_main.c:    else if (strcmp(keyword, "j2xy") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J2[0][1]);
StdFace_main.c:    else if (strcmp(keyword, "j2xz") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J2[0][2]);
StdFace_main.c:    else if (strcmp(keyword, "j2y") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J2[1][1]);
StdFace_main.c:    else if (strcmp(keyword, "j2yx") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J2[1][0]);
StdFace_main.c:    else if (strcmp(keyword, "j2yz") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J2[1][2]);
StdFace_main.c:    else if (strcmp(keyword, "j2z") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J2[2][2]);
StdFace_main.c:    else if (strcmp(keyword, "j2zx") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J2[2][0]);
StdFace_main.c:    else if (strcmp(keyword, "j2zy") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J2[2][1]);
StdFace_main.c:    else if (strcmp(keyword, "j2'") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J2pAll);
StdFace_main.c:    else if (strcmp(keyword, "j2'x") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J2p[0][0]);
StdFace_main.c:    else if (strcmp(keyword, "j2'xy") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J2p[0][1]);
StdFace_main.c:    else if (strcmp(keyword, "j2'xz") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J2p[0][2]);
StdFace_main.c:    else if (strcmp(keyword, "j2'y") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J2p[1][1]);
StdFace_main.c:    else if (strcmp(keyword, "j2'yx") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J2p[1][0]);
StdFace_main.c:    else if (strcmp(keyword, "j2'yz") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J2p[1][2]);
StdFace_main.c:    else if (strcmp(keyword, "j2'z") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J2p[2][2]);
StdFace_main.c:    else if (strcmp(keyword, "j2'zx") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J2p[2][0]);
StdFace_main.c:    else if (strcmp(keyword, "j2'zy") == 0) StoreWithCheckDup_d(keyword, value, &StdI->J2p[2][1]);
StdFace_main.c:    else if (strcmp(keyword, "j'") == 0) StoreWithCheckDup_d(keyword, value, &StdI->JpAll);
StdFace_main.c:    else if (strcmp(keyword, "j'x") == 0) StoreWithCheckDup_d(keyword, value, &StdI->Jp[0][0]);
StdFace_main.c:    else if (strcmp(keyword, "j'xy") == 0) StoreWithCheckDup_d(keyword, value, &StdI->Jp[0][1]);
StdFace_main.c:    else if (strcmp(keyword, "j'xz") == 0) StoreWithCheckDup_d(keyword, value, &StdI->Jp[0][2]);
StdFace_main.c:    else if (strcmp(keyword, "j'y") == 0) StoreWithCheckDup_d(keyword, value, &StdI->Jp[1][1]);
StdFace_main.c:    else if (strcmp(keyword, "j'yx") == 0) StoreWithCheckDup_d(keyword, value, &StdI->Jp[1][0]);
StdFace_main.c:    else if (strcmp(keyword, "j'yz") == 0) StoreWithCheckDup_d(keyword, value, &StdI->Jp[1][2]);
StdFace_main.c:    else if (strcmp(keyword, "j'z") == 0) StoreWithCheckDup_d(keyword, value, &StdI->Jp[2][2]);
StdFace_main.c:    else if (strcmp(keyword, "j'zx") == 0) StoreWithCheckDup_d(keyword, value, &StdI->Jp[2][0]);
StdFace_main.c:    else if (strcmp(keyword, "j'zy") == 0) StoreWithCheckDup_d(keyword, value, &StdI->Jp[2][1]);
StdFace_main.c:    else if (strcmp(keyword, "j''") == 0) StoreWithCheckDup_d(keyword, value, &StdI->JppAll);
StdFace_main.c:    else if (strcmp(keyword, "j''x") == 0) StoreWithCheckDup_d(keyword, value, &StdI->Jpp[0][0]);
StdFace_main.c:    else if (strcmp(keyword, "j''xy") == 0) StoreWithCheckDup_d(keyword, value, &StdI->Jpp[0][1]);
StdFace_main.c:    else if (strcmp(keyword, "j''xz") == 0) StoreWithCheckDup_d(keyword, value, &StdI->Jpp[0][2]);
StdFace_main.c:    else if (strcmp(keyword, "j''y") == 0) StoreWithCheckDup_d(keyword, value, &StdI->Jpp[1][1]);
StdFace_main.c:    else if (strcmp(keyword, "j''yx") == 0) StoreWithCheckDup_d(keyword, value, &StdI->Jpp[1][0]);
StdFace_main.c:    else if (strcmp(keyword, "j''yz") == 0) StoreWithCheckDup_d(keyword, value, &StdI->Jpp[1][2]);
StdFace_main.c:    else if (strcmp(keyword, "j''z") == 0) StoreWithCheckDup_d(keyword, value, &StdI->Jpp[2][2]);
StdFace_main.c:    else if (strcmp(keyword, "j''zx") == 0) StoreWithCheckDup_d(keyword, value, &StdI->Jpp[2][0]);
StdFace_main.c:    else if (strcmp(keyword, "j''zy") == 0) StoreWithCheckDup_d(keyword, value, &StdI->Jpp[2][1]);
StdFace_main.c:    else if (strcmp(keyword, "k") == 0) StoreWithCheckDup_d(keyword, value, &StdI->K);
StdFace_main.c:    else if (strcmp(keyword, "l") == 0) StoreWithCheckDup_i(keyword, value, &StdI->L);
StdFace_main.c:    else if (strcmp(keyword, "lattice") == 0) StoreWithCheckDup_sl(keyword, value, StdI->lattice);
StdFace_main.c:    else if (strcmp(keyword, "llength") == 0) StoreWithCheckDup_d(keyword, value, &StdI->length[1]);
StdFace_main.c:    else if (strcmp(keyword, "lx") == 0) StoreWithCheckDup_d(keyword, value, &StdI->direct[1][0]);
StdFace_main.c:    else if (strcmp(keyword, "ly") == 0) StoreWithCheckDup_d(keyword, value, &StdI->direct[1][1]);
StdFace_main.c:    else if (strcmp(keyword, "lz") == 0) StoreWithCheckDup_d(keyword, value, &StdI->direct[1][2]);
StdFace_main.c:    else if (strcmp(keyword, "model") == 0) StoreWithCheckDup_sl(keyword, value, StdI->model);
StdFace_main.c:    else if (strcmp(keyword, "mu") == 0) StoreWithCheckDup_d(keyword, value, &StdI->mu);
StdFace_main.c:    else if (strcmp(keyword, "nelec") == 0) StoreWithCheckDup_i(keyword, value, &StdI->nelec);
StdFace_main.c:    else if (strcmp(keyword, "outputmode") == 0) StoreWithCheckDup_sl(keyword, value, StdI->outputmode);
StdFace_main.c:    else if (strcmp(keyword, "phase0") == 0) StoreWithCheckDup_d(keyword, value, &StdI->phase[0]);
StdFace_main.c:    else if (strcmp(keyword, "phase1") == 0) StoreWithCheckDup_d(keyword, value, &StdI->phase[1]);
StdFace_main.c:    else if (strcmp(keyword, "phase2") == 0) StoreWithCheckDup_d(keyword, value, &StdI->phase[2]);
StdFace_main.c:    else if (strcmp(keyword, "t") == 0) StoreWithCheckDup_c(keyword, value, &StdI->t);
StdFace_main.c:    else if (strcmp(keyword, "t0") == 0) StoreWithCheckDup_c(keyword, value, &StdI->t0);
StdFace_main.c:    else if (strcmp(keyword, "t0'") == 0) StoreWithCheckDup_c(keyword, value, &StdI->t0p);
StdFace_main.c:    else if (strcmp(keyword, "t1") == 0) StoreWithCheckDup_c(keyword, value, &StdI->t1);
StdFace_main.c:    else if (strcmp(keyword, "t1'") == 0) StoreWithCheckDup_c(keyword, value, &StdI->t1p);
StdFace_main.c:    else if (strcmp(keyword, "t2") == 0) StoreWithCheckDup_c(keyword, value, &StdI->t2);
StdFace_main.c:    else if (strcmp(keyword, "t2'") == 0) StoreWithCheckDup_c(keyword, value, &StdI->t2p);
StdFace_main.c:    else if (strcmp(keyword, "t'") == 0) StoreWithCheckDup_c(keyword, value, &StdI->tp);
StdFace_main.c:    else if (strcmp(keyword, "t''") == 0) StoreWithCheckDup_c(keyword, value, &StdI->tpp);
StdFace_main.c:    else if (strcmp(keyword, "u") == 0) StoreWithCheckDup_d(keyword, value, &StdI->U);
StdFace_main.c:    else if (strcmp(keyword, "v") == 0) StoreWithCheckDup_d(keyword, value, &StdI->V);
StdFace_main.c:    else if (strcmp(keyword, "v0") == 0) StoreWithCheckDup_d(keyword, value, &StdI->V0);
StdFace_main.c:    else if (strcmp(keyword, "v0'") == 0) StoreWithCheckDup_d(keyword, value, &StdI->V0p);
StdFace_main.c:    else if (strcmp(keyword, "v1") == 0) StoreWithCheckDup_d(keyword, value, &StdI->V1);
StdFace_main.c:    else if (strcmp(keyword, "v1'") == 0) StoreWithCheckDup_d(keyword, value, &StdI->V1p);
StdFace_main.c:    else if (strcmp(keyword, "v2") == 0) StoreWithCheckDup_d(keyword, value, &StdI->V2);
StdFace_main.c:    else if (strcmp(keyword, "v2p") == 0) StoreWithCheckDup_d(keyword, value, &StdI->V2);
StdFace_main.c:    else if (strcmp(keyword, "v'") == 0) StoreWithCheckDup_d(keyword, value, &StdI->Vp);
StdFace_main.c:    else if (strcmp(keyword, "v''") == 0) StoreWithCheckDup_d(keyword, value, &StdI->Vpp);
StdFace_main.c:    else if (strcmp(keyword, "w") == 0) StoreWithCheckDup_i(keyword, value, &StdI->W);
StdFace_main.c:    else if (strcmp(keyword, "wlength") == 0) StoreWithCheckDup_d(keyword, value, &StdI->length[0]);
StdFace_main.c:    else if (strcmp(keyword, "wx") == 0) StoreWithCheckDup_d(keyword, value, &StdI->direct[0][0]);
StdFace_main.c:    else if (strcmp(keyword, "wy") == 0) StoreWithCheckDup_d(keyword, value, &StdI->direct[0][1]);
StdFace_main.c:    else if (strcmp(keyword, "wz") == 0) StoreWithCheckDup_d(keyword, value, &StdI->direct[0][2]);
StdFace_main.c:    else if (strcmp(keyword, "2sz") == 0) StoreWithCheckDup_i(keyword, value, &StdI->Sz2);
StdFace_main.c:    else if (strcmp(keyword, "calcspec") == 0) StoreWithCheckDup_sl(keyword, value, StdI->CalcSpec);
StdFace_main.c:    else if (strcmp(keyword, "exct") == 0) StoreWithCheckDup_i(keyword, value, &StdI->exct);
StdFace_main.c:    else if (strcmp(keyword, "eigenvecio") == 0) StoreWithCheckDup_sl(keyword, value, StdI->EigenVecIO);
StdFace_main.c:    else if (strcmp(keyword, "expandcoef") == 0) StoreWithCheckDup_i(keyword, value, &StdI->ExpandCoef);
StdFace_main.c:    else if (strcmp(keyword, "expecinterval") == 0) StoreWithCheckDup_i(keyword, value, &StdI->ExpecInterval);
StdFace_main.c:    else if (strcmp(keyword, "cdatafilehead") == 0) StoreWithCheckDup_s(keyword, value, StdI->CDataFileHead);
StdFace_main.c:    else if (strcmp(keyword, "dt") == 0) StoreWithCheckDup_d(keyword, value, &StdI->dt);
StdFace_main.c:    else if (strcmp(keyword, "flgtemp") == 0) StoreWithCheckDup_i(keyword, value, &StdI->FlgTemp);
StdFace_main.c:    else if (strcmp(keyword, "freq") == 0) StoreWithCheckDup_d(keyword, value, &StdI->freq);
StdFace_main.c:    else if (strcmp(keyword, "initialvectype") == 0) StoreWithCheckDup_sl(keyword, value, StdI->InitialVecType);
StdFace_main.c:    else if (strcmp(keyword, "initial_iv") == 0) StoreWithCheckDup_i(keyword, value, &StdI->initial_iv);
StdFace_main.c:    else if (strcmp(keyword, "lanczoseps") == 0) StoreWithCheckDup_i(keyword, value, &StdI->LanczosEps);
StdFace_main.c:    else if (strcmp(keyword, "lanczostarget") == 0) StoreWithCheckDup_i(keyword, value, &StdI->LanczosTarget);
StdFace_main.c:    else if (strcmp(keyword, "lanczos_max") == 0) StoreWithCheckDup_i(keyword, value, &StdI->Lanczos_max);
StdFace_main.c:    else if (strcmp(keyword, "largevalue") == 0) StoreWithCheckDup_d(keyword, value, &StdI->LargeValue);
StdFace_main.c:    else if (strcmp(keyword, "method") == 0) StoreWithCheckDup_sl(keyword, value, StdI->method);
StdFace_main.c:    else if (strcmp(keyword, "nomega") == 0) StoreWithCheckDup_i(keyword, value, &StdI->Nomega);
StdFace_main.c:    else if (strcmp(keyword, "numave") == 0) StoreWithCheckDup_i(keyword, value, &StdI->NumAve);
StdFace_main.c:    else if (strcmp(keyword, "nvec") == 0) StoreWithCheckDup_i(keyword, value, &StdI->nvec);
StdFace_main.c:    else if (strcmp(keyword, "omegamax") == 0) StoreWithCheckDup_d(keyword, value, &StdI->OmegaMax);
StdFace_main.c:    else if (strcmp(keyword, "omegamin") == 0) StoreWithCheckDup_d(keyword, value, &StdI->OmegaMin);
StdFace_main.c:    else if (strcmp(keyword, "omegaim") == 0) StoreWithCheckDup_d(keyword, value, &StdI->OmegaIm);
StdFace_main.c:    else if (strcmp(keyword, "pumptype") == 0) StoreWithCheckDup_sl(keyword, value, StdI->PumpType);
StdFace_main.c:    else if (strcmp(keyword, "restart") == 0) StoreWithCheckDup_sl(keyword, value, StdI->Restart);
StdFace_main.c:    else if (strcmp(keyword, "spectrumqh") == 0) StoreWithCheckDup_d(keyword, value, &StdI->SpectrumQ[2]);
StdFace_main.c:    else if (strcmp(keyword, "spectrumql") == 0) StoreWithCheckDup_d(keyword, value, &StdI->SpectrumQ[1]);
StdFace_main.c:    else if (strcmp(keyword, "spectrumqw") == 0) StoreWithCheckDup_d(keyword, value, &StdI->SpectrumQ[0]);
StdFace_main.c:    else if (strcmp(keyword, "spectrumtype") == 0) StoreWithCheckDup_sl(keyword, value, StdI->SpectrumType);
StdFace_main.c:    else if (strcmp(keyword, "tdump") == 0) StoreWithCheckDup_d(keyword, value, &StdI->tdump);
StdFace_main.c:    else if (strcmp(keyword, "tshift") == 0) StoreWithCheckDup_d(keyword, value, &StdI->tshift);
StdFace_main.c:    else if (strcmp(keyword, "uquench") == 0) StoreWithCheckDup_d(keyword, value, &StdI->Uquench);
StdFace_main.c:    else if (strcmp(keyword, "vecpoth") == 0) StoreWithCheckDup_d(keyword, value, &StdI->VecPot[2]);
StdFace_main.c:    else if (strcmp(keyword, "vecpotl") == 0) StoreWithCheckDup_d(keyword, value, &StdI->VecPot[1]);
StdFace_main.c:    else if (strcmp(keyword, "vecpotw") == 0) StoreWithCheckDup_d(keyword, value, &StdI->VecPot[0]);
StdFace_main.c:    else if (strcmp(keyword, "2s") == 0) StoreWithCheckDup_i(keyword, value, &StdI->S2);
StdFace_main.c:    else if (strcmp(keyword, "a0hsub") == 0) StoreWithCheckDup_i(keyword, value, &StdI->boxsub[0][2]);
StdFace_main.c:    else if (strcmp(keyword, "a0lsub") == 0) StoreWithCheckDup_i(keyword, value, &StdI->boxsub[0][1]);
StdFace_main.c:    else if (strcmp(keyword, "a0wsub") == 0) StoreWithCheckDup_i(keyword, value, &StdI->boxsub[0][0]);
StdFace_main.c:    else if (strcmp(keyword, "a1hsub") == 0) StoreWithCheckDup_i(keyword, value, &StdI->boxsub[1][2]);
StdFace_main.c:    else if (strcmp(keyword, "a1lsub") == 0) StoreWithCheckDup_i(keyword, value, &StdI->boxsub[1][1]);
StdFace_main.c:    else if (strcmp(keyword, "a1wsub") == 0) StoreWithCheckDup_i(keyword, value, &StdI->boxsub[1][0]);
StdFace_main.c:    else if (strcmp(keyword, "a2hsub") == 0) StoreWithCheckDup_i(keyword, value, &StdI->boxsub[2][2]);
StdFace_main.c:    else if (strcmp(keyword, "a2lsub") == 0) StoreWithCheckDup_i(keyword, value, &StdI->boxsub[2][1]);
StdFace_main.c:    else if (strcmp(keyword, "a2wsub") == 0) StoreWithCheckDup_i(keyword, value, &StdI->boxsub[2][0]);
StdFace_main.c:    else if (strcmp(keyword, "complextype") == 0) StoreWithCheckDup_i(keyword, value, &StdI->ComplexType);
StdFace_main.c:    else if (strcmp(keyword, "cparafilehead") == 0) StoreWithCheckDup_s(keyword, value, StdI->CParaFileHead);
StdFace_main.c:    else if (strcmp(keyword, "dsroptredcut") == 0) StoreWithCheckDup_d(keyword, value, &StdI->DSROptRedCut);
StdFace_main.c:    else if (strcmp(keyword, "dsroptstadel") == 0) StoreWithCheckDup_d(keyword, value, &StdI->DSROptStaDel);
StdFace_main.c:    else if (strcmp(keyword, "dsroptstepdt") == 0) StoreWithCheckDup_d(keyword, value, &StdI->DSROptStepDt);
StdFace_main.c:    else if (strcmp(keyword, "hsub") == 0) StoreWithCheckDup_i(keyword, value, &StdI->Hsub);
StdFace_main.c:    else if (strcmp(keyword, "lsub") == 0) StoreWithCheckDup_i(keyword, value, &StdI->Lsub);
StdFace_main.c:    else if (strcmp(keyword, "nvmccalmode") == 0) StoreWithCheckDup_i(keyword, value, &StdI->NVMCCalMode);
StdFace_main.c:    else if (strcmp(keyword, "ndataidxstart") == 0) StoreWithCheckDup_i(keyword, value, &StdI->NDataIdxStart);
StdFace_main.c:    else if (strcmp(keyword, "ndataqtysmp") == 0) StoreWithCheckDup_i(keyword, value, &StdI->NDataQtySmp);
StdFace_main.c:    else if (strcmp(keyword, "nlanczosmode") == 0) StoreWithCheckDup_i(keyword, value, &StdI->NLanczosMode);
StdFace_main.c:    else if (strcmp(keyword, "nmptrans") == 0) StoreWithCheckDup_i(keyword, value, &StdI->NMPTrans);
StdFace_main.c:    else if (strcmp(keyword, "nspgaussleg") == 0) StoreWithCheckDup_i(keyword, value, &StdI->NSPGaussLeg);
StdFace_main.c:    else if (strcmp(keyword, "nsplitsize") == 0) StoreWithCheckDup_i(keyword, value, &StdI->NSplitSize);
StdFace_main.c:    else if (strcmp(keyword, "nspstot") == 0) StoreWithCheckDup_i(keyword, value, &StdI->NSPStot);
StdFace_main.c:    else if (strcmp(keyword, "nsroptitrsmp") == 0) StoreWithCheckDup_i(keyword, value, &StdI->NSROptItrSmp);
StdFace_main.c:    else if (strcmp(keyword, "nsroptitrstep") == 0) StoreWithCheckDup_i(keyword, value, &StdI->NSROptItrStep);
StdFace_main.c:    else if (strcmp(keyword, "nstore") == 0) StoreWithCheckDup_i(keyword, value, &StdI->NStore);
StdFace_main.c:    else if (strcmp(keyword, "nsrcg") == 0) StoreWithCheckDup_i(keyword, value, &StdI->NSRCG);
StdFace_main.c:    else if (strcmp(keyword, "nvmcinterval") == 0) StoreWithCheckDup_i(keyword, value, &StdI->NVMCInterval);
StdFace_main.c:    else if (strcmp(keyword, "nvmcsample") == 0) StoreWithCheckDup_i(keyword, value, &StdI->NVMCSample);
StdFace_main.c:    else if (strcmp(keyword, "nvmcwarmup") == 0) StoreWithCheckDup_i(keyword, value, &StdI->NVMCWarmUp);
StdFace_main.c:    else if (strcmp(keyword, "rndseed") == 0) StoreWithCheckDup_i(keyword, value, &StdI->RndSeed);
StdFace_main.c:    else if (strcmp(keyword, "wsub") == 0) StoreWithCheckDup_i(keyword, value, &StdI->Wsub);
StdFace_main.c:  if (strcmp(StdI->CDataFileHead, "****") == 0) {
StdFace_main.c:    strcpy(StdI->CDataFileHead, "zvo\0");
StdFace_main.c:    fprintf(stdout, "    CDataFileHead = %-12s######  DEFAULT VALUE IS USED  ######\n", StdI->CDataFileHead);
StdFace_main.c:  else fprintf(stdout, "    CDataFileHead = %-s\n", StdI->CDataFileHead);
StdFace_main.c:  StdI->lGC = 0;
StdFace_main.c:  StdI->lBoost = 0;
StdFace_main.c:  if (strcmp(StdI->model, "fermionhubbard") == 0
StdFace_main.c:    || strcmp(StdI->model, "hubbard") == 0)
StdFace_main.c:    strcpy(StdI->model, "hubbard\0");
StdFace_main.c:  else if(strcmp(StdI->model, "fermionhubbardgc") == 0
StdFace_main.c:    || strcmp(StdI->model, "hubbardgc") == 0) {
StdFace_main.c:    strcpy(StdI->model, "hubbard\0");
StdFace_main.c:    StdI->lGC = 1;
StdFace_main.c:  else if (strcmp(StdI->model, "spin") == 0)
StdFace_main.c:    strcpy(StdI->model, "spin\0");
StdFace_main.c:  else if (strcmp(StdI->model, "spingc") == 0) {
StdFace_main.c:    strcpy(StdI->model, "spin\0");
StdFace_main.c:    StdI->lGC = 1;
StdFace_main.c:  else if(strcmp(StdI->model, "spingcboost") == 0 ||
StdFace_main.c:    strcmp(StdI->model, "spingccma") == 0) {
StdFace_main.c:    strcpy(StdI->model, "spin\0");
StdFace_main.c:    StdI->lGC = 1;
StdFace_main.c:    StdI->lBoost = 1;
StdFace_main.c:  else if (strcmp(StdI->model, "kondolattice") == 0
StdFace_main.c:    || strcmp(StdI->model, "kondo") == 0) {
StdFace_main.c:    strcpy(StdI->model, "kondo\0");
StdFace_main.c:  else if(strcmp(StdI->model, "kondolatticegc") == 0
StdFace_main.c:    || strcmp(StdI->model, "kondogc") == 0) {
StdFace_main.c:    strcpy(StdI->model, "kondo\0");
StdFace_main.c:    StdI->lGC = 1;
StdFace_main.c:  else UnsupportedSystem(StdI->model, StdI->lattice);
StdFace_main.c:  if (strcmp(StdI->method, "direct") == 0
StdFace_main.c:    || strcmp(StdI->method, "alldiag") == 0)
StdFace_main.c:    strcpy(StdI->method, "fulldiag\0");
StdFace_main.c:  else if (strcmp(StdI->method, "te") == 0
StdFace_main.c:    || strcmp(StdI->method, "time-evolution") == 0) {
StdFace_main.c:    strcpy(StdI->method, "timeevolution\0");
StdFace_main.c:  if (strcmp(StdI->method, "timeevolution") == 0) VectorPotential(StdI);
StdFace_main.c:  if (strcmp(StdI->lattice, "chain") == 0
StdFace_main.c:    || strcmp(StdI->lattice, "chainlattice") == 0) StdFace_Chain(StdI);
StdFace_main.c:  else if (strcmp(StdI->lattice, "face-centeredorthorhombic") == 0
StdFace_main.c:    || strcmp(StdI->lattice, "fcorthorhombic") == 0
StdFace_main.c:    || strcmp(StdI->lattice, "fco") == 0) StdFace_FCOrtho(StdI);
StdFace_main.c:  else if (strcmp(StdI->lattice, "honeycomb") == 0
StdFace_main.c:    || strcmp(StdI->lattice, "honeycomblattice") == 0) StdFace_Honeycomb(StdI);
StdFace_main.c:  else if (strcmp(StdI->lattice, "kagome") == 0
StdFace_main.c:    || strcmp(StdI->lattice, "kagomelattice") == 0) StdFace_Kagome(StdI);
StdFace_main.c:  else if (strcmp(StdI->lattice, "ladder") == 0
StdFace_main.c:    || strcmp(StdI->lattice, "ladderlattice") == 0) StdFace_Ladder(StdI);
StdFace_main.c:  else if (strcmp(StdI->lattice, "orthorhombic") == 0
StdFace_main.c:    || strcmp(StdI->lattice, "simpleorthorhombic") == 0) StdFace_Orthorhombic(StdI);
StdFace_main.c:  else if (strcmp(StdI->lattice, "pyrochlore") == 0) StdFace_Pyrochlore(StdI);
StdFace_main.c:  else if (strcmp(StdI->lattice, "tetragonal") == 0
StdFace_main.c:    || strcmp(StdI->lattice, "tetragonallattice") == 0
StdFace_main.c:    || strcmp(StdI->lattice, "square") == 0
StdFace_main.c:    || strcmp(StdI->lattice, "squarelattice") == 0) StdFace_Tetragonal(StdI);
StdFace_main.c:  else if (strcmp(StdI->lattice, "triangular") == 0
StdFace_main.c:    || strcmp(StdI->lattice, "triangularlattice") == 0) StdFace_Triangular(StdI);
StdFace_main.c:  else if (strcmp(StdI->lattice, "wannier90") == 0) StdFace_Wannier90(StdI);
StdFace_main.c:  else UnsupportedSystem(StdI->model, StdI->lattice);//<<
StdFace_main.c:  if (StdI->lBoost == 1) {
StdFace_main.c:    if (strcmp(StdI->lattice, "chain") == 0
StdFace_main.c:      || strcmp(StdI->lattice, "chainlattice") == 0) StdFace_Chain_Boost(StdI);
StdFace_main.c:    else if (strcmp(StdI->lattice, "honeycomb") == 0
StdFace_main.c:      || strcmp(StdI->lattice, "honeycomblattice") == 0) StdFace_Honeycomb_Boost(StdI);
StdFace_main.c:    else if (strcmp(StdI->lattice, "kagome") == 0
StdFace_main.c:      || strcmp(StdI->lattice, "kagomelattice") == 0) StdFace_Kagome_Boost(StdI);
StdFace_main.c:    else if (strcmp(StdI->lattice, "ladder") == 0
StdFace_main.c:      || strcmp(StdI->lattice, "ladderlattice") == 0) StdFace_Ladder_Boost(StdI);
StdFace_main.c:    else UnsupportedSystem(StdI->model, StdI->lattice);
StdFace_main.c:  if (strcmp(StdI->method, "timeevolution") == 0) PrintPump(StdI);
StdFace_main.c:  if(StdI->lGC == 0 && (StdI->Sz2 == 0 || StdI->Sz2 == StdI->NaN_i)) 
StdFace_main.c:    StdFace_PrintVal_i("ComplexType", &StdI->ComplexType, 0);
StdFace_main.c:  else StdFace_PrintVal_i("ComplexType", &StdI->ComplexType, 1);
StdFace_main.c:  if(StdI->lGC == 1 || (StdI->Sz2 != 0 && StdI->Sz2 != StdI->NaN_i) )
StdFace_main.c:  free(StdI->locspinflag);
StdFace_main.c:  for (ktrans = 0; ktrans < StdI->ntrans; ktrans++) {
StdFace_main.c:    free(StdI->transindx[ktrans]);
StdFace_main.c:  free(StdI->transindx);
StdFace_main.c:  free(StdI->trans);
StdFace_main.c:  for (kintr = 0; kintr < StdI->nintr; kintr++) {
StdFace_main.c:    free(StdI->intrindx[kintr]);
StdFace_main.c:  free(StdI->intrindx);
StdFace_main.c:  free(StdI->intr);
StdFace_main.c:else if (strcmp(keyword, "new_val") == 0) StoreWithCheckDup_i(keyword, value, &StdI->new_val);
StdFace_main.c:StdI->new_val = NaN_d;
StdFace_main.c:StdI->new_val = NaN_i;
StdFace_main.c:strcpy(StdI->new_val, "****\0");
TriangularLattice.c:  StdI->NsiteUC = 1;
TriangularLattice.c:  StdFace_PrintVal_d("a", &StdI->a, 1.0);
TriangularLattice.c:  StdFace_PrintVal_d("Wlength", &StdI->length[0], StdI->a);
TriangularLattice.c:  StdFace_PrintVal_d("Llength", &StdI->length[1], StdI->a);
TriangularLattice.c:  StdFace_PrintVal_d("Wx", &StdI->direct[0][0], StdI->length[0]);
TriangularLattice.c:  StdFace_PrintVal_d("Wy", &StdI->direct[0][1], 0.0);
TriangularLattice.c:  StdFace_PrintVal_d("Lx", &StdI->direct[1][0], StdI->length[1] * 0.5);
TriangularLattice.c:  StdFace_PrintVal_d("Ly", &StdI->direct[1][1], StdI->length[1] * 0.5 * sqrt(3.0));
TriangularLattice.c:  StdFace_PrintVal_d("phase0", &StdI->phase[0], 0.0);
TriangularLattice.c:  StdFace_PrintVal_d("phase1", &StdI->phase[1], 0.0);
TriangularLattice.c:  StdI->tau[0][0] = 0.0; StdI->tau[0][1] = 0.0; StdI->tau[0][2] = 0.0;
TriangularLattice.c:  StdFace_NotUsed_J("J1'", StdI->J1pAll, StdI->J1p);
TriangularLattice.c:  StdFace_NotUsed_J("J2'", StdI->J2pAll, StdI->J2p);
TriangularLattice.c:  StdFace_NotUsed_d("t1'", StdI->t1p);
TriangularLattice.c:  StdFace_NotUsed_d("t2'", StdI->t2p);
TriangularLattice.c:  StdFace_NotUsed_d("V1'", StdI->V1p);
TriangularLattice.c:  StdFace_NotUsed_d("V2'", StdI->V2p);
TriangularLattice.c:  StdFace_NotUsed_d("K", StdI->K);
TriangularLattice.c:  StdFace_PrintVal_d("h", &StdI->h, 0.0);
TriangularLattice.c:  StdFace_PrintVal_d("Gamma", &StdI->Gamma, 0.0);
TriangularLattice.c:  if (strcmp(StdI->model, "spin") == 0 ) {
TriangularLattice.c:    StdFace_PrintVal_i("2S", &StdI->S2, 1);
TriangularLattice.c:    StdFace_PrintVal_d("D", &StdI->D[2][2], 0.0);
TriangularLattice.c:    StdFace_InputSpinNN(StdI, StdI->J0, StdI->J0All, "J0");
TriangularLattice.c:    StdFace_InputSpinNN(StdI, StdI->J1, StdI->J1All, "J1");
TriangularLattice.c:    StdFace_InputSpinNN(StdI, StdI->J2, StdI->J2All, "J2");
TriangularLattice.c:    StdFace_InputSpin(StdI, StdI->Jp, StdI->JpAll, "J'");
TriangularLattice.c:    StdFace_NotUsed_d("K", StdI->K);
TriangularLattice.c:    StdFace_NotUsed_d("mu", StdI->mu);
TriangularLattice.c:    StdFace_NotUsed_d("U", StdI->U);
TriangularLattice.c:    StdFace_NotUsed_c("t", StdI->t);
TriangularLattice.c:    StdFace_NotUsed_c("t0", StdI->t0);
TriangularLattice.c:    StdFace_NotUsed_c("t1", StdI->t1);
TriangularLattice.c:    StdFace_NotUsed_c("t2", StdI->t2);
TriangularLattice.c:    StdFace_NotUsed_c("t'", StdI->tp);
TriangularLattice.c:    StdFace_NotUsed_d("V", StdI->V);
TriangularLattice.c:    StdFace_NotUsed_d("V0", StdI->V0);
TriangularLattice.c:    StdFace_NotUsed_d("V1", StdI->V1);
TriangularLattice.c:    StdFace_NotUsed_d("V2", StdI->V2);
TriangularLattice.c:    StdFace_NotUsed_d("V'", StdI->Vp);
TriangularLattice.c:  }/*if (strcmp(StdI->model, "spin") == 0 )*/
TriangularLattice.c:    StdFace_PrintVal_d("mu", &StdI->mu, 0.0);
TriangularLattice.c:    StdFace_PrintVal_d("U", &StdI->U, 0.0);
TriangularLattice.c:    StdFace_InputHopp(StdI, &StdI->t0, "t0");
TriangularLattice.c:    StdFace_InputHopp(StdI, &StdI->t1, "t1");
TriangularLattice.c:    StdFace_InputHopp(StdI, &StdI->t2, "t2");
TriangularLattice.c:    StdFace_PrintVal_c("t'", &StdI->tp, 0.0);
TriangularLattice.c:    StdFace_InputCoulombV(StdI, &StdI->V0, "V0");
TriangularLattice.c:    StdFace_InputCoulombV(StdI, &StdI->V1, "V1");
TriangularLattice.c:    StdFace_InputCoulombV(StdI, &StdI->V2, "V2");
TriangularLattice.c:    StdFace_PrintVal_d("V'", &StdI->Vp, 0.0);
TriangularLattice.c:    StdFace_NotUsed_J("J0", StdI->J0All, StdI->J0);
TriangularLattice.c:    StdFace_NotUsed_J("J1", StdI->J1All, StdI->J1);
TriangularLattice.c:    StdFace_NotUsed_J("J2", StdI->J2All, StdI->J2);
TriangularLattice.c:    StdFace_NotUsed_J("J'", StdI->JpAll, StdI->Jp);
TriangularLattice.c:    StdFace_NotUsed_d("D", StdI->D[2][2]);
TriangularLattice.c:    if (strcmp(StdI->model, "hubbard") == 0 ) {
TriangularLattice.c:      StdFace_NotUsed_i("2S", StdI->S2);
TriangularLattice.c:      StdFace_NotUsed_J("J", StdI->JAll, StdI->J);
TriangularLattice.c:    }/*if (strcmp(StdI->model, "hubbard") == 0 )*/
TriangularLattice.c:      StdFace_PrintVal_i("2S", &StdI->S2, 1);
TriangularLattice.c:      StdFace_InputSpin(StdI, StdI->J, StdI->JAll, "J");
TriangularLattice.c:  StdI->nsite = StdI->NsiteUC * StdI->NCell;
TriangularLattice.c:  if (strcmp(StdI->model, "kondo") == 0 ) StdI->nsite *= 2;
TriangularLattice.c:  StdI->locspinflag = (int *)malloc(sizeof(int) * StdI->nsite);
TriangularLattice.c:  if (strcmp(StdI->model, "spin") == 0 )
TriangularLattice.c:    for (isite = 0; isite < StdI->nsite; isite++) StdI->locspinflag[isite] = StdI->S2;
TriangularLattice.c:  else if (strcmp(StdI->model, "hubbard") == 0 )
TriangularLattice.c:    for (isite = 0; isite < StdI->nsite; isite++) StdI->locspinflag[isite] = 0;
TriangularLattice.c:    for (iL = 0; iL < StdI->nsite / 2; iL++) {
TriangularLattice.c:      StdI->locspinflag[iL] = StdI->S2;
TriangularLattice.c:      StdI->locspinflag[iL + StdI->nsite / 2] = 0;
TriangularLattice.c:  if (strcmp(StdI->model, "spin") == 0 ) {
TriangularLattice.c:    ntransMax = StdI->nsite * (StdI->S2 + 1/*h*/ + 2 * StdI->S2/*Gamma*/);
TriangularLattice.c:    nintrMax = StdI->NCell * (StdI->NsiteUC/*D*/ + 3/*J*/ + 3/*J'*/)
TriangularLattice.c:      * (3 * StdI->S2 + 1) * (3 * StdI->S2 + 1);
TriangularLattice.c:    ntransMax = StdI->NCell * 2/*spin*/ * (2 * StdI->NsiteUC/*mu+h+Gamma*/ + 6/*t*/ + 6/*t'*/);
TriangularLattice.c:    nintrMax = StdI->NCell * (StdI->NsiteUC/*U*/ + 4 * (3/*V*/ + 3/*V'*/));
TriangularLattice.c:    if (strcmp(StdI->model, "kondo") == 0) {
TriangularLattice.c:      ntransMax += StdI->nsite / 2 * (StdI->S2 + 1/*h*/ + 2 * StdI->S2/*Gamma*/);
TriangularLattice.c:      nintrMax += StdI->nsite / 2 * (3 * StdI->S2 + 1) * (3 * StdI->S2 + 1);
TriangularLattice.c:    }/*if (strcmp(StdI->model, "kondo") == 0)*/
TriangularLattice.c:  for (kCell = 0; kCell < StdI->NCell; kCell++) {
TriangularLattice.c:    iW = StdI->Cell[kCell][0];
TriangularLattice.c:    iL = StdI->Cell[kCell][1];
TriangularLattice.c:    if (strcmp(StdI->model, "kondo") == 0 ) isite += StdI->NCell;
TriangularLattice.c:    if (strcmp(StdI->model, "spin") == 0 ) {
TriangularLattice.c:      StdFace_MagField(StdI, StdI->S2, -StdI->h, -StdI->Gamma, isite);
TriangularLattice.c:      StdFace_GeneralJ(StdI, StdI->D, StdI->S2, StdI->S2, isite, isite);
TriangularLattice.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
TriangularLattice.c:      StdFace_HubbardLocal(StdI, StdI->mu, -StdI->h, -StdI->Gamma, StdI->U, isite);
TriangularLattice.c:      if (strcmp(StdI->model, "kondo") == 0 ) {
TriangularLattice.c:        StdFace_GeneralJ(StdI, StdI->J, 1, StdI->S2, isite, jsite);
TriangularLattice.c:        StdFace_MagField(StdI, StdI->S2, -StdI->h, -StdI->Gamma, jsite);
TriangularLattice.c:      }/*if (strcmp(StdI->model, "kondo") == 0 )*/
TriangularLattice.c:    if (strcmp(StdI->model, "spin") == 0 ) {
TriangularLattice.c:      StdFace_GeneralJ(StdI, StdI->J0, StdI->S2, StdI->S2, isite, jsite);
TriangularLattice.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
TriangularLattice.c:      StdFace_Hopping(StdI, Cphase * StdI->t0, isite, jsite, dR);
TriangularLattice.c:      StdFace_Coulomb(StdI, StdI->V0, isite, jsite);
TriangularLattice.c:    if (strcmp(StdI->model, "spin") == 0 ) {
TriangularLattice.c:      StdFace_GeneralJ(StdI, StdI->J1, StdI->S2, StdI->S2, isite, jsite);
TriangularLattice.c:      StdFace_Hopping(StdI, Cphase * StdI->t1, isite, jsite, dR);
TriangularLattice.c:      StdFace_Coulomb(StdI, StdI->V1, isite, jsite);
TriangularLattice.c:    if (strcmp(StdI->model, "spin") == 0 ) {
TriangularLattice.c:      StdFace_GeneralJ(StdI, StdI->J2, StdI->S2, StdI->S2, isite, jsite);
TriangularLattice.c:      StdFace_Hopping(StdI, Cphase * StdI->t2, isite, jsite, dR);
TriangularLattice.c:      StdFace_Coulomb(StdI, StdI->V2, isite, jsite);
TriangularLattice.c:    if (strcmp(StdI->model, "spin") == 0 ) {
TriangularLattice.c:      StdFace_GeneralJ(StdI, StdI->Jp, StdI->S2, StdI->S2, isite, jsite);
TriangularLattice.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
TriangularLattice.c:      StdFace_Hopping(StdI, Cphase * StdI->tp, isite, jsite, dR);
TriangularLattice.c:      StdFace_Coulomb(StdI, StdI->Vp, isite, jsite);
TriangularLattice.c:    if (strcmp(StdI->model, "spin") == 0 ) {
TriangularLattice.c:      StdFace_GeneralJ(StdI, StdI->Jp, StdI->S2, StdI->S2, isite, jsite);
TriangularLattice.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
TriangularLattice.c:      StdFace_Hopping(StdI, Cphase * StdI->tp, isite, jsite, dR);
TriangularLattice.c:      StdFace_Coulomb(StdI, StdI->Vp, isite, jsite);
TriangularLattice.c:    if (strcmp(StdI->model, "spin") == 0 ) {
TriangularLattice.c:      StdFace_GeneralJ(StdI, StdI->Jp, StdI->S2, StdI->S2, isite, jsite);
TriangularLattice.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
TriangularLattice.c:      StdFace_Hopping(StdI, Cphase * StdI->tp, isite, jsite, dR);
TriangularLattice.c:      StdFace_Coulomb(StdI, StdI->Vp, isite, jsite);
TriangularLattice.c:  }/*for (kCell = 0; kCell < StdI->NCell; kCell++)*/
Wannier90.c:  sprintf(filename, "%s_geom.dat", StdI->CDataFileHead);
Wannier90.c:    ierr = fscanf(fp, "%lf%lf%lf", &StdI->direct[ii][0], &StdI->direct[ii][1], &StdI->direct[ii][2]);
Wannier90.c:  for (isite = 0; isite < StdI->NsiteUC; isite++) free(StdI->tau[isite]);
Wannier90.c:  free(StdI->tau);
Wannier90.c:  ierr = fscanf(fp, "%d", &StdI->NsiteUC);
Wannier90.c:  fprintf(stdout, "    Number of Correlated Sites = %d\n", StdI->NsiteUC);
Wannier90.c:  StdI->tau = (double **)malloc(sizeof(double*) * StdI->NsiteUC);
Wannier90.c:  for (ii = 0; ii < StdI->NsiteUC; ii++) StdI->tau[ii] = (double *)malloc(sizeof(double) * 3);
Wannier90.c:  for (isite = 0; isite < StdI->NsiteUC; isite++)
Wannier90.c:    ierr = fscanf(fp, "%lf%lf%lf", &StdI->tau[isite][0], &StdI->tau[isite][1], &StdI->tau[isite][2]);
Wannier90.c:    StdI->direct[ii][0], StdI->direct[ii][1], StdI->direct[ii][2]);
Wannier90.c:  for (isite = 0; isite < StdI->NsiteUC; isite++) printf("      %10.5f %10.5f %10.5f\n",
Wannier90.c:    StdI->tau[isite][0], StdI->tau[isite][1], StdI->tau[isite][2]);
Wannier90.c:        if(iWan0 <= StdI->NsiteUC && jWan0 <= StdI->NsiteUC)
Wannier90.c:        for (iWan = 0; iWan < StdI->NsiteUC; iWan++) {
Wannier90.c:          for (jWan = 0; jWan < StdI->NsiteUC; jWan++) {
Wannier90.c:      for (iWan = 0; iWan < StdI->NsiteUC; iWan++) {
Wannier90.c:    for (iWan = 0; iWan < StdI->NsiteUC; iWan++) {
Wannier90.c:      for (jWan = 0; jWan < StdI->NsiteUC; jWan++) {
Wannier90.c:        if (iWan0 <= StdI->NsiteUC && jWan0 <= StdI->NsiteUC)
Wannier90.c:        for (iWan = 0; iWan < StdI->NsiteUC; iWan++) {
Wannier90.c:          for (jWan = 0; jWan < StdI->NsiteUC; jWan++) {
Wannier90.c:      for (iWan = 0; iWan < StdI->NsiteUC; iWan++) {
Wannier90.c:    for (iWan = 0; iWan < StdI->NsiteUC; iWan++) {
Wannier90.c:      for (jWan = 0; jWan < StdI->NsiteUC; jWan++) {
Wannier90.c:      }/*for (jWan = 0; jWan < StdI->NsiteUC; jWan++)*/
Wannier90.c:    }/*for (iWan = 0; iWan < StdI->NsiteUC; iWan++)*/
Wannier90.c:  StdFace_PrintVal_d("phase0", &StdI->phase[0], 0.0);
Wannier90.c:  StdFace_PrintVal_d("phase1", &StdI->phase[1], 0.0);
Wannier90.c:  StdFace_PrintVal_d("phase2", &StdI->phase[2], 0.0);
Wannier90.c:  StdFace_PrintVal_d("cutoff_t", &StdI->cutoff_t, 1.0e-8);
Wannier90.c:  sprintf(filename, "%s_hr.dat", StdI->CDataFileHead);
Wannier90.c:  n_t = read_W90_query(StdI, filename, StdI->cutoff_t);
Wannier90.c:  read_W90(StdI, filename, StdI->cutoff_t, W90_t, t_indx);
Wannier90.c:  StdFace_PrintVal_d("cutoff_u", &StdI->cutoff_u, 1.0e-8);
Wannier90.c:  sprintf(filename, "%s_ur.dat", StdI->CDataFileHead);
Wannier90.c:  n_u = read_W90_query(StdI, filename, StdI->cutoff_u);
Wannier90.c:  read_W90(StdI, filename, StdI->cutoff_u, W90_u, u_indx);
Wannier90.c:  StdFace_PrintVal_d("cutoff_j", &StdI->cutoff_j, 1.0e-8);
Wannier90.c:  sprintf(filename, "%s_jr.dat", StdI->CDataFileHead);
Wannier90.c:  n_j = read_W90_query(StdI, filename, StdI->cutoff_j);
Wannier90.c:  read_W90(StdI, filename, StdI->cutoff_j, W90_j, j_indx);
Wannier90.c:  StdFace_NotUsed_d("K", StdI->K);
Wannier90.c:  StdFace_PrintVal_d("h", &StdI->h, 0.0);
Wannier90.c:  StdFace_PrintVal_d("Gamma", &StdI->Gamma, 0.0);
Wannier90.c:  StdFace_NotUsed_d("U", StdI->U);
Wannier90.c:  if (strcmp(StdI->model, "spin") == 0 ) {
Wannier90.c:    StdFace_PrintVal_i("2S", &StdI->S2, 1);
Wannier90.c:  }/*if (strcmp(StdI->model, "spin") == 0 )*/
Wannier90.c:  else if (strcmp(StdI->model, "hubbard") == 0) {
Wannier90.c:    StdFace_PrintVal_d("mu", &StdI->mu, 0.0);
Wannier90.c:  StdI->nsite = StdI->NsiteUC * StdI->NCell;
Wannier90.c:  StdI->locspinflag = (int *)malloc(sizeof(int) * StdI->nsite);
Wannier90.c:  if(strcmp(StdI->model, "spin") == 0 )
Wannier90.c:    for (isite = 0; isite < StdI->nsite; isite++) StdI->locspinflag[isite] = StdI->S2;
Wannier90.c:  else if(strcmp(StdI->model, "hubbard") == 0 )
Wannier90.c:    for (isite = 0; isite < StdI->nsite; isite++) StdI->locspinflag[isite] = 0;
Wannier90.c:  if (strcmp(StdI->model, "spin") == 0 ) {
Wannier90.c:    ntransMax = StdI->nsite * (StdI->S2 + 1/*h*/ + 2 * StdI->S2/*Gamma*/);
Wannier90.c:    nintrMax = StdI->NCell * (StdI->NsiteUC/*D*/ + n_t/*J*/ + n_u + n_j)
Wannier90.c:      * (3 * StdI->S2 + 1) * (3 * StdI->S2 + 1);
Wannier90.c:  else if (strcmp(StdI->model, "hubbard") == 0) {
Wannier90.c:    ntransMax = StdI->NCell * 2/*spin*/ * (2 * StdI->NsiteUC/*mu+h+Gamma*/ + n_t * 2/*t*/);
Wannier90.c:    nintrMax = StdI->NCell * (n_u + n_j + 1);
Wannier90.c:  if (strcmp(StdI->model, "spin") == 0) {
Wannier90.c:    Uspin = (double *)malloc(sizeof(double) * StdI->NsiteUC);
Wannier90.c:  }/*if (strcmp(StdI->model, "spin") == 0)*/
Wannier90.c:  for (kCell = 0; kCell < StdI->NCell; kCell++){
Wannier90.c:    iW = StdI->Cell[kCell][0];
Wannier90.c:    iL = StdI->Cell[kCell][1];
Wannier90.c:    iH = StdI->Cell[kCell][2];
Wannier90.c:    if (strcmp(StdI->model, "spin") == 0) {
Wannier90.c:      for (isite = StdI->NsiteUC*kCell; isite < StdI->NsiteUC*(kCell + 1); isite++) {
Wannier90.c:        StdFace_MagField(StdI, StdI->S2, -StdI->h, -StdI->Gamma, isite);
Wannier90.c:    }/*if (strcmp(StdI->model, "spin") == 0 )*/
Wannier90.c:      for (isite = StdI->NsiteUC*kCell; isite < StdI->NsiteUC*(kCell + 1); isite++) {
Wannier90.c:        StdFace_HubbardLocal(StdI, StdI->mu, -StdI->h, -StdI->Gamma, 0.0, isite);
Wannier90.c:    }/*if (strcmp(StdI->model, "spin") != 0 )*/
Wannier90.c:        if (strcmp(StdI->model, "hubbard") == 0) {
Wannier90.c:          isite = StdI->NsiteUC*kCell + t_indx[it][3];
Wannier90.c:            StdI->trans[StdI->ntrans] = -W90_t[it];
Wannier90.c:            StdI->transindx[StdI->ntrans][0] = isite;
Wannier90.c:            StdI->transindx[StdI->ntrans][1] = ispin;
Wannier90.c:            StdI->transindx[StdI->ntrans][2] = isite;
Wannier90.c:            StdI->transindx[StdI->ntrans][3] = ispin;
Wannier90.c:            StdI->ntrans = StdI->ntrans + 1;
Wannier90.c:        }/*if (strcmp(StdI->model, "hubbrad") == 0 )*/
Wannier90.c:        if (strcmp(StdI->model, "spin") == 0) {
Wannier90.c:          StdFace_GeneralJ(StdI, Jtmp, StdI->S2, StdI->S2, isite, jsite);
Wannier90.c:        }/*if (strcmp(StdI->model, "spin") == 0 )*/
Wannier90.c:        StdI->Cintra[StdI->NCintra] = creal(W90_u[it]);
Wannier90.c:        StdI->CintraIndx[StdI->NCintra][0] = StdI->NsiteUC*kCell + u_indx[it][3];
Wannier90.c:        StdI->NCintra += 1;
Wannier90.c:        StdI->Hund[StdI->NHund] = creal(W90_j[it]);
Wannier90.c:        StdI->HundIndx[StdI->NHund][0] = isite;
Wannier90.c:        StdI->HundIndx[StdI->NHund][1] = jsite;
Wannier90.c:        StdI->NHund += 1;
Wannier90.c:        if (strcmp(StdI->model, "hubbard") == 0) {
Wannier90.c:          StdI->Ex[StdI->NEx] = creal(W90_j[it]);
Wannier90.c:          StdI->ExIndx[StdI->NEx][0] = isite;
Wannier90.c:          StdI->ExIndx[StdI->NEx][1] = jsite;
Wannier90.c:          StdI->NEx += 1;
Wannier90.c:          StdI->PairHopp[StdI->NPairHopp] = creal(W90_j[it]);
Wannier90.c:          StdI->PHIndx[StdI->NPairHopp][0] = isite;
Wannier90.c:          StdI->PHIndx[StdI->NPairHopp][1] = jsite;
Wannier90.c:          StdI->NPairHopp += 1;
Wannier90.c:          StdI->Ex[StdI->NEx] = creal(W90_j[it]);
Wannier90.c:          StdI->Ex[StdI->NEx] = -creal(W90_j[it]);
Wannier90.c:          StdI->ExIndx[StdI->NEx][0] = isite;
Wannier90.c:          StdI->ExIndx[StdI->NEx][1] = jsite;
Wannier90.c:          StdI->NEx += 1;
Wannier90.c:  }/*for (kCell = 0; kCell < StdI->NCell; kCell++)*/
Wannier90.c:  if (strcmp(StdI->model, "spin") == 0) free(Uspin);
